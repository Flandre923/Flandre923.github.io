<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>sai软件下载地址备份</title>
      <link href="/2023/11/18/sai%E8%BD%AF%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%E5%A4%87%E4%BB%BD/"/>
      <url>/2023/11/18/sai%E8%BD%AF%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%E5%A4%87%E4%BB%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="源视频地址"><a href="#源视频地址" class="headerlink" title="源视频地址"></a>源视频地址</h1><p><a href="https://www.bilibili.com/video/BV1fL4y1a7cB/">【Sai】如何下载使用！提供安装教程（附带笔刷）_哔哩哔哩_bilibili</a></p><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p>万恶封面党~ 好久没有更新视频啦~ 今天趁着没有偷懒做一期教程吧~ 超简单，易懂易学的教程还不得人手一份~ 然后呢~ 喜欢的话不要忘记三连加关注哦<del>这次一定！！！ 对啦</del>忘记提供链接了</p><p> 附上：链接：<a href="https://pan.baidu.com/s/198xb60399uz0DysUB_AWjw">https://pan.baidu.com/s/198xb60399uz0DysUB_AWjw</a> </p><p>提取码：x5ol</p>]]></content>
      
      
      
        <tags>
            
            <tag> 绘画 </tag>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bilibili自动点赞代码解析</title>
      <link href="/2023/11/18/Bilibili%E8%87%AA%E5%8A%A8%E7%82%B9%E8%B5%9E%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2023/11/18/Bilibili%E8%87%AA%E5%8A%A8%E7%82%B9%E8%B5%9E%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="原地址"><a href="#原地址" class="headerlink" title="原地址"></a>原地址</h2><p><a href="https://github.com/howxcheng/BiliBili_Auto_Like/blob/main/autoLike.js">BiliBili_Auto_Like&#x2F;autoLike.js at main · howxcheng&#x2F;BiliBili_Auto_Like (github.com)</a></p><h2 id="原作者"><a href="#原作者" class="headerlink" title="原作者"></a>原作者</h2><p><a href="https://github.com/howxcheng">howxcheng (程昊) (github.com)</a></p><h2 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name           Bilibili自动点赞</span></span><br><span class="line"><span class="comment">// @name-en        Bilibili_Auto_Like</span></span><br><span class="line"><span class="comment">// @namespace      http://tampermonkey.net/</span></span><br><span class="line"><span class="comment">// @version        2.1</span></span><br><span class="line"><span class="comment">// @description    哔哩哔哩视频、番剧自动点赞</span></span><br><span class="line"><span class="comment">// @author         Howxcheng</span></span><br><span class="line"><span class="comment">// @match          *://*.bilibili.com/video/*</span></span><br><span class="line"><span class="comment">// @match          *://*.bilibili.com/bangumi/*</span></span><br><span class="line"><span class="comment">// @homepageURL    https://github.com/howxcheng/BiliBili_Auto_Like</span></span><br><span class="line"><span class="comment">// @supportURL     https://github.com/howxcheng/BiliBili_Auto_Like/issues</span></span><br><span class="line"><span class="comment">// @icon           https://t1.gstatic.com/faviconV2?client=SOCIAL&amp;type=FAVICON&amp;fallback_opts=TYPE,SIZE,URL&amp;url=http://bilibili.com&amp;size=16</span></span><br><span class="line"><span class="comment">// @license        MIT</span></span><br><span class="line"><span class="comment">// @run-at         document-start</span></span><br><span class="line"><span class="comment">// @grant          unsafeWindow</span></span><br><span class="line"><span class="comment">// @grant          GM_xmlhttpRequest</span></span><br><span class="line"><span class="comment">// @grant          GM_getResourceText</span></span><br><span class="line"><span class="comment">// @grant          GM_notification</span></span><br><span class="line"><span class="comment">// @grant          GM_openInTab</span></span><br><span class="line"><span class="comment">// @grant          GM_getValue</span></span><br><span class="line"><span class="comment">// @grant          GM_setValue</span></span><br><span class="line"><span class="comment">// @grant          GM_addStyle</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="string">&quot;use strict&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="variable constant_">WIDE_MODE_SWITCH</span> = <span class="literal">false</span>; <span class="comment">// 是否启用&lt;自动宽屏模式&gt;,true:开启,false:关闭</span></span><br><span class="line">  <span class="keyword">var</span> <span class="variable constant_">LIKE_TIME_OUT</span> = <span class="number">0</span>; <span class="comment">// 延迟点赞时间,单位:毫秒</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> originUrl = <span class="variable language_">document</span>.<span class="property">location</span>.<span class="title function_">toString</span>();</span><br><span class="line">  <span class="keyword">var</span> like_lock = <span class="literal">false</span>; <span class="comment">// 点赞计时器锁</span></span><br><span class="line">  <span class="keyword">var</span> like_timer = <span class="literal">null</span>; <span class="comment">// 点赞计时</span></span><br><span class="line">  <span class="keyword">var</span> like_count = <span class="number">0</span>; <span class="comment">// 点赞失败计数器</span></span><br><span class="line">  <span class="keyword">var</span> wide_lock = <span class="literal">false</span>; <span class="comment">// 宽屏计时器锁</span></span><br><span class="line">  <span class="keyword">var</span> wide_timer = <span class="literal">null</span>; <span class="comment">// 宽屏计时器锁</span></span><br><span class="line">  <span class="keyword">var</span> wide_count = <span class="number">0</span>; <span class="comment">// 宽屏失败计数器</span></span><br><span class="line">  <span class="keyword">var</span> main_timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">var</span> main_lock = <span class="literal">true</span>;</span><br><span class="line">  main_timer = <span class="built_in">setInterval</span>(changeEvent, <span class="number">1000</span>);  <span class="comment">// setInterval是一个函数，可以每隔一定的时间执行一个函数。这里是每隔1000毫秒（1秒）执行changeEvent函数，用于检测页面是否加载完成。</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">_e</span>) =&gt;</span> &#123;<span class="comment">//可以在文档上添加一个事件处理器。这里是在文档上添加一个点击事件处理器，当用户点击文档时，执行一个匿名函数。这个匿名函数使用了箭头函数的语法，可以简化函数的定义。这个匿名函数的参数是_e，表示事件对象，但是这里没有用到，所以用下划线开头表示忽略。</span></span><br><span class="line">    <span class="comment">// console.log(&quot;监控到点击事件&quot;);</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//这个匿名函数的内容是使用setTimeout函数延迟500毫秒（0.5秒）执行另一个匿名函数。这个匿名函数的内容是获取当前的网址，和原始的网址比较，如果不同，说明用户点击了其他的视频或番剧，那么就需要重新执行changeEvent函数，所以就设置一个新的计时器，每隔500毫秒执行一次changeEvent函数，并且把main_lock变量设为true，表示主计时器被锁定，避免重复设置计时器。</span></span><br><span class="line">      <span class="keyword">var</span> currentUrl = <span class="variable language_">document</span>.<span class="property">location</span>.<span class="title function_">toString</span>();</span><br><span class="line">      <span class="keyword">if</span> (currentUrl !== originUrl) &#123;</span><br><span class="line">        <span class="comment">// console.log(&quot;url不同，执行操作&quot;);</span></span><br><span class="line">        <span class="keyword">if</span> (!main_lock) &#123;</span><br><span class="line">          main_lock = <span class="literal">true</span>;</span><br><span class="line">          main_timer = <span class="built_in">setInterval</span>(changeEvent, <span class="number">500</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">    <span class="comment">//定义了changeEvent函数，用于检测页面是否加载完成，以及是否需要执行点赞和宽屏的操作。</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">changeEvent</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">//changeEvent函数的内容是判断文档的状态是否为&quot;complete&quot;，表示文档已经加载完成，可以进行操作。如果是，那么就判断like_lock和wide_lock变量是否为false，表示点赞和宽屏的计时器是否被锁定。</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">readyState</span> === <span class="string">&quot;complete&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">// console.log(&quot;执行&quot;);</span></span><br><span class="line">      <span class="keyword">if</span> (!like_lock) &#123;</span><br><span class="line">        like_lock = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// console.log(&quot;like锁定&quot;);</span></span><br><span class="line">        like_count = <span class="number">0</span>;</span><br><span class="line">        like_timer = <span class="built_in">setInterval</span>(clickLike, <span class="number">500</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable constant_">WIDE_MODE_SWITCH</span> &amp;&amp; !wide_lock) &#123;</span><br><span class="line">         <span class="comment">//如果没有被锁定，那么就设置相应的计时器，每隔500毫秒执行clickLike和setWideMode函数，用于实现点赞和宽屏的功能，并且把相应的锁和计数器设为true和0，表示开始执行操作。</span></span><br><span class="line">        wide_lock = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// console.log(&quot;wide锁定&quot;);</span></span><br><span class="line">        wide_count = <span class="number">0</span>;</span><br><span class="line">        wide_timer = <span class="built_in">setInterval</span>(setWideMode, <span class="number">500</span>);</span><br><span class="line">      &#125;</span><br><span class="line">        <span class="comment">//然后清除主计时器，更新原始的网址，把main_lock变量设为false，表示主计时器被解锁，可以重新设置。</span></span><br><span class="line">      <span class="built_in">clearInterval</span>(main_timer);</span><br><span class="line">      originUrl = <span class="variable language_">document</span>.<span class="property">location</span>.<span class="title function_">toString</span>();</span><br><span class="line">      <span class="comment">// console.log(&quot;timer解锁&quot;);</span></span><br><span class="line">      main_lock = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 自动宽屏模式</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">setWideMode</span>(<span class="params"></span>) &#123;</span><br><span class="line">    wide_count++;<span class="comment">// 计数器++ </span></span><br><span class="line">    <span class="keyword">var</span> _set_wide_mode_button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div[class=&quot;bpx-player-ctrl-btn bpx-player-ctrl-wide&quot;]&#x27;</span>);<span class="comment">// 获得宽频按钮</span></span><br><span class="line">    <span class="keyword">if</span> (_set_wide_mode_button !== <span class="literal">null</span>) &#123;<span class="comment">//如果宽屏按钮不为空</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        _set_wide_mode_button.<span class="title function_">click</span>();<span class="comment">//尝试点击按钮</span></span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="comment">// console.log(error);</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// console.log(&quot;非宽屏，切换宽屏,次数：&quot; + wide_count);</span></span><br><span class="line">      wide_count = <span class="number">64</span>;<span class="comment">// 计数器设置为64</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div[class=&quot;bpx-player-ctrl-btn bpx-player-ctrl-wide bpx-state-entered&quot;]&#x27;</span>) !== <span class="literal">null</span>) &#123;<span class="comment">//如果按钮不存在</span></span><br><span class="line">      <span class="comment">// console.log(&quot;宽屏，跳过,次数：&quot; + wide_count);</span></span><br><span class="line">      wide_count = <span class="number">64</span>;<span class="comment">//计数器设置为64</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (wide_count &lt;= <span class="number">60</span>) <span class="keyword">return</span>;<span class="comment">//如果计数器小于60，宽屏按钮存在，但是为点击到,则返回</span></span><br><span class="line">    <span class="comment">// console.log(&quot;wide解锁&quot;);</span></span><br><span class="line">    <span class="built_in">clearInterval</span>(wide_timer);<span class="comment">//清除wide_timer计数器</span></span><br><span class="line">    <span class="title function_">goToSuitable</span>();<span class="comment">//滚到合适位置</span></span><br><span class="line">    wide_lock = <span class="literal">false</span>;<span class="comment">//宽屏锁关闭</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 滚动至合适位置</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">goToSuitable</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(&#123;</span><br><span class="line">        <span class="attr">top</span>: <span class="number">92</span>,</span><br><span class="line">        <span class="attr">behavior</span>: <span class="string">&quot;smooth&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 点赞</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">clickLike</span>(<span class="params"></span>) &#123;</span><br><span class="line">    like_count++;<span class="comment">//点赞计数器</span></span><br><span class="line">    <span class="keyword">var</span> _like_button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div[class=&#x27;video-like video-toolbar-left-item&#x27;]&quot;</span>);<span class="comment">//获得点赞按钮</span></span><br><span class="line">    <span class="keyword">if</span> (_like_button !== <span class="literal">null</span>) &#123; <span class="comment">// 点赞按钮存在</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// // console.log(&quot;正在点赞&quot;);</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span></span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            _like_button.<span class="title function_">click</span>();</span><br><span class="line">            <span class="title class_">Toast</span>(<span class="string">&quot;已自动点赞&quot;</span>, <span class="number">3000</span>);</span><br><span class="line">          &#125;, <span class="variable constant_">LIKE_TIME_OUT</span>) <span class="comment">// 阻塞，延迟LIKE_TIME_OUT时间点赞执行，并提示信息。默认为0秒</span></span><br><span class="line">        );</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="comment">// console.log(error);</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// console.log(&quot;未点赞，正在点赞,次数：&quot; + like_count);</span></span><br><span class="line">      like_count = <span class="number">64</span>; <span class="comment">// 点赞成功 设置计数器64</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div[class=&#x27;video-like video-toolbar-left-item on&#x27;]&quot;</span>) !== <span class="literal">null</span>) &#123;<span class="comment">// 获得点赞按钮失败</span></span><br><span class="line">      <span class="comment">// console.log(&quot;已点赞,次数：&quot; + like_count);</span></span><br><span class="line">      like_count = <span class="number">64</span>;<span class="comment">//设置计数器64</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (like_count &lt;= <span class="number">60</span>) <span class="keyword">return</span>; <span class="comment">// 如果点赞小于64则说明存在点赞按钮未点击到，500ms后重新点赞</span></span><br><span class="line">    <span class="comment">// console.log(&quot;like解锁&quot;);</span></span><br><span class="line">    <span class="built_in">clearInterval</span>(like_timer);<span class="comment">//点赞成功，清楚计数器</span></span><br><span class="line">    like_lock = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//界面toast提示</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Toast</span>(<span class="params">msg, duration</span>) &#123;</span><br><span class="line">    duration = <span class="built_in">isNaN</span>(duration) ? <span class="number">3000</span> : duration;</span><br><span class="line">    <span class="keyword">var</span> m = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    m.<span class="property">innerHTML</span> = msg;</span><br><span class="line">    m.<span class="property">style</span>.<span class="property">cssText</span> =</span><br><span class="line">      <span class="string">&quot;font-family:siyuan;max-width:60%;min-width: 150px;padding:0 14px;height: 40px;color: rgb(255, 255, 255);line-height: 40px;text-align: center;border-radius: 4px;position: fixed;top: 10%;left: 50%;transform: translate(-50%, -50%);z-index: 999999;background: rgba(0, 0, 0,.7);font-size: 16px;&quot;</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(m);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> d = <span class="number">0.5</span>;</span><br><span class="line">      m.<span class="property">style</span>.<span class="property">webkitTransition</span> = <span class="string">&quot;-webkit-transform &quot;</span> + d + <span class="string">&quot;s ease-in, opacity &quot;</span> + d + <span class="string">&quot;s ease-in&quot;</span>;</span><br><span class="line">      m.<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(m);</span><br><span class="line">      &#125;, d * <span class="number">1000</span>);</span><br><span class="line">    &#125;, duration);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> bilibili </tag>
            
            <tag> 自动点赞 </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文-02-Super Resolution Based Change Detection Network with Stacked Attention Module for Images With Different Resolutions</title>
      <link href="/2023/11/16/%E8%AE%BA%E6%96%87-02-Super-Resolution-Based-Change-Detection-Network-with-Stacked-Attention-Module-for-Images-With-Different-Resolutions/"/>
      <url>/2023/11/16/%E8%AE%BA%E6%96%87-02-Super-Resolution-Based-Change-Detection-Network-with-Stacked-Attention-Module-for-Images-With-Different-Resolutions/</url>
      
        <content type="html"><![CDATA[<h1 id="Super-Resolution-Based-Change-Detection-Network-with-Stacked-Attention-Module-for-Images-With-Different-Resolutions-基于叠加注意力模块的超分辨率变化检测网络"><a href="#Super-Resolution-Based-Change-Detection-Network-with-Stacked-Attention-Module-for-Images-With-Different-Resolutions-基于叠加注意力模块的超分辨率变化检测网络" class="headerlink" title="Super Resolution Based Change Detection Network with Stacked Attention Module for Images With Different Resolutions(基于叠加注意力模块的超分辨率变化检测网络)"></a>Super Resolution Based Change Detection Network with Stacked Attention Module for Images With Different Resolutions(基于叠加注意力模块的超分辨率变化检测网络)</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><h3 id="什么是变化检测："><a href="#什么是变化检测：" class="headerlink" title="什么是变化检测："></a>什么是变化检测：</h3><p>变化检测（CD）旨在基于双时态图像来区分表面变化。</p><h3 id="变化检测通常采用不同分辨率的双时间图像的原因："><a href="#变化检测通常采用不同分辨率的双时间图像的原因：" class="headerlink" title="变化检测通常采用不同分辨率的双时间图像的原因："></a>变化检测通常采用不同分辨率的双时间图像的原因：</h3><p>由于<strong>高分辨率（HR）</strong>图像通常不能随时间连续采集，因此在实际应用中，变化检测（CD)通常采用不同分辨率的双时间图像。</p><h3 id="传统的基于亚像素的CD方法使用的是什么图像："><a href="#传统的基于亚像素的CD方法使用的是什么图像：" class="headerlink" title="传统的基于亚像素的CD方法使用的是什么图像："></a>传统的基于亚像素的CD方法使用的是什么图像：</h3><p>不同分辨率的图像。</p><h3 id="传统的基于亚像素的CD方法当使用HR图像时会存在什么问题："><a href="#传统的基于亚像素的CD方法当使用HR图像时会存在什么问题：" class="headerlink" title="传统的基于亚像素的CD方法当使用HR图像时会存在什么问题："></a>传统的基于亚像素的CD方法当使用HR图像时会存在什么问题：</h3><p>亚稳态（sub-stantial error accumulation）误差积累。</p><h3 id="为什么传统的基于亚像素的CD方法当使用HR图像时会出现亚稳态误差积累："><a href="#为什么传统的基于亚像素的CD方法当使用HR图像时会出现亚稳态误差积累：" class="headerlink" title="为什么传统的基于亚像素的CD方法当使用HR图像时会出现亚稳态误差积累："></a>为什么传统的基于亚像素的CD方法当使用HR图像时会出现亚稳态误差积累：</h3><p>这是因为组内异质性（intraclass heterogeneity ）和组间相似性（ interclass similarity）。</p><h3 id="为什么需要提出一种新的CD方法？"><a href="#为什么需要提出一种新的CD方法？" class="headerlink" title="为什么需要提出一种新的CD方法？"></a>为什么需要提出一种新的CD方法？</h3><p>有必要开发一种新的CD方法，使用更适合HR图像的不同分辨率的图像。</p><h3 id="本论文提出的新的CD方法是什么？"><a href="#本论文提出的新的CD方法是什么？" class="headerlink" title="本论文提出的新的CD方法是什么？"></a>本论文提出的新的CD方法是什么？</h3><p>本论文提出了一种具有堆叠注意力模块（stacked attention module SAM）的基于超分辨率的变化检测网络（super-resolution-based SRCDNet）</p><h3 id="本论文网络模型的构成包含了："><a href="#本论文网络模型的构成包含了：" class="headerlink" title="本论文网络模型的构成包含了："></a>本论文网络模型的构成包含了：</h3><p>SRCDNet采用了一个包含生成器和鉴别器的SR模块。</p><h3 id="生成器和鉴别器的SR模块的作用是："><a href="#生成器和鉴别器的SR模块的作用是：" class="headerlink" title="生成器和鉴别器的SR模块的作用是："></a>生成器和鉴别器的SR模块的作用是：</h3><p>生成器和鉴别器的超分辨率（SR）模块，通过对抗性学习直接学习SR图像，并克服双时态图像之间的分辨率差异</p><h3 id="特征提取器包含了？"><a href="#特征提取器包含了？" class="headerlink" title="特征提取器包含了？"></a>特征提取器包含了？</h3><p>由五个卷积块注意力模块（CBAM）组成的SAM</p><h3 id="注意力模块（CBAM）组成的SAM的作用是什么？"><a href="#注意力模块（CBAM）组成的SAM的作用是什么？" class="headerlink" title="注意力模块（CBAM）组成的SAM的作用是什么？"></a>注意力模块（CBAM）组成的SAM的作用是什么？</h3><p>为了增强多尺度特征中的有用信息。</p><h3 id="变化决策模块是如何学习的？"><a href="#变化决策模块是如何学习的？" class="headerlink" title="变化决策模块是如何学习的？"></a>变化决策模块是如何学习的？</h3><p>通过基于度量学习的</p><h3 id="变化决策模块的作用是什么？"><a href="#变化决策模块的作用是什么？" class="headerlink" title="变化决策模块的作用是什么？"></a>变化决策模块的作用是什么？</h3><p>块获得最终的变化图，其中计算双时态特征之间的距离图</p><h3 id="本论文的模型在那些数据集上进行了测试？"><a href="#本论文的模型在那些数据集上进行了测试？" class="headerlink" title="本论文的模型在那些数据集上进行了测试？"></a>本论文的模型在那些数据集上进行了测试？</h3><p>建筑变化检测数据集（BCDD）和季节变化检测数据集中（CDD）</p><h3 id="在建筑变化检测数据集（BCDD）和季节变化检测数据集中（CDD）上进行了什么研究？"><a href="#在建筑变化检测数据集（BCDD）和季节变化检测数据集中（CDD）上进行了什么研究？" class="headerlink" title="在建筑变化检测数据集（BCDD）和季节变化检测数据集中（CDD）上进行了什么研究？"></a>在建筑变化检测数据集（BCDD）和季节变化检测数据集中（CDD）上进行了什么研究？</h3><p>消融研究和对比实验</p><h3 id="论文是如何保证泛化性的？"><a href="#论文是如何保证泛化性的？" class="headerlink" title="论文是如何保证泛化性的？"></a>论文是如何保证泛化性的？</h3><p>在谷歌数据集上进行的真实图像实验，充分证明了该方法的优越性。</p><h3 id="本论文源码地址："><a href="#本论文源码地址：" class="headerlink" title="本论文源码地址："></a>本论文源码地址：</h3><p>https: &#x2F;&#x2F;github.com&#x2F;liumency&#x2F;SRCDNet</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="变化检测作用"><a href="#变化检测作用" class="headerlink" title="变化检测作用"></a>变化检测作用</h3><p>识别同一区域的双时图像中的地表变化</p><h3 id="变化检测的作用"><a href="#变化检测的作用" class="headerlink" title="变化检测的作用"></a>变化检测的作用</h3><ul><li>土地资源调查</li><li>生态监测与保护</li><li>城市规划</li><li>提供定量数据</li></ul><h3 id="变化检测特点是"><a href="#变化检测特点是" class="headerlink" title="变化检测特点是"></a>变化检测特点是</h3><ul><li>由于其能够以高的时间效率提供大范围地表的丰富信息</li></ul><h3 id="多光谱卫星图形在过去几十年的发展应用在了多光谱卫星图像。"><a href="#多光谱卫星图形在过去几十年的发展应用在了多光谱卫星图像。" class="headerlink" title="多光谱卫星图形在过去几十年的发展应用在了多光谱卫星图像。"></a>多光谱卫星图形在过去几十年的发展应用在了多光谱卫星图像。</h3><h3 id="传统的对于光谱分析的CD方法是什么"><a href="#传统的对于光谱分析的CD方法是什么" class="headerlink" title="传统的对于光谱分析的CD方法是什么"></a>传统的对于光谱分析的CD方法是什么</h3><ul><li>化向量分析（CVA）[9]</li><li>主成分分析（PCA）[10]</li></ul><h3 id="传统分析方法是怎么进行工作的"><a href="#传统分析方法是怎么进行工作的" class="headerlink" title="传统分析方法是怎么进行工作的"></a>传统分析方法是怎么进行工作的</h3><ul><li>主要利用双时态图像中的光谱信息</li></ul><h3 id="多光谱图像本身具有什么特点，这样的特点有导致了什么问题？"><a href="#多光谱图像本身具有什么特点，这样的特点有导致了什么问题？" class="headerlink" title="多光谱图像本身具有什么特点，这样的特点有导致了什么问题？"></a>多光谱图像本身具有什么特点，这样的特点有导致了什么问题？</h3><ul><li>图像的光谱分辨率和空间分辨率相互制约，多光谱卫星图像的空间分辨率通常较低，难以实现精确的CD。</li></ul><h3 id="目前的遥感的发展导致在过去的几十年里，多光谱卫星图像高分辨率图像已成为CD的主要数据源，尤其在细粒度场景，如城市更新-11-。"><a href="#目前的遥感的发展导致在过去的几十年里，多光谱卫星图像高分辨率图像已成为CD的主要数据源，尤其在细粒度场景，如城市更新-11-。" class="headerlink" title="目前的遥感的发展导致在过去的几十年里，多光谱卫星图像高分辨率图像已成为CD的主要数据源，尤其在细粒度场景，如城市更新[11]。"></a>目前的遥感的发展导致在过去的几十年里，多光谱卫星图像高分辨率图像已成为CD的主要数据源，尤其在细粒度场景，如城市更新[11]。</h3><h3 id="新的方法是什么，他为什么能解决这个问题。有哪些方法？"><a href="#新的方法是什么，他为什么能解决这个问题。有哪些方法？" class="headerlink" title="新的方法是什么，他为什么能解决这个问题。有哪些方法？"></a>新的方法是什么，他为什么能解决这个问题。有哪些方法？</h3><ul><li>基于深度学习的方法</li><li>深度学习的方法，包括强大的特征学习结构，即卷积神经网络，从HR图像中分层提取空间和语义特征[12]</li><li>基于分类的方法[13]-[15]</li><li>基于度量学习的方法[16]、[17]。</li></ul><h3 id="HR图像优点："><a href="#HR图像优点：" class="headerlink" title="HR图像优点："></a>HR图像优点：</h3><p>改善地球表面现象的特征</p><h3 id="HR图像存在问题："><a href="#HR图像存在问题：" class="headerlink" title="HR图像存在问题："></a>HR图像存在问题：</h3><p>观测范围小、时间分辨率低以及云和雾的影响</p><h3 id="造成HR图像存在问题的原因："><a href="#造成HR图像存在问题的原因：" class="headerlink" title="造成HR图像存在问题的原因："></a>造成HR图像存在问题的原因：</h3><p>气象和技术影响</p><h3 id="这些问题对HR图形会有什么影响："><a href="#这些问题对HR图形会有什么影响：" class="headerlink" title="这些问题对HR图形会有什么影响："></a>这些问题对HR图形会有什么影响：</h3><p>限制HR图像调查的实际能力和影响</p><h3 id="传统的变化检测的方法特点："><a href="#传统的变化检测的方法特点：" class="headerlink" title="传统的变化检测的方法特点："></a>传统的变化检测的方法特点：</h3><p>依赖相同分辨率的双时图像分析。</p><h3 id="为什么传统的变化检测的方法不能够解决遥感的变化检测问题？特别是在大规模下。"><a href="#为什么传统的变化检测的方法不能够解决遥感的变化检测问题？特别是在大规模下。" class="headerlink" title="为什么传统的变化检测的方法不能够解决遥感的变化检测问题？特别是在大规模下。"></a>为什么传统的变化检测的方法不能够解决遥感的变化检测问题？特别是在大规模下。</h3><p>让我们假设我们在时间T1获得了某个区域的HR图像，但只有与时间T2相对应的低分辨率（LR）图像可用；然后，我们需要使用不同分辨率的双时态图像来检测T1和T2之间发生的变化。因此，为了实现大规模和快速的CD，通常需要在现实应用中使用不同分辨率的双时态图像[18]-[20]。</p><p><strong>说明现实中大多数时候的不同时间的遥感的图像的分辨率是不同的。</strong></p><h3 id="传统的方法是怎么解决这样的问题的？"><a href="#传统的方法是怎么解决这样的问题的？" class="headerlink" title="传统的方法是怎么解决这样的问题的？"></a>传统的方法是怎么解决这样的问题的？</h3><p>最直观的方法是简单地将HR图像下采样到LR图像的分辨率[21]，或者将LR图像插值到HR图像的分辨率，以获得具有相同分辨率的双时态图像[22]，然后使用常见的CD方法来检测变化。</p><h3 id="这两种方法分别由什么问题？"><a href="#这两种方法分别由什么问题？" class="headerlink" title="这两种方法分别由什么问题？"></a>这两种方法分别由什么问题？</h3><p>第一种方法核心的下采样步骤导致缺乏结果的详细空间信息，这导致所获得结果的精度严重下降。</p><p>第二种方法没有考虑应用于遥感图像的常见插值操作（如线性、双线性和双三次插值）中的语义信息，这导致实现感兴趣区域的详细信息的能力不足。</p><h3 id="除了最简单的插值方法外还有什么方法解决不同分辨率下的图像问题？"><a href="#除了最简单的插值方法外还有什么方法解决不同分辨率下的图像问题？" class="headerlink" title="除了最简单的插值方法外还有什么方法解决不同分辨率下的图像问题？"></a>除了最简单的插值方法外还有什么方法解决不同分辨率下的图像问题？</h3><p>在这种情况下，基于亚像素的方法是最普遍的。</p><p>亚像素映射（SPM）从粗分辨率图像中获得精细分辨率土地覆盖图 具有优异能力[23]-[25]。</p><p>Ling等人[26]首先将SPM引入CD，使用不同分辨率的图像（简称“不同分辨率CD”），提出了一种空间模式。</p><h4 id="什么空间模式："><a href="#什么空间模式：" class="headerlink" title="什么空间模式："></a>什么空间模式：</h4><p>亚像素尺度的LCC地图的空间模式</p><h4 id="手段是："><a href="#手段是：" class="headerlink" title="手段是："></a>手段是：</h4><p>空间相关性原理</p><p>一种新的土地覆盖变化（LCC）规则</p><p>Wang等人[27]提出了一种具有SPM的Hopfield神经网络，以克服陆地卫星和中分辨率成像光谱仪（MODIS）图像在亚像素分辨率LCCs中的分辨率差异。</p><p>李等人[28]将迭代超分辨率CD方法应用于陆地卫星MODIS CD，该方法结合了端元估计、光谱分解和SPM。</p><p>吴等人[29]提出了一种反向传播神经网络，用于从软分类中获得亚像素LCC图</p><h3 id="SPM方法是什么方法，在上面方面是有效的，在HR图形上存在什么问题，为什么要开发新的CD方法。"><a href="#SPM方法是什么方法，在上面方面是有效的，在HR图形上存在什么问题，为什么要开发新的CD方法。" class="headerlink" title="SPM方法是什么方法，在上面方面是有效的，在HR图形上存在什么问题，为什么要开发新的CD方法。"></a>SPM方法是什么方法，在上面方面是有效的，在HR图形上存在什么问题，为什么要开发新的CD方法。</h3><p>这些基于SPM的方法通过在以前的精细分辨率土地覆盖图和粗分辨率图像之间建立映射来获得精细分辨率变化图，并且已被证明在处理遥感图像CD的大尺度差异方面是有效的，特别是在陆地卫星和MODIS图像上。然而，在这些情况下，精细分辨率变化图的精度在很大程度上受到前一精细分辨率土地覆盖图精度的限制，导致冗余误差积累。由于HR图像中的组内异质性和组间相似性，这样的问题对于HR图像来说将更加严重。因此，迫切需要为不同空间分辨率的HR图像开发更精确的CD方法。</p><h3 id="本论文提出的网络基于什么的？做什么用的？本论文呢是如何解决冗余错误的问题的？对SR图像和HR图像是怎么处理的？以及SAM的组成和作用是什么？对比损失的作用是什么？"><a href="#本论文提出的网络基于什么的？做什么用的？本论文呢是如何解决冗余错误的问题的？对SR图像和HR图像是怎么处理的？以及SAM的组成和作用是什么？对比损失的作用是什么？" class="headerlink" title="本论文提出的网络基于什么的？做什么用的？本论文呢是如何解决冗余错误的问题的？对SR图像和HR图像是怎么处理的？以及SAM的组成和作用是什么？对比损失的作用是什么？"></a>本论文提出的网络基于什么的？做什么用的？本论文呢是如何解决冗余错误的问题的？对SR图像和HR图像是怎么处理的？以及SAM的组成和作用是什么？对比损失的作用是什么？</h3><p>在本文中，我们提出了一种端到端的，基于超分辨率的，用于不同分辨率变化检测的，变化检测网络（SRCDNet）。为了解决双时态图像空间分辨率不匹配的问题，SRCDNet采用超分辨率模块（SRM）直接从LR图像中学习超分辨率图像，以恢复更多的语义信息并避免冗余错误。然后将SR图像与对应于其他时间戳的HR图像一起输入到特征提取器中。为了充分提取HR图像中的多级信息，以便于后续预测，还将由五个卷积块注意力模块（CBAM）组成的堆叠注意力模块（SAM）添加到特征提取器中。然后，为了从双时态图像的多尺度特征中学习精确的变化图，计算特征之间的距离图，并将其与基本事实进行比较，其中采用对比损失（度量学习中的常见损失）来帮助增加变化区域的距离，减少不变区域的距离。最后，可以通过简单的阈值处理从距离图中获得变化图。</p><h3 id="本论文研究的贡献，如何解决了误差积累的问题，如何有效的提取层次特征，进行了那些研究保证了精度。"><a href="#本论文研究的贡献，如何解决了误差积累的问题，如何有效的提取层次特征，进行了那些研究保证了精度。" class="headerlink" title="本论文研究的贡献，如何解决了误差积累的问题，如何有效的提取层次特征，进行了那些研究保证了精度。"></a>本论文研究的贡献，如何解决了误差积累的问题，如何有效的提取层次特征，进行了那些研究保证了精度。</h3><p>1） 我们提供了一个端到端的基于超分辨率的HR图像光盘网络；所提出的方案通过LR图像和初始HR图像之间的映射来学习SR图像，以避免传统的基于亚像素的方法中遇到的误差累积。</p><p>2） 我们将由五个CBAM块组成的SAM集成到网络的特征提取器中，以增强层次特征中的有效信息，获得更可区分的特征对，这可以通过度量学习极大地帮助后续的变化决策。</p><p>3） 在两个常见的变化检测数据集（CDD）上进行了比较实验，即构建变化检测数据集中（BCDD）[30]和CDD[31]，以验证SRCDNet的有效性，并构建了一个基于谷歌数据集[32]的真实图像数据集，以在真实图像上进一步测试SRCDNet。结果表明，该模型不仅在BCDD和CDD中模拟的不同分辨率图像上具有最先进的SOTA性能，而且在真实图像上也获得了最高的精度。</p><h3 id="本文的结构"><a href="#本文的结构" class="headerlink" title="本文的结构"></a>本文的结构</h3><p>本文的其余部分组织如下：第二节进一步介绍了一些相关工作。第三节介绍了关于拟议网络的详细信息。第四节阐述了本研究中进行的所有实验的设置。在第五节中，我们介绍了我们的结果和详细分析。第六节讨论了不同设置对模型的影响。最后，我们在第七节中总结这篇文章。</p><h2 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h2><h3 id="A-基于深度学习的CD"><a href="#A-基于深度学习的CD" class="headerlink" title="A. 基于深度学习的CD"></a>A. 基于深度学习的CD</h3><p>在<strong>全卷积网络（FCN）[33]提供了一种更直观的密集预测方法之后，</strong>许多基于FCN及其变体，</p><p>特别是U-Net [34]的方法已被提出用于<strong>像素级CD</strong>。</p><p>Daudt等人[14]基于U-Net探索了三种不同的图像输入方法，包括早期融合、Siamese_difference和Siamese_concatenation，用于<strong>双时相CD</strong>。</p><p>为了充分利<strong>用双时相图像中的全局和局部信息</strong>，Peng等人[35]提<strong>出了U-Net+</strong>+，采用多尺度特征融合策略生成最终的变化图。</p><p>U-Net的<strong>编码器-解码器结</strong>构通常用于<strong>语义分割任务，</strong>其中<strong>编码器</strong>用于提取<strong>双时相图像的多级语义特征</strong>，<strong>解码器</strong>用于从<strong>分层特征中恢复空间信息</strong>，并通过<strong>分类生成</strong>CD图。</p><p>近年来，一些研究<strong>将度量学习引入CD</strong>中，以替换<strong>解码器</strong>的<strong>上采样过</strong>程，通过计算<strong>双时相图像的特征之间的</strong>距<strong>离直接</strong>获得变化图。</p><p>在训练过程中，“<strong>未更改”特征之间</strong>的距离被最小化，而“<strong>更改”特征之间的</strong>距离被最大化；<strong>损失函数</strong>在此过程中起着重要作用。</p><p>例如，Zhang等人[36]使用改进的<strong>三元组损失</strong>来学习成对<strong>特征中多尺度信息之间的语义关系</strong>。</p><p>Wang等人[37]使用对比损失来检测基于使<strong>用Siamese卷积网络</strong>提取的特征的变化。为了<strong>减轻CD中类别不平衡的影响</strong>，Chen和Shi[16]采用批<strong>量对比损失</strong>来训练所提出的<strong>时空注意力网络</strong>（STANet）。</p><h3 id="B-CD策略"><a href="#B-CD策略" class="headerlink" title="B CD策略"></a>B CD策略</h3><p>虽然高分辨率（HR）图像由于组内异质性和组间相似性的影响而导致误报警或漏报警，但已经尝试了许多方法来生成更具有区分性的特征，包括循环神经网络（RNN）[38]和注意机制。</p><p>Papadomanolaki等人[13]将长短期记忆块（LSTMs）[39]集成到FCN中，以检测Sentinel-2图像中的城市变化，并证明了<strong>RNN</strong>对于<strong>捕捉图像之间的光谱或时间关系是</strong>有效的。</p><p>此外，Song等人[40]将卷积LSTM与3-D FCN相结合，以捕获高光谱图像中的<strong>联合光谱-空间-时间特征</strong>。尽管RNN可以在多光谱和高光谱输入上很好地工作，但由于HR图像中<strong>光谱信息不频繁和双时相图像中时间信息不足</strong>，它们仍然受到限制。</p><p>由于<strong>注意机制能够增强提取特征中的有用信息</strong>，因此已经采用注意机制更好地利用HR图像中丰富的空间信息。</p><p>Chen和Shi[16]在CD网络的特征提取器中集成了<strong>自注意模块，以</strong>加强<strong>双时相特征之间的时空关</strong>系。Chen等人[17]为每个双时相特征使用双CBAM [41]来强调图像中的变化信息，从而促进了基于度量学习的变化决策。然而，由于内存限制，在现有的有效利用空间信息进行CD的方法中，<strong>注意机制通常仅应用于高级语义特征，而忽略了浅层特征的增强。</strong></p><h3 id="C-超分辨率"><a href="#C-超分辨率" class="headerlink" title="C 超分辨率"></a>C 超分辨率</h3><p>由于图像质量在许多视觉应用中起着至关重要的作用，超分辨率旨在从LR图像中获得更高质量的图像。近年来，深度学习的繁荣为图像超分辨率带来了新的解决方案，特别是针对单幅图像超分辨率（SSIR）。为了在从LR图像重建HR图像时更好地恢复图像的详细信息，Dong等人[42]首次将CNN引入SR应用程序作为超分辨率卷积神经网络（SRCNN）。此后，研究人员已经相继提出了一系列有效的SR算法。Kim等人[43]通过将SRCNN和Visual Geometry Group（VGG）骨干结合起来，设计了一个名为very deep super-resolution（VDSR）的具有20层的深度神经网络。Kim等人[44]还为SR提出了一种深度递归卷积网络（DRCN）。鉴于生成对抗网络（GANs）[45]在其他各个领域的出色表现，Ledig等人[46]将GAN应用于SR，并提出了超分辨率生成对抗网络（SRGAN），该网络在当时实现了SOTA性能。结合上述研究，我们提出了一种深度度量学习变化检测网络（CDNet），将超分辨率集成到其中，以学习从LR图像到HR图像的映射，并使用注意机制获取更有效的多尺度特征，用于不同分辨率的CD。</p><h2 id="III-方法论"><a href="#III-方法论" class="headerlink" title="III. 方法论"></a>III. 方法论</h2><p>本节提供了所提出方法的简要概述，随后详细描述了每个部分及模型的优化过程。</p><h3 id="A-概述"><a href="#A-概述" class="headerlink" title="A. 概述"></a>A. 概述</h3><p>SRCDNet如图1所示，由两部分组成：超分辨率（SR）模块和CD模块。基于GAN架构，SR模块由生成器和判别器组成，旨在将双时相图像的LR图像重建为HR图像。CD模块负责特征提取和CD。特征提取器中集成了一个SAM和五个CBAM，这是一种轻量级的注意机制，可以增强特征的通道和空间信息，以提取多尺度特征。之后，采用深度度量学习进行后续变化决策。</p><p>假设我们需要检测在T1获得的高分辨率（HR）图像和在T2获得的低分辨率（LR）图像之间的变化，其分辨率差异可以表示为N（N &#x3D; 4,8）。给定T1和T2的一组HR双时相图像，分别称为$$ I^{HR}<em>{T1}$$和 $$I</em>{T2}^{HR}$$，以及相应的变化注释Y。 $$I_{T2}^{HR}$$将被下采样N次以生成T2的LR图像，可以称为$$I^{LR}<em>{T2}$$。因此，我们可以获得由一组图像$$(I</em>{T1}^{HR},I_{T2}^{HR},I_{T2}^{LR}) &#x3D; {(i_{T1}^{HR},i_{T2}^{HR},i_{T2}^{LR})^1,…,(i_{T1}^{HR},i_{T2}^{HR},i_{T2}^{LR})}$$^n ，n∈N 组成的训练集，以及地面实况$$ GT &#x3D; {gt^1，..，gt^n}，n∈N$$，然后可以总结SRCDNet的流程如下。</p><p>1）将$$I_{T2}^{LR}$$输入SR模块的生成器G，生成器G将生成T2的SR图像，即$$I_{T2}^{SR} &#x3D; G(I_{T2}^{LR})$$，与$$I_{T2}^{HR}$$相同大小;之后，判别器D负责学习通过损失$${Loss}<em>{d}$$来区分$$I</em>{T2}^{SR}$$和$$I_{T2}^{HR}$$，$${Loss}<em>{d}$$由判别器的输出D($$I</em>{T2}^{SR}$$)和D($$I_{T2}^{HR}$$)构成。</p><p>2)然后，$$ I_{T1}^{HR}$$和$$I_{T2}^{SR}$$都被输入到共享权重的特征提取器中，以获得分层特征。在将四个中间特征堆叠成一个之前，应用了前四个CBAM。然后，在堆叠后的特征上应用第五个CBAM块。</p><p>3)此后，根据双时相特征$$f_{r1}$$和$$f_{r2}$$计算距离图dt，以测量$$ I_{T1}^{HR}$$和$$I_{T2}^{SR}$$之间的距离，然后与真值gt进行比较，得到对比损失$$Loss_{CD}$$。然后优化度量$$Loss_{CD}$$，以拉开真值上变化区域之间的距离，缩小不变区域之间的距离。<br>4)最后，根据$$I_{T2}^{SR}$$和$$I_{T2}^{HR}$$之间的差异、判别器的结果和CD性能$$Loss_{CD}$$，优化生成器G，以生成具有丰富语义信息的SR图像。</p><p><img src="https://s2.loli.net/2023/11/17/Exi1WsrbvNUhG53.png" alt="image-20231117103903545"></p><p>值得注意的是，当双时态图像之间没有空间分辨率差异时，通过去除SR模块，SRCDNet可以很容易地退化为简单的CDNet；这一细节显著提高了模型的通用性。</p><h3 id="B-超分辨率模块"><a href="#B-超分辨率模块" class="headerlink" title="B 超分辨率模块"></a>B 超分辨率模块</h3><p>SR模块的结构受到了SRGAN方案的启发，其中一个生成器负责从LR图像生成SR图像，而一个判别器负责区分SR图像和初始的HR图像，直到它们彼此无法区分，然后生成器就能够输出足够进行细粒度CD的SR图像。</p><blockquote><p>这段内容是介绍了SR模块的设计原理，它是基于生成对抗网络（GAN）的思想，利用一个生成器和一个判别器来实现超分辨率（SR）的效果。生成器的目标是从低分辨率（LR）图像生成高分辨率（HR）图像，判别器的目标是判断生成的图像是否真实。当判别器无法区分真假时，说明生成器达到了最优，能够输出高质量的SR图像，这对于变化检测（CD）是有利的，因为可以提高检测的精度。</p></blockquote><p>生成器首先使用一个9×9的卷积层来捕获输入LR图像的浅层特征，然后使用五个残差块来提取高层特征。每个残差块由两个3×3的卷积层组成，后面跟着一个批量归一化（BN）层，其中第一个是一个参数化整流线性单元（PReLU）层，作为激活层。残差块进一步提取的深层特征与第一个卷积层得到的浅层特征融合，得到具有丰富空间和语义信息的特征。然后，使用M个子像素卷积层来增加特征的大小，使之与HR图像相同。由于每个子像素卷积层可以通过像素洗牌操作将输入特征的大小放大两倍，所以M的值可以通过M &#x3D; log2N来计算。最后，生成器通过一个全卷积层产生SR图像。</p><p>判别器继承了VGG-19的结构，包含八个卷积层，其中使用了BN层和泄漏ReLU函数。两个全连接层和一个sigmoid函数用于输出输入图像的分布，这是一个二分类任务。由于判别器的目标是区分SR图像和HR图像，所以通过对抗训练可以促使生成器生成更接近原始HR图像的SR样本。</p><blockquote><p>这段内容是介绍了SR模块的生成器和判别器的网络结构，它们分别负责从LR图像生成SR图像和从SR图像和HR图像中进行真假判断。生成器使用了卷积层、残差块和子像素卷积层来提取和放大特征，判别器使用了VGG-19的结构来进行分类。通过对抗训练，生成器和判别器可以相互促进，使得生成的SR图像更加逼真。.</p></blockquote><h3 id="C-CD-模块"><a href="#C-CD-模块" class="headerlink" title="C CD 模块"></a>C CD 模块</h3><p>SR模块的目的是产生与HR图像相似的SR图像，而CD模块的任务是基于SR图像和另一个时刻的HR图像生成精确的变化图。SRCDNet中的CD模块采用度量学习的方法，基于特征提取器的特征来获得变化图。</p><p>我们使用一个预训练的ResNet-18作为特征提取器，去掉了最后的全连接层，将其扩展为一个孪生结构，以接收双时相的输入。一个步长为一的7×7卷积层用于提取具有丰富空间信息的浅层特征，后面跟着一个BN层和ReLU函数，然后使用一个步长为二的最大池化层。然后，使用四个残差块来充分利用图像中的信息。每个残差块的输出特征的大小分别是输入图像的1&#x2F;2、1&#x2F;4、1&#x2F;8和1&#x2F;8，通道数分别是64、128、256和512。</p><p>为了充分捕获多尺度特征中的有效信息，我们在特征提取器中集成了一个SAM和五个CBAM。具体来说，四个CBAM块分别应用于每个残差块的输出特征，以强调有用的信息；这些特征然后统一调整为原始图像大小的一半，并融合成具有多尺度信息的特征。然后，第五个CBAM块被应用，以使后续检测的特征对更加可区分。</p><p>每个CBAM块包含两部分：一个通道注意力模块，用于捕获通道间的关系，和一个空间注意力模块，用于探索空间间的上下文信息。给定一个大小为<strong>C x H x W的特征F</strong>，在通道注意力模块中，首先分别对输入特征应用一个平均池化层和一个最大池化层，以得到两个大小为C × 1 x 1的向量，然后使用一个包含两个1 × 1卷积层的共享权重的多层感知器（MLP）模块，来学习并给每个通道赋予权重。最后，将两个因子相加得到一个，然后应用一个sigmoid函数$$\sigma $$，得到通道<strong>注意力图因子</strong>，可以表示为<br>$$<br>M_c(F)&#x3D;\sigma(MLP(Avg(F))+MLP(Max(F)))<br>$$<br>经过通道注意力模块的加权后，得到的<strong>通道精化特征</strong>F’是$$M_c(F)$$和F的乘积，可以表示为<br>$$<br>F’ &#x3D; M_c(F) \otimes  F<br>$$<br>然后，空间注意力模块会作用于大小为<strong>C x H x W的特征F</strong>‘，它与F的大小相同。这里，一个平均池化层和一个最大池化层被用来将F’压缩成两个大小为1 x H x W的矩阵，然后将它们堆叠成一个，并输入到一个3 x 3的卷积层。最后，通过一个sigmoid函数，得<strong>到空间精化矩阵</strong>，可以表示为<br>$$<br>M_s(F’)&#x3D;\sigma(f^{3*3})(Avg(F’);Max(F’))<br>$$<br>因此，<strong>CBAM精化特征</strong>可以通过以下公式得到：<br>$$<br>F’’ &#x3D; M_s(F’)\otimes F’<br>$$<br>由于CBAM不改变输入特征的大小，所以第五个CBAM的输出特征对保持了原始图像一半的大小，之间用欧氏距离来衡量它们的相似度。距离图需要插值到原始图像的相同大小，然后用对比损失作为度量来衡量距离图和真值之间的差异。之后，通过度量的优化，真值上变化区域的距离增加，而不变区域的距离减少。换句话说，我们可以通过度量学习得到距离图，使得变化区域和不变区域之间的值差异尽可能大。因此，我们可以通过阈值分割从距离图中得到更精确的变化图。</p><h3 id="D部分损失函数"><a href="#D部分损失函数" class="headerlink" title="D部分损失函数"></a>D部分损失函数</h3><p>我们的网络中有三个子模型需要优化：SR模块中的判别器,生成器和CD网络。每个子模型的目标如下所述。<br>1)判别器：在接收到$$I_{T2}^{HR}$$和$$I_{T1}^{SR}$$作为输入后，判别器输出输入图像为$$I_{T2}^{HR}$$的概率。为了提高判别器准确区分$$I_{T2}^{HR}$$和$$I_{T1}^{SR}$$的能力，判别器的损失函数设计如下：<br>$$<br>Loss_D &#x3D; 1 - D(I_{T2}^{SR}) + D(G(I_{T2}^{LR}))<br>$$<br>根据公式，判别器在对抗训练后对高分辨率图像输出接近1的概率，对超分辨率图像输出接近0的概率</p><p>2)变化网络：然后，$$I_{T2}^{SR}$$和$$I_{T1}^{HR}$$一起输入到CDNet中，其中用连体特征提取器提取双时相输入的多尺度特征。基于经过CBAM块增强的特征对，计算特征对之间的欧氏距离图，然后根据这个距离图，用阈值分割生成最终的变化图。因此，CDNet的目标是根据真值图，尽可能地拉开距离图上“变化”区域和“不变”区域的对应值。因此，用一个批量对比损失来帮助最小化距离图上“不变”区域之间的距离，最大化“变化”区域之间的距离，可以表示为：<br>$$<br>Loss_{CD} &#x3D; \sum_{i,j&#x3D;0}^{M}\frac{1}{2}[(1-gt_{i,j})dt_{i,j}^2+gt_{i,j}max(dt_{i,j}-m^2)]<br>$$</p><p>其中M表示dt的大小；dt(i,j)和gt(i,j)分别表示距离图和真值图在点(i,j)处的值，其中i,j∈[0,M)；m是用来过滤掉超过阈值的像素的边界，实验中设为2。</p><p>3)生成器：生成器的损失由以下几部分组成：图像损失、内容损失、对抗损失和变化损失。图像损失通过计算$$I_{T2}^{SR}$$和$$I_{T2}^{HR}$$之间的均方误差（MSE）来衡量它们在像素空间上的对齐程度。图像损失可以表示为<br>$$<br>l_{MSE} &#x3D; \sum_{i,j&#x3D;0}^{M}({I_{T2}^{HR}}<em>{i,j}-G(I</em>{T2}^{LR})<em>{i,j})<br>$$<br>由于像素对齐很难在图像中保留详细信息，因此内容丢失更多地关注感知相似性。具体地说，内容损失计算通过预训练的VGG-19网络获得的$$I</em>{T2}^{SR}$$和$$I_{T2}^{HR}$$的某些特征图之间的MSE，以产生视觉上更逼真的SR图像。内容损失的公式为</p><p>$$<br>l_{MSE}^{VGG} &#x3D; \sum_{i,j&#x3D;0}^{M}(\phi <em>{VGG}(I</em>{T2}^{HR})<em>{i,j}-\phi <em>{VGG}(G(I</em>{T2}^{LR})</em>{i,j}))<br>$$<br>虽然鉴别器设计用于区分$$I_{T2}^{SR}$$和$$I_{T2}^{HR}$$，但生成器旨在通过对抗性损失增加鉴别器误判的概率，其定义如下：<br>$$<br>l_D &#x3D; 1 - D(G(I_{T2}^{LR}))<br>$$<br>为了使SR图像在像素和感知上与原始HR图像相似，并同时改进CD结果，CDNet中使用的批量对比损失也被添加到生成器的损失中。总之，优化器的优化目标是:<br>$$<br>Loss_G &#x3D; l_{MSE}+al^{VGG}<em>{MSE}+bl_D+rLoss</em>{CD}<br>$$<br>其中a，b，r不同损失的平衡因子</p><p><img src="https://s2.loli.net/2023/11/17/Dqc2Fh6C78ngSNx.png" alt="image-20231117163410757"></p><blockquote><p>这段内容是介绍了CD模块的网络结构，它是基于特征提取器和度量学习的方法来实现变化检测的。特征提取器使用了一个预训练的ResNet-18，通过一个孪生结构来处理双时相的输入，提取出深层的特征。度量学习的方法是根据特征之间的距离来判断是否发生了变化，从而生成变化图。</p><p>这段内容是介绍了CD模块中特征提取器的结构，它使用了一个SAM和五个CBAM来增强多尺度特征的信息。SAM是一个空间注意力模块，用于提取空间上的变化信息。CBAM是一个通道和空间注意力模块，用于分别提取通道和空间上的有用信息。特征提取器使用了一个预训练的ResNet-18，通过一个孪生结构来处理双时相的输入，提取出深层的特征。然后，通过CBAM和SAM来对特征进行融合和加权，使得特征更加适合后续</p><p>这段内容是介绍了CBAM块的具体计算过程，它包括通道注意力模块和空间注意力模块两个部分。通道注意力模块通过平均池化和最大池化来提取通道间的关系，然后通过一个共享权重的MLP模块来给每个通道赋予权重，最后通过一个sigmoid函数来得到通道注意力图因子。空间注意力模块通过平均池化和最大池化来提取空间间的信息，然后通过一个3 x 3的卷积层来得到空间注意力图因子。最后，通过两个注意力图因子的乘积，得到CBAM精化特征，用于后续的变化检测。</p><p>这段内容是关于一种基于CBAM的变化检测方法，它利用欧氏距离和对比损失来度量特征对的相似度，并通过度量学习和阈值分割来生成变化图。</p></blockquote><h2 id="IV实验的设置"><a href="#IV实验的设置" class="headerlink" title="IV实验的设置"></a>IV实验的设置</h2><h3 id="A-数据集"><a href="#A-数据集" class="headerlink" title="A. 数据集"></a>A. 数据集</h3><p>我们的实验使用了三个变化检测数据集（CDDs），它们的概况如下。</p><p>建筑变化检测数据集（BCDD）：BCDD [29] 提供了 0.2m对 的图像，大小为 32507 x 15354，以及它们之间的建筑变化的真值。由于双时相图像是在地震发生前后选取的，所以这些区域包含了各种建筑变化，包括建筑重建和更新。为了方便模型的训练和测试，我们将图像裁剪成 7434 个大小为 256 x 256 的无重叠的块，然后按照 8:1:1 的比例随机划分为训练集、验证集和测试集。为了避免过拟合，我们对训练集中的图像进行了旋转，以增加数据的多样性。<br>变化检测数据集（CDD）：CDD [30] 包含了 16000 对真实的季节变化的 Google Earth 图像对，大小为 256 x 256，其中包括 10000 个训练样本、3000 个验证样本和 3000 个测试样本。CDD 的空间分辨率非常高，为 3-100 cm，它不仅提供了常见物体（如建筑、道路和森林）的变化信息，还提供了许多细节物体（如汽车和坦克）的变化信息。虽然 BCDD 和 CDD 都是具有相同分辨率的双时相图像的变化检测数据集，但是对于不同分辨率的变化检测实验，还需要进一步的处理。因此，我们对 BCDD 和 CDD 中的 T2 图像进行了 N(N &#x3D; 4, 8) 倍的双三次下采样，以获得相应的低分辨率图像，用于后续的实验。BCDD 和 CDD 中不同分辨率的样本示例如图 2 所示。</p><p>Google DataSet:，它是由中国广州的 Google Earth 图像构建的，19对图像，大小为 0.55m，大小从 1006 x 1168 像素到 4936 x 5224 像素不等。所有的图像都是在 2006 年到 2019 年之间收集的，当时广州正处于快速发展的时期。因此，这个数据集提供了各种形状和大小的建筑变化。在我们的实验中，对于数据集中 T2 时刻的 19 张图像，我们从 Google Earth 上获取了相同日期的分辨率为 2.2-m 的对应图像，从而构建了一个具有 4 倍分辨率差异的真实图像数据集。然后，这个真实图像数据集被切分成 1118 对无重叠的样本对，并按照 6:2:2 的比例划分为训练集、验证集和测试集。训练集通过随机旋转和翻转进行了进一步的增强。重构的真实图像数据集中不同分辨率的样本示例如图 2 所示。</p><p><img src="https://s2.loli.net/2023/11/17/wmMVYvK8PrRNOys.png" alt="image-20231117165103373"></p><p><img src="https://s2.loli.net/2023/11/17/oEvuScmiCaljnIs.png" alt="image-20231117165128193"></p><h3 id="B-实验设计"><a href="#B-实验设计" class="headerlink" title="B 实验设计"></a>B 实验设计</h3><p>为了充分验证所提出的 SRCDNet 的有效性，我们设计了三组实验。<br>I) 消融实验：首先在 BCDD 和 CDD 上进行了消融实验，以测试 SRCDNet 中不同模块的有效性。由于所提出的 SRCDNet 旨在解决双时相图像在变化检测中的分辨率差异问题，因此这部分的实验涉及到四倍分辨率差异（X4）和八倍分辨率差异（X8）的情况。<br>\2) 对比实验：然后与其他变化检测方法进行了对比实验，以检验 SRCDNet 的优越性。由于 SRCDNet 也可以转化为一个普通的变化检测模型，除了 X4 和 X8 的实验外，还涉及到了没有分辨率差异（X1）的初始图像的实验，以检查模型的灵活性。<br>\3) 真实图像实验：为了进一步探究 SRCDNet 在真实图像上的效用，我们在具有四倍分辨率差异的 Google 数据集上进行了真实图像实验。此外，我们还将在 BCDD 和 CDD 上训练的模型迁移到 Google 数据集上，以探索现有的大规模变化检测数据集在真实图像上的应用潜力。</p><h3 id="C-Baselines"><a href="#C-Baselines" class="headerlink" title="C Baselines"></a>C Baselines</h3><p>为了验证所提出的 SRCDNet，我们引入了五种最先进的变化检测方法作为对比。每种方法的简要描述如下。</p><ol><li>全卷积-早期融合（FC-EF）[30]：基于 U-Net 结构，FC-EF 网络通过将双时相图像作为多光谱输入进行融合来检测变化。跳跃连接用于将编码器的特征传递到解码器，以恢复每一层的空间信息。</li><li>全卷积-孪生差异（FC-Siam-Diff）[30]：FC-EF 的一个变体，FC-Siam-Diff 网络将编码器扩展为一个孪生结构，以接收双时相输入并分别提取它们的特征。在差分操作之后，孪生编码器中同一层的特征通过跳跃连接传递到解码器。</li><li>全卷积-孪生连接（FC-Siam-Conc）[14]：FC-Siam-Conc 也采用了与 FC-Siam-Diff 相同的孪生编码器，但是在将孪生编码器中同一层的特征传递到解码器之前，先进行连接，而不是使用差分操作。</li><li>BiDateNet [14]：BiDateNet 将 LSTM 块集成到具有 U-Net 结构的全卷积网络的跳跃连接中，以学习双时相图像之间的时间依赖性，从而帮助检测变化。</li><li>空间-时间注意力网络（STANet）[16]：STANet 是一种基于度量学习的变化检测网络，它提供了一个空间-时间注意力模块，以进一步利用特征中的空间信息和时间关系。<br>需要注意的是，上述所有的基准方法都要求双时相输入具有相同的分辨率，因此在 X4 和 X8 的实验中，低分辨率图像会被双三次插值到原始图像的大小，以便作为对比方法的输入。</li></ol><h3 id="D-implementations"><a href="#D-implementations" class="headerlink" title="D implementations"></a>D implementations</h3><p>我们使用 PyTorch 库实现了 SRCDNet。对于总共 100 个训练周期，我们使用了一个初始率为 0.0001 的 Adam 优化器来促进模型的收敛。训练过程中采用了八个批次的大小。BN 和 Dropout 层都被采用来避免过拟合。生成器的损失函数中的 a, b和 r 分别被设置为 0.006、0.001 和 0.001。在训练过程中，每个周期都会计算最新模型在验证集上的准确率，以便及时保存最佳模型。此外，当验证集上的准确率在 50 个周期内不增加时，采用提前停止的策略。所有的基准方法都在 GeForce RTX 2080ti 显卡上运行，以提高训练效率。</p><p>我们采用了四个常用的指标来衡量不同方法的变化检测性能：精确度、召回率、F1-分数和 IoU。假设 TP、FP、TN 和 FN 分别表示真正例、假正例、真负例和假负例，那么精确度和召回率可以定义如下<br>$$<br>precision &#x3D; \frac{TP}{TP+FP}<br>$$</p><p>$$<br>recall &#x3D; \frac{TP}{TP+FN}<br>$$</p><p>根据公式，精确度表示假警率，而召回率表示漏警率，两者之间存在着权衡。因此，为了获得更全面的评估，F1 分数将精确度和召回率结合起来，可以表示为如下公式：<br>$$<br>F1 &#x3D; \frac{2precision * recall}{precision + recall}<br>$$<br>IoU 表示检测结果和真值之间的交集和并集比率，可以直观地表示为<br>$$<br>IoU &#x3D; \frac{TP}{FP+TP+FN}<br>$$<br>此外，峰值信噪比（PSNR）和结构相似性（SSIM）被用作衡量通过双三次插值和超分辨率恢复的图像质量的指标。PSNR 是最广泛使用的衡量图像质量的指标，它是基于均方误差（MSE）来计算的。给定一个灰度图像 X 和参考图像 Y，X 和 Y 之间的 MSE 可以表示为<br>$$<br>MSE &#x3D; \frac{1}{hw}\sum_{i&#x3D;0}^{h-1}\sum_{j&#x3D;0}^{w-1}[X(i,j)-Y(i,j)]^2<br>$$<br>其中 h 和 w 分别是 X 和 Y 的高度和宽度。<br>然后，图像 X 的 PSNR 可以通过以下公式计算：<br>$$<br>PSNR &#x3D; 10 * log10(\frac{MAX(X)^2}{MSE})<br>$$<br>其中 MAX(X) 表示 X 中的最大值。PSNR 的值越大，X 越接近 Y。在我们的实验中，RGB 图像需要转换为灰度图像，以便计算 PSNR。</p><p>从上述公式可以看出，PSNR 只关注 X 和 Y 在像素值上的接近程度，忽略了图像的视觉效果。为了弥补这个缺陷，SSIM 通常被用作辅助，它考虑了亮度（&#x2F;）、对比度（c）和结构（s）三个组成部分。这三个组成部分可以计算为<br>$$<br>l(X,Y) &#x3D; \frac{2\mu x\mu y + c_1}{\mu x^2 + \mu y ^2 +c_1}<br>$$</p><p>$$<br>c(X,Y) &#x3D; \frac{2\sigma x\sigma y + c_2}{\sigma x^2+\sigma y^2+c_2}<br>$$</p><p>$$<br>s(X,Y) &#x3D; \frac{2 \sigma xy + c_2}{2\sigma x \sigma y + c_2}<br>$$</p><p>其中 $$\mu$$ 和 $$\sigma$$ 分别是均值和方差的操作，c 和 c2 是为了避免除以零而设置的常数。<br>然后，X 和 Y 之间的 SSIM 可以表示为<br>$$<br>SSIM(X,Y)&#x3D;l(X,Y)*c(X,Y)*s(X,Y)<br> &#x3D; \frac{(2\mu x \mu y + C_1)(2\sigma _{XY} + C_2)}{(\mu ^ 2x + \mu ^ 2y + c_1)(\sigma ^ 2 + \sigma^2+c_2)}<br>$$<br>SSIM 的范围是 [0, 1]，SSIM 的值越大，X 越接近 Y。</p><h2 id="V-结果和分析"><a href="#V-结果和分析" class="headerlink" title="V 结果和分析"></a>V 结果和分析</h2><h3 id="A-消融实验"><a href="#A-消融实验" class="headerlink" title="A. 消融实验"></a>A. 消融实验</h3><p>为了验证SAM和SRM的有效性，我们首先在BCDD和CDD上对两种分辨率差异（X4和X8）进行了SRCDNet的消融实验。没有SAM和SRM的SRCDNet被设为基础模型。然后，将SAM添加到基础模型作为第二个基线，将SRM添加到基础模型作为第三个基线。使用LR图像的双三次插值图像作为输入，因为前两个基线不包含SRM。</p><p>X4图像的消融实验：如表I所示，基础模型在两个数据集上都表现最差，BCDD上的F1值最低为77.53%，CDD上的F1值最低为86.56%。通过集成SAM，BCDD上的F1值显著提高到84.07%，CDD上的F1值也提高到88.77%。值得注意的是，与基础模型相比，第二个基线的精确率大大提高，这表明SAM可以帮助更准确地提取变化。与基础模型相比，包含SRM的第三个基线也获得了更好的检测结果，BCDD上的F1值为79.81%，CDD上的F1值为87.53%。因此，将SAM和SRM都集成到基础模型中的SRCDNet，在两个数据集上都优于所有基线，BCDD上的F1值最高为85.66%，CDD上的F1值最高为90.02%。</p><p>如图4所示，基础模型在两个数据集上的表现都很差。更具体地说，BCDD中的建筑变化有明显的溢出效应，而CDD中对应的变化则大量缺失。第二个基线可以解决上述问题，并且由于SAM的存在，大大提高了检测的准确性。通过集成SRM来生成细粒度的SR图像进行CD，第三个基线的结果具有更精确的变化边界。然而，这还不够准确，因为基础模型的检测性能较差。因此，通过结合SAM和SRM的优势，SRCDNet可以在两个数据集上获得最精确的变化图，基于输出的SR图像。</p><p>\2) X8图像的消融实验：在BCDD上对8x LR图像进行的消融实验与对4x LR图像进行的消融实验具有相同的趋势。基础模型只能获得72.26%的F1值，而集成SAM的模型能够将F1值提高到77.22%，集成SRM的模型能够将F1值提高到75.17%。SRCDNet远远超过了上述基线，F1值为81.69%，IoU为69.05%，这充分证明了结合SAM和SRM的可行性。</p><p>基础模型在CDD上的表现是所有基线中最差的，F1值为77.99%。虽然在之前的实验中，集成SAM比集成SRM更有效，但在CDD上对8x LR图像进行的实验中，却出现了相反的效果。具体来说，集成SAM的第二个基线的F1值提高到79.91%，而由于添加了SRM，集成SRM的第三个基线的F1值提高到80.59%。这可能是因为SRM可以通过有效地恢复图像信息，增强对CDD中图像中小变化的提取。尽管如此，SRCDNet仍然具有最高的F1值，为83.24%，比其他基线都要高得多。</p><p>根据图5，与基于双三次图像的基础模型和基础+SAM模型相比，基础+SRM模型和SRCDNet由于集成了SRM，可以更好地捕捉BCDD上的建筑边界。此外，它们还可以由于SR图像具有更多的细节信息，显著减轻漏报的情况。由于CDD中小物体的信息很难从双三次图像中恢复，基础模型和基础+SAM模型在CDD上得到的变化结果也存在许多漏报。虽然恢复8x LR图像是困难的，但在SRM的帮助下，基础+SRM模型和SRCDNet可以得到更全面的变化结果。</p><p>3)不同恢复图像的比较：根据上述的消融实验，有两种不同的方法，双三次插值和SR，可以用来从LR图像中恢复细节信息。虽然Base+SRM模型和SRCDNet都采用了SRM来从LR图像生成SR图像，但对于每组实验，都有三组恢复图像用于CD。因此，我们使用两个常用的指标，即PSNR和SSIM，来定量地比较不同恢复图像的效果，并进一步了解SRCDNet中不同模块的作用。<br>从表II可以看出，双三次图像在每个比较实验中都获得了最低的PSNR和SSIM。此外，使用Base+SRM模型得到的SR图像的指标有一定程度的提高，这说明SRM可以产生比双三次插值更高质量的恢复图像。使用SRCDNet得到的SR图像在所有实验中都达到了最高的PSNR和SSIM，比使用Base+SRM模型得到的SR图像的指标略高。这进一步证明了前面提到的，SAM和SRM的结合对CD有积极的影响。<br>另一个值得注意的现象是，在X4图像的实验中，集成SRM导致了PSNR和SSIM的更大提高。因此，与X8实验相比，通过SRM可以恢复更多的图像信息。这表明，分辨率差异越大，图像信息的损失越大，这给图像恢复带来了很大的困难。</p><p><img src="https://s2.loli.net/2023/11/17/w2lRog5kxQXZ1CE.png" alt="image-20231117175630107"></p><p><img src="https://s2.loli.net/2023/11/17/DC84V9mF3BgrsKd.png" alt="image-20231117175827735"></p><p><img src="https://s2.loli.net/2023/11/17/2TqSIUxoHpcPCti.png" alt="image-20231117175846488"></p><p><img src="https://s2.loli.net/2023/11/17/eLcPo2tzq9sMfiv.png" alt="image-20231117180008533"></p><h3 id="B-比较实验"><a href="#B-比较实验" class="headerlink" title="B. 比较实验"></a>B. 比较实验</h3><p>在X1图像上的性能：如表III所示，我们提出的方法在BCDD数据集上优于所有的基准方法，具有最高的召回率、F1和IoU，分别为90.13%、87.40%和77.63%，以及非常高的精确度84.84%。STANet排名第二，其F1和IoU分别为84.96%和73.86%，分别比我们的方法低2.44%和3.77%。BiDateNet在基于U-Net的方法中取得了最好的结果，其F1和IoU分别为83.55%和71.75%，从而证明了RNNs增强双时相图像中时间关系的可行性。FC-Siam-diff在三种FCN变体中表现最好，其次是FC-Siam-conc和FC-EF。<br>在CDD数据集上，我们提出的方法和STANet再次取得了最好的性能，这进一步证明了基于度量学习的方法相比传统的基于分类的方法的优越性。虽然我们提出的方法达到了最高的F1和IoU，分别为92.94%和86.81%，STANet则获得了相对较低的F1和IoU，分别为91.44%和84.23%，这表明了SAM的有效性。排名第三的BiDataNet具有最高的精确度95.98%。与BCDD数据集上的结果相反，FC-Siam-conc比FC-Siam-diff表现更好，其F1和IoU分别提高了2.97%和4.44%。这可能归因于CDD数据集包含了各种细粒度的对象，通过跳跃连接中双时相特征的差分操作过滤掉了许多有用的信息，而连接则可以更好地保存特征中的这些信息。上述结果通过可视化比较进一步验证，如图6所示，我们提出的方法获得了最佳的可视化性能。所有的方法都可以准确地提取BCDD数据集中新建的建筑物。此外，FC-EF和FC-Siam-diff存在许多漏报，这与两种方法的低召回率相对应，如表I所示。与其他方法相比，我们提出的方法能够捕捉更精确的建筑物轮廓，这对于实际应用具有重要意义。<strong>值得注意的是，我们的方法是唯一一个能够检测到建筑物减少的方法，如图6的第二行所示。</strong><br>至于CDD数据集，只有对应于大面积的变化才能被三种FCN变体提取出来，这解释了它们的高精度和低召回率，如表I所示。受益于LSTM块的集成，BiDateNet比其他基于U-Net的方法更擅长提取小的变化。两种基于度量学习的方法都擅长捕捉小的变化，包括汽车和道路。STANet可以提取最多的小变化，但结果显示出溢出效应，导致其高召回率但低精度，如表I所示。从可视化结果来看，<strong>我们提出的方法不仅可以精确地提取小的变化，而且还可以更好地保持它们的边界和形状。</strong><br>在X4图像上的性能：如表III所示，当双时相图像之间存在4x的分辨率差异时，与X1图像的实验相比，所有方法在BCDD数据集上的F1和IoU都略有下降。更具体地说，SRCDNet在BCDD数据集上获得了最高的F1和IoU，分别为85.66%和74.91%，分别比X1实验中获得的结果低1.74%和2.72%。虽然STANet在X1实验中优于BiDateNet，但它们在X4实验中获得了相似的结果，其F1分数分别为81.96%和81.97%，这表明STANet更受分辨率差异的影响。在三种FCN变体中，FC-Siam-diff表现最好，其次是FC-Siam-conc，最后是FC-EF，这与X1实验的结果一致。<br>所有基线方法在CDD数据集上的准确度都下降得更明显。FC-Siam-conc具有最差的检测结果，其F1为73.67%，比X1实验低12.23%。FC-Siam-diff的F1略高，为76.15%。值得注意的是，FC-EF在三种FCN变体中获得了最高的F1，为76.58%，仅比X1实验低2.07%。BiDateNet和STANet的F1值非常接近，分别为86.28%和86.49%，分别比X1实验低3.73%和4.95%。在这种情况下，SRCDNET仍然获得了非常高的F1和IoU，分别为90.02%和81.86%，其F1只降低了2.92%。</p><p>这些方法的可视化比较如图7所示。从4x双三次插值图像中，BCDD数据集中的大多数建筑物变化都可以相对完整地检测出来，这表明由于建筑物的尺寸较大，4x的分辨率差异可以在一定程度上通过双三次插值来缓解。这也解释了为什么在X4图像的实验中的准确度只比X1图像的实验略有下降。然而，与SRCDNet得到的结果相比，基于比较方法得到的建筑物变化的边界不够规则和平滑。这可以归因于SRCDNet生成的SR图像可以比双三次插值图像更好地恢复建筑物的边界信息。此外，虽然一些与建筑物相邻的裸地容易被提取为建筑物变化的一部分，但SRCDNet可以有效地减少这些伪变化，如图7的第三行所示。<br>与BCDD数据集相比，CDD数据集具有更高的空间分辨率，因此包含了更多的细节变化，这些变化很难在4x双三次插值图像中重建；因此，与X1图像的实验相比，比较方法的准确度显著下降。虽然一些细节变化，如小巷和汽车，在比较方法的结果中很少见到，但SRCDNet是唯一能够检测到这些变化的方法，这进一步证明了SR模块在恢复空间和语义信息方面的有效性。除了提取更小的变化，SRCDNet在提取大面积变化，如土地变化和建筑物变化方面也表现出更好的性能。因此，定量和可视化的比较充分证明了SRCDNet在两个数据集的4x LR图像上的有效性。<br>\3) 在X8图像上的性能：X8实验比较了所有基线方法在8x LR图像上的性能，如表III所示。在BCDD数据集上，与X4实验相比，所有方法的准确度都进一步降低。FC-Siam-conc具有最高的准确度降低，其F1最低，为69.01%，其次是BiDateNet，其F1为70.01%。FC-EF的F1从76.69%降低到73.49%，它受分辨率差异的影响最小。FC-Siam-diff在基于U-Net的模型中获得了最高的F1准确度，为77.21%。STANet获得了77.31%的F1和69.05%的IoU。尽管分辨率差异很大，SRCDNet仍然优于所有的比较方法，获得了最高的F1为81.69%和IoU为69.05%。<br>从LR图像中恢复许多小物体是很困难的，因此，在CDD数据集上获得的准确度低于在BCDD数据集上获得的准确度。更具体地说，SRCDNet达到了最高的检测率，其F1为83.32%和IoU为71.40%，分别比X4实验中获得的结果低6.70%和10.46%。此外，BiDateNet的F1从86.28%降低到78.29%，而STANet的F1从86.49%降低到77.29%。由于三种FCN变体提取小变化的能力较差，在X8图像的实验中，这三种方法的准确度没有大幅降低。<br>X8图像的实验的可视化结果如图8所示。考虑到图8中第1-3行的BCDD数据集上的结果，可以看出，由于分辨率差异很大，很难基于双三次插值图像获得规则的建筑物边界。此外，还有很多漏报，即许多体积较小的房屋被漏掉。然而，SRCDNet可以更好地解决上述问题，生成更精确的变化结果。可以看出，尽管存在8x的分辨率差异，但由于有足够的先验知识，SR图像仍然可以很好地恢复建筑物的信息。<br>在CDD数据集上也发生了许多漏报，这与所有方法的低召回率相一致，如表I所示。这是因为通过双三次插值很难完全恢复初始HR图像中的信息，这些信息在8x下采样后被大大减少。因此，不仅小的变化，如小巷和汽车，而且一些建筑物变化也被漏掉或不完全检测出来。值得注意的是，与双三次插值图像相比，SRCDNet输出的SR图像更好地从8x LR图像中恢复了信息，这对后续的CD有很大的帮助，导致更完整和准确的变化结果。</p><h3 id="C-在Google数据集上的真实图像实验"><a href="#C-在Google数据集上的真实图像实验" class="headerlink" title="C. 在Google数据集上的真实图像实验"></a>C. 在Google数据集上的真实图像实验</h3><p>在前两节中，我们在两个模拟数据集BCDD和CDD上进行了充分的消融研究和比较实验，验证了SRCDNet在解决CD中分辨率差异问题方面的有效性。接下来，我们将在Google数据集上进行比较实验，进一步测试模型在真实图像上的效果。此外，为了探索大数据集的应用潜力，我们还通过采用在BCDD和CDD上预训练的模型来应用于Google数据集，进行了迁移学习实验。</p><ol><li><p>性能分析：所有的基线方法首先在Google数据集上从头开始训练，其中SRCDNet仍然取得了最好的准确度，其F1为77.13%，IoU为62.77%，表明该模型在具有4倍分辨率差异的真实图像上也有很好的效果。STANet和BiDateNet分别获得了75.27%和74.79%的F1，明显优于其他三种基于U-Net的模型，反映了注意力机制模型的增益效果。<br>图9展示了不同大小的建筑物的CD结果。可以看到，基于U-Net的模型的结果中存在许多伪变化，这可以归因于一些包括道路在内的不透水表面的变化很容易被误分类为建筑物。由于具有更好的判别能力，STANet和SRCDNet可以获得更准确的结果。此外，与双三次插值恢复的图像相比，SRCDNet恢复的图像可以更好地恢复建筑物的轮廓，从而进一步保证了建筑物CD的准确性。</p></li><li><p>迁移学习分析：近年来，基于高分辨率遥感图像的CDD被提出用于测试CD算法，许多先进的算法在这些数据集上取得了良好的结果。然而，由于不同数据之间的域转移，一个在一个数据集上训练的模型有时很难直接应用于真实图像。目前，解决这个问题的主流方法之一是迁移学习。因此，这部分也设计了迁移学习实验，旨在探索将大数据集应用于真实图像的潜力。每个基线方法都会通过加载在BCDD和CDD上训练得到的最佳模型作为起点，在重建的具有4x分辨率差异的Google数据集上进行微调。<br>根据表IV，与从头开始训练相比，每个基线方法的准确度都通过微调得到了提高。对于FC-EF，FC-Siam-diff和FC-Siam-conc，BCDD上的预训练模型比CDD上的预训练模型具有稍好的增益效果。可能的原因在于，BCDD和Google数据集都关注建筑物变化，并且具有相似的高层特征，因此为上述结构相对简单的模型提供了更直接的增强。而对于BiDateNet，STANet和SRCDNet，情况则相反。这可能是由于CDD的数量更大，可以提供更多有利于这些复杂模型中注意力机制模块训练的多样化特征。总之，迁移学习实验表明，大数据集上的预训练模型可以改善真实图像上的CD结果。此外，与其他基线方法相比，BCDD和CDD上的预训练模型对SRCDNet具有最大的增益效果，其F1分别提高了2.49%和3.07%。</p></li></ol><h2 id="VI-讨论"><a href="#VI-讨论" class="headerlink" title="VI. 讨论"></a>VI. 讨论</h2><p>在本节中，我们对SRCDNet进行了进一步的实验和讨论：首先，使用不同的下采样策略得到的LR图像作为模型的输入，来测试模型对不同输入图像的鲁棒性；然后，设置比较实验来检验损失函数的敏感性。<br>A. 不同下采样策略的比较<br>如前所述，在比较实验中，BCDD和CDD中的第二阶段图像被双三次插值下采样，以获得模拟的LR图像。然而，在实际中，可用的图像可能更复杂。因此，为了验证模型对不同输入的鲁棒性，采用了不同的下采样策略，包括最近邻和双线性，来获得BCDD的两组更多的X4和X8图像进行比较。<br>表V中的结果显示，使用不同的下采样策略得到的准确度差异不显著，这表明SRCDNet对不同的输入具有良好的鲁棒性。对于X4图像的实验，“双三次”输入获得了最高的准确度，而对于X8图像的实验，“双线性”输入表现最好。“最近邻”输入在X4和X8图像的实验中都获得了最低的准确度。原因可能是最近邻下采样得到的LR图像包含更多的噪声，如图10所示。此外，SRCDNet可以为所有三种不同的输入生成具有良好视觉效果的恢复图像，这进一步验证了模型的良好鲁棒性。<br>B. 损失函数的敏感性实验<br>在训练SRCDNet的过程中，损失函数中的一个值2在平衡生成器优化的CD结果的收益方面起着至关重要的作用。因此，我们在BCDD上进行了敏感性实验，通过设置一组以0.25 x 10为步长的数字来探索损失函数的敏感性。结果如表VI所示。<br>BCDD数据集上的结果表明，不同的r值对变化结果有很大的影响，换句话说，损失函数对r值是敏感的。更具体地说，当r从0.25 x 10-3增加到1 x 10-3时，CD结果的准确度逐渐增加，而当r&#x3D;1 × 10-3时，获得了最佳的准确度。当r&gt;1 × 10-3时，准确度开始波动。基于上述结果，建议在应用时选择一个接近1 × 10-3的r值。</p><h2 id="VII-结论"><a href="#VII-结论" class="headerlink" title="VII. 结论"></a>VII. 结论</h2><p>我们提出了一个端到端的SRCDNet，用于具有不同分辨率的双时相图像。为了克服双时相图像之间的分辨率差异，我们采用了一个由生成器和判别器组成的SRM，用于将低分辨率图像恢复到高分辨率图像的大小，这在从低分辨率图像生成逼真的超分辨率图像方面已被证明是有效的。一个连体特征提取器从两个输入图像中提取多尺度特征：一个超分辨率图像和一个与不同时间戳对应的高分辨率图像，然后在这些特征上应用一个SAM，以捕获更多有用的通道和空间信息。SRCDNet采用深度度量学习来学习最终的变化图。消融实验验证了SRM和SAM在SRCDNet中的有效性。然后在BCDD和CDD上进行了比较实验，其中SRCDNet不仅在相同分辨率的图像上获得了最好的结果，而且在4倍和8倍不同分辨率的图像上也优于其他比较方法，这充分证明了SRCDNet在多分辨率CD方面具有一般性和实用性的能力。在具有4倍分辨率差异的Google数据集上进行的真实图像实验进一步验证了SRCDNet在真实图像上的有效性。在未来，我们寻求探索其他不同分辨率CD的方法，并促进深度学习在CD应用中的发展。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 遥感 </tag>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Minecraft源码-04-铁砧代码</title>
      <link href="/2023/11/15/Minecraft%E6%BA%90%E7%A0%81-04-%E9%93%81%E7%A0%A7%E4%BB%A3%E7%A0%81/"/>
      <url>/2023/11/15/Minecraft%E6%BA%90%E7%A0%81-04-%E9%93%81%E7%A0%A7%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="AnvilBlock类"><a href="#AnvilBlock类" class="headerlink" title="AnvilBlock类"></a>AnvilBlock类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnvilBlock</span> <span class="keyword">extends</span> <span class="title class_">FallingBlock</span> &#123;</span><br><span class="line">    <span class="comment">// 朝向</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">DirectionProperty</span> <span class="variable">FACING</span> <span class="operator">=</span> HorizontalDirectionalBlock.FACING;</span><br><span class="line">    <span class="comment">// 碰撞box</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">VoxelShape</span> <span class="variable">BASE</span> <span class="operator">=</span> Block.box(<span class="number">2.0</span>, <span class="number">0.0</span>, <span class="number">2.0</span>, <span class="number">14.0</span>, <span class="number">4.0</span>, <span class="number">14.0</span>);</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">VoxelShape</span> <span class="variable">X_LEG1</span> <span class="operator">=</span> Block.box(<span class="number">3.0</span>, <span class="number">4.0</span>, <span class="number">4.0</span>, <span class="number">13.0</span>, <span class="number">5.0</span>, <span class="number">12.0</span>);</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">VoxelShape</span> <span class="variable">X_LEG2</span> <span class="operator">=</span> Block.box(<span class="number">4.0</span>, <span class="number">5.0</span>, <span class="number">6.0</span>, <span class="number">12.0</span>, <span class="number">10.0</span>, <span class="number">10.0</span>);</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">VoxelShape</span> <span class="variable">X_TOP</span> <span class="operator">=</span> Block.box(<span class="number">0.0</span>, <span class="number">10.0</span>, <span class="number">3.0</span>, <span class="number">16.0</span>, <span class="number">16.0</span>, <span class="number">13.0</span>);</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">VoxelShape</span> <span class="variable">Z_LEG1</span> <span class="operator">=</span> Block.box(<span class="number">4.0</span>, <span class="number">4.0</span>, <span class="number">3.0</span>, <span class="number">12.0</span>, <span class="number">5.0</span>, <span class="number">13.0</span>);</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">VoxelShape</span> <span class="variable">Z_LEG2</span> <span class="operator">=</span> Block.box(<span class="number">6.0</span>, <span class="number">5.0</span>, <span class="number">4.0</span>, <span class="number">10.0</span>, <span class="number">10.0</span>, <span class="number">12.0</span>);</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">VoxelShape</span> <span class="variable">Z_TOP</span> <span class="operator">=</span> Block.box(<span class="number">3.0</span>, <span class="number">10.0</span>, <span class="number">0.0</span>, <span class="number">13.0</span>, <span class="number">16.0</span>, <span class="number">16.0</span>);</span><br><span class="line">    <span class="comment">// x轴碰撞box</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">VoxelShape</span> <span class="variable">X_AXIS_AABB</span> <span class="operator">=</span> Shapes.or(BASE, X_LEG1, X_LEG2, X_TOP);</span><br><span class="line">    <span class="comment">// z轴碰撞box</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">VoxelShape</span> <span class="variable">Z_AXIS_AABB</span> <span class="operator">=</span> Shapes.or(BASE, Z_LEG1, Z_LEG2, Z_TOP);</span><br><span class="line">    <span class="comment">// gui的标题</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Component</span> <span class="variable">CONTAINER_TITLE</span> <span class="operator">=</span> Component.translatable(<span class="string">&quot;container.repair&quot;</span>);</span><br><span class="line">    <span class="comment">// 掉落每block造成伤害</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">FALL_DAMAGE_PER_DISTANCE</span> <span class="operator">=</span> <span class="number">2.0F</span>;</span><br><span class="line">    <span class="comment">// 最大造成伤害 </span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">FALL_DAMAGE_MAX</span> <span class="operator">=</span> <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">AnvilBlock</span><span class="params">(BlockBehaviour.Properties p_48777_)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>(p_48777_);</span><br><span class="line">       <span class="comment">// 设置默认为北方</span></span><br><span class="line">      <span class="built_in">this</span>.registerDefaultState(<span class="built_in">this</span>.stateDefinition.any().setValue(FACING, Direction.NORTH));</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//方块被放置时获取方块的状态。它接受一个BlockPlaceContext对象作为参数，并返回一个BlockState对象，该对象表示方块的状态。</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> BlockState <span class="title function_">getStateForPlacement</span><span class="params">(BlockPlaceContext p_48781_)</span> &#123;</span><br><span class="line">       <span class="comment">// 设置朝向为当前玩家朝向的反方向</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.defaultBlockState().setValue(FACING, p_48781_.getHorizontalDirection().getClockWise());</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 如果方块在客户端（即玩家的设备）上，它将返回InteractionResult.SUCCESS。否则，它将打开一个新的菜单，并返回InteractionResult.CONSUME。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> InteractionResult <span class="title function_">use</span><span class="params">(BlockState p_48804_, Level p_48805_, BlockPos p_48806_, Player p_48807_, InteractionHand p_48808_, BlockHitResult p_48809_)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (p_48805_.isClientSide) &#123;</span><br><span class="line">         <span class="keyword">return</span> InteractionResult.SUCCESS;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 打开一个menu</span></span><br><span class="line">         p_48807_.openMenu(p_48804_.getMenuProvider(p_48805_, p_48806_));</span><br><span class="line">         p_48807_.awardStat(Stats.INTERACT_WITH_ANVIL);</span><br><span class="line">         <span class="keyword">return</span> InteractionResult.CONSUME;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> <span class="comment">//方法用于返回一个新的菜单提供者，该提供者在玩家与方块交互时打开一个新的菜单。</span></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> MenuProvider <span class="title function_">getMenuProvider</span><span class="params">(BlockState p_48821_, Level p_48822_, BlockPos p_48823_)</span> &#123;</span><br><span class="line">      <span class="comment">// 返回一个SimpleMenuProvider</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleMenuProvider</span>(</span><br><span class="line">         (p_48785_, p_48786_, p_48787_) -&gt; <span class="keyword">new</span> <span class="title class_">AnvilMenu</span>(p_48785_, p_48786_, ContainerLevelAccess.create(p_48822_, p_48823_)), CONTAINER_TITLE</span><br><span class="line">      );</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 获取方块的形状。它接受一个BlockState对象、一个BlockGetter对象和一个BlockPos对象作为参数，并返回一个VoxelShape对象，该对象表示方块的形状。</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> VoxelShape <span class="title function_">getShape</span><span class="params">(BlockState p_48816_, BlockGetter p_48817_, BlockPos p_48818_, CollisionContext p_48819_)</span> &#123;</span><br><span class="line">       <span class="comment">//根据 x z 返回不同的碰撞box</span></span><br><span class="line">      <span class="type">Direction</span> <span class="variable">direction</span> <span class="operator">=</span> p_48816_.getValue(FACING);</span><br><span class="line">      <span class="keyword">return</span> direction.getAxis() == Direction.Axis.X ? X_AXIS_AABB : Z_AXIS_AABB;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//falling方法用于处理方块下落时造成的伤害。它接受一个FallingBlockEntity对象作为参数，并设置该对象的伤害属性。</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">falling</span><span class="params">(FallingBlockEntity p_48779_)</span> &#123;</span><br><span class="line">      p_48779_.setHurtsEntities(<span class="number">2.0F</span>, <span class="number">40</span>);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//onLand和onBrokenAfterFall方法用于处理方块落地和破碎后的事件。它们接受一个Level对象、一个BlockPos对象和一个BlockState对象作为参数，并在方块落地或破碎后触发一个level事件。</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLand</span><span class="params">(Level p_48793_, BlockPos p_48794_, BlockState p_48795_, BlockState p_48796_, FallingBlockEntity p_48797_)</span> &#123;</span><br><span class="line">       <span class="comment">// 不是静音</span></span><br><span class="line">      <span class="keyword">if</span> (!p_48797_.isSilent()) &#123;</span><br><span class="line">         p_48793_.levelEvent(<span class="number">1031</span>, p_48794_, <span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBrokenAfterFall</span><span class="params">(Level p_152053_, BlockPos p_152054_, FallingBlockEntity p_152055_)</span> &#123;</span><br><span class="line">       <span class="comment">// 不是静音</span></span><br><span class="line">      <span class="keyword">if</span> (!p_152055_.isSilent()) &#123;</span><br><span class="line">         p_152053_.levelEvent(<span class="number">1029</span>, p_152054_, <span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//获取方块下落时造成的伤害源。这个方法接受一个Entity对象作为参数，并返回一个DamageSource对象，该对象表示方块下落时造成的伤害源。</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> DamageSource <span class="title function_">getFallDamageSource</span><span class="params">(Entity p_254036_)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> p_254036_.damageSources().anvil(p_254036_);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//处理方块被损坏的情况。如果方块是ANVIL，那么它会变成破损的ANVIL。如果方块是破损的ANVIL，那么它会变成损坏的锤子。如果方块既不是ANVIL也不是破损的ANVIL，那么这个方法将返回null。</span></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> BlockState <span class="title function_">damage</span><span class="params">(BlockState p_48825_)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (p_48825_.is(Blocks.ANVIL)) &#123;</span><br><span class="line">         <span class="keyword">return</span> Blocks.CHIPPED_ANVIL.defaultBlockState().setValue(FACING, p_48825_.getValue(FACING));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> p_48825_.is(Blocks.CHIPPED_ANVIL) ? Blocks.DAMAGED_ANVIL.defaultBlockState().setValue(FACING, p_48825_.getValue(FACING)) : <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//rotate方法用于处理方块旋转的情况。这个方法接受一个BlockState对象和一个Rotation对象作为参数，并返回一个新的BlockState对象，该对象表示方块旋转后的状态。</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> BlockState <span class="title function_">rotate</span><span class="params">(BlockState p_48811_, Rotation p_48812_)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> p_48811_.setValue(FACING, p_48812_.rotate(p_48811_.getValue(FACING)));</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//于定义方块的状态。这个方法接受一个StateDefinition.Builder对象作为参数，并添加方块的朝向状态。</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">createBlockStateDefinition</span><span class="params">(StateDefinition.Builder&lt;Block, BlockState&gt; p_48814_)</span> &#123;</span><br><span class="line">      p_48814_.add(FACING);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//判断方块是否可以被路径查找。这个方法接受一个BlockState对象、一个BlockGetter对象、一个BlockPos对象和一个PathComputationType对象作为参数，并返回一个布尔值，表示方块是否可以被路径查找。在这个例子中，方块不可以被路径查找。</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPathfindable</span><span class="params">(BlockState p_48799_, BlockGetter p_48800_, BlockPos p_48801_, PathComputationType p_48802_)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//获取方块的粉尘颜色。这个方法接受一个BlockState对象、一个BlockGetter对象和一个BlockPos对象作为参数，并返回一个整数，表示方块的粉尘颜色。</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDustColor</span><span class="params">(BlockState p_48827_, BlockGetter p_48828_, BlockPos p_48829_)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> p_48827_.getMapColor(p_48828_, p_48829_).col;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="AnvilMenu-类"><a href="#AnvilMenu-类" class="headerlink" title="AnvilMenu 类"></a>AnvilMenu 类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnvilMenu</span> <span class="keyword">extends</span> <span class="title class_">ItemCombinerMenu</span> &#123;</span><br><span class="line">    <span class="comment">// 输入slot 0</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INPUT_SLOT</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 另一个输入slot 1 </span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ADDITIONAL_SLOT</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 输出slot 2</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RESULT_SLOT</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 日志</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LogUtils.getLogger();</span><br><span class="line">    <span class="comment">// 表示是否开启调试模式。</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">DEBUG_COST</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 用于表示物品名称的最大长度。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_NAME_LENGTH</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line">    <span class="comment">// 用于表示修复物品的数量成本。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> repairItemCountCost;</span><br><span class="line">    <span class="comment">// 用于表示物品的名称。</span></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="keyword">private</span> String itemName;</span><br><span class="line">    <span class="comment">// cost是一个DataSlot对象，用于表示修复的成本。</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">DataSlot</span> <span class="variable">cost</span> <span class="operator">=</span> DataSlot.standalone();</span><br><span class="line">    <span class="comment">// 定义的常量，用于表示修复的不同成本。</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COST_FAIL</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COST_BASE</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COST_ADDED_BASE</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COST_REPAIR_MATERIAL</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COST_REPAIR_SACRIFICE</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COST_INCOMPATIBLE_PENALTY</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COST_RENAME</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 是定义的常量，用于表示输入槽、额外槽和结果槽的X坐标。</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INPUT_SLOT_X_PLACEMENT</span> <span class="operator">=</span> <span class="number">27</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ADDITIONAL_SLOT_X_PLACEMENT</span> <span class="operator">=</span> <span class="number">76</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RESULT_SLOT_X_PLACEMENT</span> <span class="operator">=</span> <span class="number">134</span>;</span><br><span class="line">    <span class="comment">// Y坐标</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SLOT_Y_PLACEMENT</span> <span class="operator">=</span> <span class="number">47</span>;</span><br><span class="line"><span class="comment">// 构造函数接受一个整数和一个Inventory对象作为参数，并将它们传递给父类的构造函数。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">AnvilMenu</span><span class="params">(<span class="type">int</span> p_39005_, Inventory p_39006_)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>(p_39005_, p_39006_, ContainerLevelAccess.NULL);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">AnvilMenu</span><span class="params">(<span class="type">int</span> p_39008_, Inventory p_39009_, ContainerLevelAccess p_39010_)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>(MenuType.ANVIL, p_39008_, p_39009_, p_39010_);</span><br><span class="line">      <span class="built_in">this</span>.addDataSlot(<span class="built_in">this</span>.cost);</span><br><span class="line">   &#125;</span><br><span class="line"> <span class="comment">// 创建slot的定义。</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> ItemCombinerMenuSlotDefinition <span class="title function_">createInputSlotDefinitions</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> ItemCombinerMenuSlotDefinition.create()</span><br><span class="line">         .withSlot(<span class="number">0</span>, <span class="number">27</span>, <span class="number">47</span>, p_266635_ -&gt; <span class="literal">true</span>)</span><br><span class="line">         .withSlot(<span class="number">1</span>, <span class="number">76</span>, <span class="number">47</span>, p_266634_ -&gt; <span class="literal">true</span>)</span><br><span class="line">         .withResultSlot(<span class="number">2</span>, <span class="number">134</span>, <span class="number">47</span>)</span><br><span class="line">         .build();</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//判断方块是否是铁砧。</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">isValidBlock</span><span class="params">(BlockState p_39019_)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> p_39019_.is(BlockTags.ANVIL);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//判断玩家是否可以合成物品。</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">mayPickup</span><span class="params">(Player p_39023_, <span class="type">boolean</span> p_39024_)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (p_39023_.getAbilities().instabuild || p_39023_.experienceLevel &gt;= <span class="built_in">this</span>.cost.get()) &amp;&amp; <span class="built_in">this</span>.cost.get() &gt; <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//处理玩家拾取物品的事件。</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onTake</span><span class="params">(Player p_150474_, ItemStack p_150475_)</span> &#123;</span><br><span class="line">       <span class="comment">// 生存模式</span></span><br><span class="line">      <span class="keyword">if</span> (!p_150474_.getAbilities().instabuild) &#123;</span><br><span class="line">          <span class="comment">//扣除玩家cost的经验</span></span><br><span class="line">         p_150474_.giveExperienceLevels(-<span class="built_in">this</span>.cost.get());</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="comment">//定义了一个名为breakChance的浮点数变量，用于表示破损的概率,这个概率是通过调用net.neoforged.neoforge.common.CommonHooks.onAnvilRepair方法计算得出的</span></span><br><span class="line">      <span class="type">float</span> <span class="variable">breakChance</span> <span class="operator">=</span> net.neoforged.neoforge.common.CommonHooks.onAnvilRepair(p_150474_, p_150475_, AnvilMenu.<span class="built_in">this</span>.inputSlots.getItem(<span class="number">0</span>), AnvilMenu.<span class="built_in">this</span>.inputSlots.getItem(<span class="number">1</span>));</span><br><span class="line"><span class="comment">//清空第一个输入槽的物品。</span></span><br><span class="line">      <span class="built_in">this</span>.inputSlots.setItem(<span class="number">0</span>, ItemStack.EMPTY);</span><br><span class="line">       <span class="comment">//检查repairItemCountCost的值。如果repairItemCountCost大于0，那么获取第二个输入槽的物品，并检查它的数量是否大于repairItemCountCost。如果是，那么将repairItemCountCost从物品的数量中减去，并将减少后的物品重新放入第二个输入槽。否则，清空第二个输入槽的物品。</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.repairItemCountCost &gt; <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="type">ItemStack</span> <span class="variable">itemstack</span> <span class="operator">=</span> <span class="built_in">this</span>.inputSlots.getItem(<span class="number">1</span>);</span><br><span class="line">         <span class="keyword">if</span> (!itemstack.isEmpty() &amp;&amp; itemstack.getCount() &gt; <span class="built_in">this</span>.repairItemCountCost) &#123;</span><br><span class="line">            itemstack.shrink(<span class="built_in">this</span>.repairItemCountCost);</span><br><span class="line">            <span class="built_in">this</span>.inputSlots.setItem(<span class="number">1</span>, itemstack);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.inputSlots.setItem(<span class="number">1</span>, ItemStack.EMPTY);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="built_in">this</span>.inputSlots.setItem(<span class="number">1</span>, ItemStack.EMPTY);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//将cost的值设置为0。</span></span><br><span class="line">      <span class="built_in">this</span>.cost.set(<span class="number">0</span>);</span><br><span class="line">       <span class="comment">//执行一个lambda表达式，该表达式用于处理铁砧的破损。如果玩家生存模式，并且铁砧的状态是铁砧，并且随机数小于breakChance，那么调用AnvilBlock.damage方法破损铁砧，并触发相应的破损事件。否则，触发破损事件。</span></span><br><span class="line">      <span class="built_in">this</span>.access.execute((p_150479_, p_150480_) -&gt; &#123;</span><br><span class="line">         <span class="type">BlockState</span> <span class="variable">blockstate</span> <span class="operator">=</span> p_150479_.getBlockState(p_150480_);</span><br><span class="line">         <span class="keyword">if</span> (!p_150474_.getAbilities().instabuild &amp;&amp; blockstate.is(BlockTags.ANVIL) &amp;&amp; p_150474_.getRandom().nextFloat() &lt; breakChance) &#123;</span><br><span class="line">            <span class="type">BlockState</span> <span class="variable">blockstate1</span> <span class="operator">=</span> AnvilBlock.damage(blockstate);</span><br><span class="line">            <span class="keyword">if</span> (blockstate1 == <span class="literal">null</span>) &#123;</span><br><span class="line">               p_150479_.removeBlock(p_150480_, <span class="literal">false</span>);</span><br><span class="line">               p_150479_.levelEvent(<span class="number">1029</span>, p_150480_, <span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               p_150479_.setBlock(p_150480_, blockstate1, <span class="number">2</span>);</span><br><span class="line">               p_150479_.levelEvent(<span class="number">1030</span>, p_150480_, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p_150479_.levelEvent(<span class="number">1030</span>, p_150480_, <span class="number">0</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//用于计算修复物品的结果。</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createResult</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//获取第一个输入槽的物品，并将cost的值设置为1。</span></span><br><span class="line">      <span class="type">ItemStack</span> <span class="variable">itemstack</span> <span class="operator">=</span> <span class="built_in">this</span>.inputSlots.getItem(<span class="number">0</span>);</span><br><span class="line">      <span class="built_in">this</span>.cost.set(<span class="number">1</span>);</span><br><span class="line">       <span class="comment">//初始化三个整数变量i、j和k，用于存储修复的成本。</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="comment">//检查第一个输入槽的物品是否为空。如果为空，那么清空结果槽的物品，并将cost的值设置为0。</span></span><br><span class="line">      <span class="keyword">if</span> (itemstack.isEmpty()) &#123;</span><br><span class="line">         <span class="built_in">this</span>.resultSlots.setItem(<span class="number">0</span>, ItemStack.EMPTY);</span><br><span class="line">         <span class="built_in">this</span>.cost.set(<span class="number">0</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//一个输入槽的物品不为空，那么复制第一个输入槽的物品，并获取第二个输入槽的物品。然后，获取第一个输入槽的物品的附魔列表，并计算修复的成本。</span></span><br><span class="line">         <span class="type">ItemStack</span> <span class="variable">itemstack1</span> <span class="operator">=</span> itemstack.copy();</span><br><span class="line">         <span class="type">ItemStack</span> <span class="variable">itemstack2</span> <span class="operator">=</span> <span class="built_in">this</span>.inputSlots.getItem(<span class="number">1</span>);</span><br><span class="line">         Map&lt;Enchantment, Integer&gt; map = EnchantmentHelper.getEnchantments(itemstack1);</span><br><span class="line">         j += itemstack.getBaseRepairCost() + (itemstack2.isEmpty() ? <span class="number">0</span> : itemstack2.getBaseRepairCost());</span><br><span class="line">         <span class="built_in">this</span>.repairItemCountCost = <span class="number">0</span>;</span><br><span class="line">         <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//然后，检查是否需要修复物品。如果不需要，那么返回。</span></span><br><span class="line">         <span class="keyword">if</span> (!net.neoforged.neoforge.common.CommonHooks.onAnvilChange(<span class="built_in">this</span>, itemstack, itemstack2, resultSlots, itemName, j, <span class="built_in">this</span>.player)) <span class="keyword">return</span>;</span><br><span class="line">          <span class="comment">//果需要修复物品，那么检查第二个输入槽的物品是否为空。如果不为空，那么检查第一个输入槽的物品是否可以被修复，并计算修复的成本。</span></span><br><span class="line">         <span class="keyword">if</span> (!itemstack2.isEmpty()) &#123;</span><br><span class="line">            flag = itemstack2.getItem() == Items.ENCHANTED_BOOK &amp;&amp; !EnchantedBookItem.getEnchantments(itemstack2).isEmpty();</span><br><span class="line">            <span class="keyword">if</span> (itemstack1.isDamageableItem() &amp;&amp; itemstack1.getItem().isValidRepairItem(itemstack, itemstack2)) &#123;</span><br><span class="line">               <span class="type">int</span> <span class="variable">l2</span> <span class="operator">=</span> Math.min(itemstack1.getDamageValue(), itemstack1.getMaxDamage() / <span class="number">4</span>);</span><br><span class="line">               <span class="keyword">if</span> (l2 &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="built_in">this</span>.resultSlots.setItem(<span class="number">0</span>, ItemStack.EMPTY);</span><br><span class="line">                  <span class="built_in">this</span>.cost.set(<span class="number">0</span>);</span><br><span class="line">                  <span class="keyword">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="type">int</span> i3;</span><br><span class="line">               <span class="keyword">for</span>(i3 = <span class="number">0</span>; l2 &gt; <span class="number">0</span> &amp;&amp; i3 &lt; itemstack2.getCount(); ++i3) &#123;</span><br><span class="line">                  <span class="type">int</span> <span class="variable">j3</span> <span class="operator">=</span> itemstack1.getDamageValue() - l2;</span><br><span class="line">                  itemstack1.setDamageValue(j3);</span><br><span class="line">                  ++i;</span><br><span class="line">                  l2 = Math.min(itemstack1.getDamageValue(), itemstack1.getMaxDamage() / <span class="number">4</span>);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="built_in">this</span>.repairItemCountCost = i3;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果第一个输入槽的物品不可以被修复，那么检查第二个输入槽的物品是否可以用来修复第一个输入槽的物品。如果可以，那么计算修复的成本。</span></span><br><span class="line">               <span class="keyword">if</span> (!flag &amp;&amp; (!itemstack1.is(itemstack2.getItem()) || !itemstack1.isDamageableItem())) &#123;</span><br><span class="line">                  <span class="built_in">this</span>.resultSlots.setItem(<span class="number">0</span>, ItemStack.EMPTY);</span><br><span class="line">                  <span class="built_in">this</span>.cost.set(<span class="number">0</span>);</span><br><span class="line">                  <span class="keyword">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (itemstack1.isDamageableItem() &amp;&amp; !flag) &#123;</span><br><span class="line">                  <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> itemstack.getMaxDamage() - itemstack.getDamageValue();</span><br><span class="line">                  <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> itemstack2.getMaxDamage() - itemstack2.getDamageValue();</span><br><span class="line">                  <span class="type">int</span> <span class="variable">j1</span> <span class="operator">=</span> i1 + itemstack1.getMaxDamage() * <span class="number">12</span> / <span class="number">100</span>;</span><br><span class="line">                  <span class="type">int</span> <span class="variable">k1</span> <span class="operator">=</span> l + j1;</span><br><span class="line">                  <span class="type">int</span> <span class="variable">l1</span> <span class="operator">=</span> itemstack1.getMaxDamage() - k1;</span><br><span class="line">                  <span class="keyword">if</span> (l1 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                     l1 = <span class="number">0</span>;</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                  <span class="keyword">if</span> (l1 &lt; itemstack1.getDamageValue()) &#123;</span><br><span class="line">                     itemstack1.setDamageValue(l1);</span><br><span class="line">                     i += <span class="number">2</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;</span><br><span class="line"><span class="comment">//如果第二个输入槽的物品不能用来修复第一个输入槽的物品，那么检查第二个输入槽的物品的附魔列表。</span></span><br><span class="line"><span class="comment">//如果第二个输入槽的物品的附魔列表不为空，那么遍历附魔列表，并对每个附魔进行处理。如果附魔不为空，那么获取第一个输入槽的物品的附魔列表中的该附魔的等级，或者如果第一个输入槽的物品的附魔列表中没有该附魔，那么获取第二个输入槽的物品的附魔列表中的该附魔的等级。然后，如果附魔的等级不相等，那么将较大的等级设置为新的等级。如果新的等级超过了附魔的最大等级，那么将新的等级设置为附魔的最大等级。然后，将新的等级添加到第一个输入槽的物品的附魔列表中。</span></span><br><span class="line">               Map&lt;Enchantment, Integer&gt; map1 = EnchantmentHelper.getEnchantments(itemstack2);</span><br><span class="line">               <span class="type">boolean</span> <span class="variable">flag2</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">               <span class="type">boolean</span> <span class="variable">flag3</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">for</span>(Enchantment enchantment1 : map1.keySet()) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (enchantment1 != <span class="literal">null</span>) &#123;</span><br><span class="line">                     <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> map.getOrDefault(enchantment1, <span class="number">0</span>);</span><br><span class="line">                     <span class="type">int</span> <span class="variable">j2</span> <span class="operator">=</span> map1.get(enchantment1);</span><br><span class="line">                     j2 = i2 == j2 ? j2 + <span class="number">1</span> : Math.max(j2, i2);</span><br><span class="line">                     <span class="type">boolean</span> <span class="variable">flag1</span> <span class="operator">=</span> enchantment1.canEnchant(itemstack);</span><br><span class="line">                     <span class="keyword">if</span> (<span class="built_in">this</span>.player.getAbilities().instabuild || itemstack.is(Items.ENCHANTED_BOOK)) &#123;</span><br><span class="line">                        flag1 = <span class="literal">true</span>;</span><br><span class="line">                     &#125;</span><br><span class="line"></span><br><span class="line">                     <span class="keyword">for</span>(Enchantment enchantment : map.keySet()) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (enchantment != enchantment1 &amp;&amp; !enchantment1.isCompatibleWith(enchantment)) &#123;</span><br><span class="line">                           flag1 = <span class="literal">false</span>;</span><br><span class="line">                           ++i;</span><br><span class="line">                        &#125;</span><br><span class="line">                     &#125;</span><br><span class="line"></span><br><span class="line">                     <span class="keyword">if</span> (!flag1) &#123;</span><br><span class="line">                        flag3 = <span class="literal">true</span>;</span><br><span class="line">                     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        flag2 = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">if</span> (j2 &gt; enchantment1.getMaxLevel()) &#123;</span><br><span class="line">                           j2 = enchantment1.getMaxLevel();</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        map.put(enchantment1, j2);</span><br><span class="line">                        <span class="type">int</span> <span class="variable">k3</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">switch</span>(enchantment1.getRarity()) &#123;</span><br><span class="line">                           <span class="keyword">case</span> COMMON:</span><br><span class="line">                              k3 = <span class="number">1</span>;</span><br><span class="line">                              <span class="keyword">break</span>;</span><br><span class="line">                           <span class="keyword">case</span> UNCOMMON:</span><br><span class="line">                              k3 = <span class="number">2</span>;</span><br><span class="line">                              <span class="keyword">break</span>;</span><br><span class="line">                           <span class="keyword">case</span> RARE:</span><br><span class="line">                              k3 = <span class="number">4</span>;</span><br><span class="line">                              <span class="keyword">break</span>;</span><br><span class="line">                           <span class="keyword">case</span> VERY_RARE:</span><br><span class="line">                              k3 = <span class="number">8</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                           k3 = Math.max(<span class="number">1</span>, k3 / <span class="number">2</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        i += k3 * j2;</span><br><span class="line">                        <span class="keyword">if</span> (itemstack.getCount() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                           i = <span class="number">40</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                     &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;</span><br><span class="line"><span class="comment">//如果所有的附魔都不能添加到第一个输入槽的物品的附魔列表中，那么清空结果槽的物品，并将cost的值设置为0。</span></span><br><span class="line">               <span class="keyword">if</span> (flag3 &amp;&amp; !flag2) &#123;</span><br><span class="line">                  <span class="built_in">this</span>.resultSlots.setItem(<span class="number">0</span>, ItemStack.EMPTY);</span><br><span class="line">                  <span class="built_in">this</span>.cost.set(<span class="number">0</span>);</span><br><span class="line">                  <span class="keyword">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line"><span class="comment">//第一个输入槽的物品的名称不为空，并且不是空格，那么检查第一个输入槽的物品的名称是否与第二个输入槽的物品的名称相同。如果不相同，那么将k的值设置为1，并将i的值增加k的值。然后，将第一个输入槽的物品的名称设置为itemName。</span></span><br><span class="line">         <span class="keyword">if</span> (<span class="built_in">this</span>.itemName != <span class="literal">null</span> &amp;&amp; !Util.isBlank(<span class="built_in">this</span>.itemName)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">this</span>.itemName.equals(itemstack.getHoverName().getString())) &#123;</span><br><span class="line">               k = <span class="number">1</span>;</span><br><span class="line">               i += k;</span><br><span class="line">               itemstack1.setHoverName(Component.literal(<span class="built_in">this</span>.itemName));</span><br><span class="line">            &#125;</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (itemstack.hasCustomHoverName()) &#123;</span><br><span class="line">            k = <span class="number">1</span>;</span><br><span class="line">            i += k;</span><br><span class="line">            itemstack1.resetHoverName();</span><br><span class="line">         &#125;</span><br><span class="line">          <span class="comment">//如果flag为真，并且第一个输入槽的物品不可以被附魔，那么将itemstack1的值设置为空。</span></span><br><span class="line">         <span class="keyword">if</span> (flag &amp;&amp; !itemstack1.isBookEnchantable(itemstack2)) itemstack1 = ItemStack.EMPTY;</span><br><span class="line"><span class="comment">//然后，将cost的值设置为j和i的和。</span></span><br><span class="line">         <span class="built_in">this</span>.cost.set(j + i);</span><br><span class="line">          <span class="comment">//如果i的值小于等于0，那么将itemstack1的值设置为空。</span></span><br><span class="line">         <span class="keyword">if</span> (i &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            itemstack1 = ItemStack.EMPTY;</span><br><span class="line">         &#125;</span><br><span class="line"><span class="comment">//如果k的值等于i的值，并且k的值大于0，并且cost的值大于等于40，那么将cost的值设置为39。</span></span><br><span class="line">         <span class="keyword">if</span> (k == i &amp;&amp; k &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">this</span>.cost.get() &gt;= <span class="number">40</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.cost.set(<span class="number">39</span>);</span><br><span class="line">         &#125;</span><br><span class="line"><span class="comment">//如果cost的值大于等于40，并且玩家没有无敌模式，那么将itemstack1的值设置为空。</span></span><br><span class="line">         <span class="keyword">if</span> (<span class="built_in">this</span>.cost.get() &gt;= <span class="number">40</span> &amp;&amp; !<span class="built_in">this</span>.player.getAbilities().instabuild) &#123;</span><br><span class="line">            itemstack1 = ItemStack.EMPTY;</span><br><span class="line">         &#125;</span><br><span class="line"><span class="comment">//如果itemstack1的值不为空，那么获取第一个输入槽的物品的基础修复成本，并检查第二个输入槽的物品是否为空。如果不为空，并且第二个输入槽的物品的基础修复成本大于第一个输入槽的物品的基础修复成本，那么将第二个输入槽的物品的基础修复成本设置为新的修复成本。</span></span><br><span class="line">         <span class="keyword">if</span> (!itemstack1.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">k2</span> <span class="operator">=</span> itemstack1.getBaseRepairCost();</span><br><span class="line">            <span class="keyword">if</span> (!itemstack2.isEmpty() &amp;&amp; k2 &lt; itemstack2.getBaseRepairCost()) &#123;</span><br><span class="line">               k2 = itemstack2.getBaseRepairCost();</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//如果k的值不等于i的值，或者k的值等于0，那么将新的修复成本计算为增加的修复成本。</span></span><br><span class="line">            <span class="keyword">if</span> (k != i || k == <span class="number">0</span>) &#123;</span><br><span class="line">               k2 = calculateIncreasedRepairCost(k2);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//然后，将新的修复成本设置为itemstack1的修复成本，并将itemstack1的附魔列表设置为map。</span></span><br><span class="line">            itemstack1.setRepairCost(k2);</span><br><span class="line">            EnchantmentHelper.setEnchantments(map, itemstack1);</span><br><span class="line">         &#125;</span><br><span class="line"><span class="comment">//最后，将itemstack1的值设置为结果槽的物品，并广播更改。</span></span><br><span class="line">         <span class="built_in">this</span>.resultSlots.setItem(<span class="number">0</span>, itemstack1);</span><br><span class="line">         <span class="built_in">this</span>.broadcastChanges();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//它接受一个整数作为参数 ( p_39026_ )，这可能代表该项目的基本成本。然后，该方法返回基本成本乘以 2，然后再增加 1。这表明基本成本每增加一个单位，维修成本就会增加 100%</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calculateIncreasedRepairCost</span><span class="params">(<span class="type">int</span> p_39026_)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> p_39026_ * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 它接受一个字符串作为参数 ( p_288970_ )，这是该物品的新名称。该方法首先使用 validateName 方法验证名称。如果名称有效且与当前项目名称不同，则该方法设置新名称，更新slot 2 中项目的悬停名称（如果存在），然后调用createResult方法。如果名称无效或与当前项目名称相同，则该方法返回 </span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">setItemName</span><span class="params">(String p_288970_)</span> &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> validateName(p_288970_);</span><br><span class="line">      <span class="keyword">if</span> (s != <span class="literal">null</span> &amp;&amp; !s.equals(<span class="built_in">this</span>.itemName)) &#123;</span><br><span class="line">         <span class="built_in">this</span>.itemName = s;</span><br><span class="line">         <span class="keyword">if</span> (<span class="built_in">this</span>.getSlot(<span class="number">2</span>).hasItem()) &#123;</span><br><span class="line">            <span class="type">ItemStack</span> <span class="variable">itemstack</span> <span class="operator">=</span> <span class="built_in">this</span>.getSlot(<span class="number">2</span>).getItem();</span><br><span class="line">            <span class="keyword">if</span> (Util.isBlank(s)) &#123;</span><br><span class="line">               itemstack.resetHoverName();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               itemstack.setHoverName(Component.literal(s));</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="built_in">this</span>.createResult();</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//它接受一个字符串作为参数 ( p_288995_ )，这是要验证的名称。该方法使用 SharedConstants.filterText 过滤文本，并检查过滤后文本的长度是否小于或等于50。如果是，则返回过滤后的文本；否则，返回过滤后的文本。否则，返回 null </span></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">validateName</span><span class="params">(String p_288995_)</span> &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> SharedConstants.filterText(p_288995_);</span><br><span class="line">      <span class="keyword">return</span> s.length() &lt;= <span class="number">50</span> ? s : <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//此方法返回该项目的当前成本。它通过调用 cost 对象上的 get 方法来完成此操作。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCost</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.cost.get();</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//此方法设置项目的最大成本。它接受一个整数作为参数 ( value )，这是新的最大成本。然后，该方法通过调用 cost 对象 ayokoding.com 上的 set 方法将 cost 对象设置为新的最大成本。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaximumCost</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.cost.set(value);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="AnvilScreen类"><a href="#AnvilScreen类" class="headerlink" title="AnvilScreen类"></a>AnvilScreen类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用于为游戏中的铁砧创建图形用户界面 (GUI)。</span></span><br><span class="line"><span class="comment">//类只能在游戏的客户端加载</span></span><br><span class="line"><span class="meta">@OnlyIn(Dist.CLIENT)</span></span><br><span class="line"><span class="comment">//它扩展了 ItemCombinerScreen&lt;AnvilMenu&gt; ，这表明它是一种允许玩家以某种方式组合项目的屏幕。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnvilScreen</span> <span class="keyword">extends</span> <span class="title class_">ItemCombinerScreen</span>&lt;AnvilMenu&gt; &#123;</span><br><span class="line">    <span class="comment">//用于存储 GUI 中使用的各种精灵的位置。这些精灵可能用于在屏幕 nekoyue.github.io 上绘制 GUI 元素。</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ResourceLocation</span> <span class="variable">TEXT_FIELD_SPRITE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceLocation</span>(<span class="string">&quot;container/anvil/text_field&quot;</span>);</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ResourceLocation</span> <span class="variable">TEXT_FIELD_DISABLED_SPRITE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceLocation</span>(<span class="string">&quot;container/anvil/text_field_disabled&quot;</span>);</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ResourceLocation</span> <span class="variable">ERROR_SPRITE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceLocation</span>(<span class="string">&quot;container/anvil/error&quot;</span>);</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ResourceLocation</span> <span class="variable">ANVIL_LOCATION</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceLocation</span>(<span class="string">&quot;textures/gui/container/anvil.png&quot;</span>);</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Component</span> <span class="variable">TOO_EXPENSIVE_TEXT</span> <span class="operator">=</span> Component.translatable(<span class="string">&quot;container.repair.expensive&quot;</span>);</span><br><span class="line">    <span class="comment">// name 是一个 EditBox ，玩家可以使用它来输入项目的名称。</span></span><br><span class="line">   <span class="keyword">private</span> EditBox name;</span><br><span class="line">    <span class="comment">//。 player 是一个 Player 对象，代表正在使用 anvil 的玩家。</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> Player player;</span><br><span class="line"><span class="comment">//它需要三个参数： AnvilMenu 、 Inventory 和 Component 。</span></span><br><span class="line">    <span class="comment">//AnvilMenu 可能是玩家使用铁砧时显示的Menu。 Inventory 可能是玩家的背包， Component 可能是屏幕上显示的标题</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">AnvilScreen</span><span class="params">(AnvilMenu p_97874_, Inventory p_97875_, Component p_97876_)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>(p_97874_, p_97875_, p_97876_, ANVIL_LOCATION);</span><br><span class="line">      <span class="built_in">this</span>.player = p_97875_.player;</span><br><span class="line">       <span class="comment">//title 位置</span></span><br><span class="line">      <span class="built_in">this</span>.titleLabelX = <span class="number">60</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//屏幕初始化时被调用。它设置屏幕的 GUI 元素，包括用于输入项目名称的 EditBox 和初始焦点</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">subInit</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (<span class="built_in">this</span>.width - <span class="built_in">this</span>.imageWidth) / <span class="number">2</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> (<span class="built_in">this</span>.height - <span class="built_in">this</span>.imageHeight) / <span class="number">2</span>;</span><br><span class="line">      <span class="built_in">this</span>.name = <span class="keyword">new</span> <span class="title class_">EditBox</span>(<span class="built_in">this</span>.font, i + <span class="number">62</span>, j + <span class="number">24</span>, <span class="number">103</span>, <span class="number">12</span>, Component.translatable(<span class="string">&quot;container.repair&quot;</span>));</span><br><span class="line">      <span class="built_in">this</span>.name.setCanLoseFocus(<span class="literal">false</span>);</span><br><span class="line">      <span class="built_in">this</span>.name.setTextColor(-<span class="number">1</span>);</span><br><span class="line">      <span class="built_in">this</span>.name.setTextColorUneditable(-<span class="number">1</span>);</span><br><span class="line">      <span class="built_in">this</span>.name.setBordered(<span class="literal">false</span>);</span><br><span class="line">      <span class="built_in">this</span>.name.setMaxLength(<span class="number">50</span>);</span><br><span class="line">      <span class="built_in">this</span>.name.setResponder(<span class="built_in">this</span>::onNameChanged);</span><br><span class="line">      <span class="built_in">this</span>.name.setValue(<span class="string">&quot;&quot;</span>);</span><br><span class="line">      <span class="built_in">this</span>.addWidget(<span class="built_in">this</span>.name);</span><br><span class="line">      <span class="built_in">this</span>.setInitialFocus(<span class="built_in">this</span>.name);</span><br><span class="line">      <span class="built_in">this</span>.name.setEditable(<span class="built_in">this</span>.menu.getSlot(<span class="number">0</span>).hasItem());</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//调整屏幕大小时会调用此方法。它保存 EditBox 的当前值，重新初始化屏幕，然后恢复 EditBox 的值。</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">resize</span><span class="params">(Minecraft p_97886_, <span class="type">int</span> p_97887_, <span class="type">int</span> p_97888_)</span> &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="built_in">this</span>.name.getValue();</span><br><span class="line">      <span class="built_in">this</span>.init(p_97886_, p_97887_, p_97888_);</span><br><span class="line">      <span class="built_in">this</span>.name.setValue(s);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//当按下某个键时会调用此方法。它检查该键是否为转义键，如果是，则关闭容器。否则，它会检查 EditBox 是否可以使用输入，如果不能，则将按键传递给超类</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">keyPressed</span><span class="params">(<span class="type">int</span> p_97878_, <span class="type">int</span> p_97879_, <span class="type">int</span> p_97880_)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (p_97878_ == <span class="number">256</span>) &#123;</span><br><span class="line">         <span class="built_in">this</span>.minecraft.player.closeContainer();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> !<span class="built_in">this</span>.name.keyPressed(p_97878_, p_97879_, p_97880_) &amp;&amp; !<span class="built_in">this</span>.name.canConsumeInput() ? <span class="built_in">super</span>.keyPressed(p_97878_, p_97879_, p_97880_) : <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//当item名称更改时调用此方法。它检查菜单槽 0 中的项目是否有项目，如果有，它会向服务器发送一个数据包以将该项目重命名该item</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">onNameChanged</span><span class="params">(String p_97899_)</span> &#123;</span><br><span class="line">      <span class="type">Slot</span> <span class="variable">slot</span> <span class="operator">=</span> <span class="built_in">this</span>.menu.getSlot(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">if</span> (slot.hasItem()) &#123;</span><br><span class="line">         <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> p_97899_;</span><br><span class="line">         <span class="keyword">if</span> (!slot.getItem().hasCustomHoverName() &amp;&amp; p_97899_.equals(slot.getItem().getHoverName().getString())) &#123;</span><br><span class="line">            s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (<span class="built_in">this</span>.menu.setItemName(s)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.minecraft.player.connection.send(<span class="keyword">new</span> <span class="title class_">ServerboundRenameItemPacket</span>(s));</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//调用此方法以在屏幕上呈现标签。它检查物品的成本，如果成本大于0，它会根据成本以及玩家是否负担得起来设置文本和文本本身的颜色。如果成本大于或等于 40 并且玩家不是创造模式，则会将文本设置为“太昂贵”。如果成本小于 40，则会将文本设置为“维修成本：[成本]”。如果result slot没有item，则会将文本设置为空。然后它在屏幕上绘制文本</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">renderLabels</span><span class="params">(GuiGraphics p_281442_, <span class="type">int</span> p_282417_, <span class="type">int</span> p_283022_)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>.renderLabels(p_281442_, p_282417_, p_283022_);</span><br><span class="line">      <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="built_in">this</span>.menu.getCost();</span><br><span class="line">      <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">8453920</span>;</span><br><span class="line">         Component component;</span><br><span class="line">         <span class="keyword">if</span> (i &gt;= <span class="number">40</span> &amp;&amp; !<span class="built_in">this</span>.minecraft.player.getAbilities().instabuild) &#123;</span><br><span class="line">            component = TOO_EXPENSIVE_TEXT;</span><br><span class="line">            j = <span class="number">16736352</span>;</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">this</span>.menu.getSlot(<span class="number">2</span>).hasItem()) &#123;</span><br><span class="line">            component = <span class="literal">null</span>;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            component = Component.translatable(<span class="string">&quot;container.repair.cost&quot;</span>, i);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">this</span>.menu.getSlot(<span class="number">2</span>).mayPickup(<span class="built_in">this</span>.player)) &#123;</span><br><span class="line">               j = <span class="number">16736352</span>;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (component != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="built_in">this</span>.imageWidth - <span class="number">8</span> - <span class="built_in">this</span>.font.width(component) - <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">69</span>;</span><br><span class="line">            p_281442_.fill(k - <span class="number">2</span>, <span class="number">67</span>, <span class="built_in">this</span>.imageWidth - <span class="number">8</span>, <span class="number">79</span>, <span class="number">1325400064</span>);</span><br><span class="line">            p_281442_.drawString(<span class="built_in">this</span>.font, component, k, <span class="number">69</span>, j);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//调用该方法来渲染屏幕背景。它根据插槽 0 是否有项目来 blit（绘制）精灵 </span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">renderBg</span><span class="params">(GuiGraphics p_283345_, <span class="type">float</span> p_283412_, <span class="type">int</span> p_282871_, <span class="type">int</span> p_281306_)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>.renderBg(p_283345_, p_283412_, p_282871_, p_281306_);</span><br><span class="line">      p_283345_.blitSprite(<span class="built_in">this</span>.menu.getSlot(<span class="number">0</span>).hasItem() ? TEXT_FIELD_SPRITE : TEXT_FIELD_DISABLED_SPRITE, <span class="built_in">this</span>.leftPos + <span class="number">59</span>, <span class="built_in">this</span>.topPos + <span class="number">20</span>, <span class="number">110</span>, <span class="number">16</span>);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//调用该方法来渲染屏幕的前景。它呈现用于输入item名称 的 EditBox 。</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">renderFg</span><span class="params">(GuiGraphics p_283449_, <span class="type">int</span> p_283263_, <span class="type">int</span> p_281526_, <span class="type">float</span> p_282957_)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name.render(p_283449_, p_283263_, p_281526_, p_282957_);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//调用此方法以在屏幕上呈现错误图标。它检查插槽 0 和 1 是否有item，以及结果插槽是否没有item，如果满足这些条件，它会为错误图标生成一个 sprite。</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">renderErrorIcon</span><span class="params">(GuiGraphics p_282905_, <span class="type">int</span> p_283237_, <span class="type">int</span> p_282237_)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> ((<span class="built_in">this</span>.menu.getSlot(<span class="number">0</span>).hasItem() || <span class="built_in">this</span>.menu.getSlot(<span class="number">1</span>).hasItem()) &amp;&amp; !<span class="built_in">this</span>.menu.getSlot(<span class="built_in">this</span>.menu.getResultSlot()).hasItem()) &#123;</span><br><span class="line">         p_282905_.blitSprite(ERROR_SPRITE, p_283237_ + <span class="number">99</span>, p_282237_ + <span class="number">45</span>, <span class="number">28</span>, <span class="number">21</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">slotChanged</span><span class="params">(AbstractContainerMenu p_97882_, <span class="type">int</span> p_97883_, ItemStack p_97884_)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (p_97883_ == <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="built_in">this</span>.name.setValue(p_97884_.isEmpty() ? <span class="string">&quot;&quot;</span> : p_97884_.getHoverName().getString());</span><br><span class="line">         <span class="built_in">this</span>.name.setEditable(!p_97884_.isEmpty());</span><br><span class="line">         <span class="built_in">this</span>.setFocused(<span class="built_in">this</span>.name);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ServerGamePacketListenerImpl-类"><a href="#ServerGamePacketListenerImpl-类" class="headerlink" title="ServerGamePacketListenerImpl 类"></a>ServerGamePacketListenerImpl 类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleRenameItem</span><span class="params">(ServerboundRenameItemPacket p_9899_)</span> &#123;</span><br><span class="line">   PacketUtils.ensureRunningOnSameThread(p_9899_, <span class="built_in">this</span>, <span class="built_in">this</span>.player.serverLevel());</span><br><span class="line">   <span class="type">AbstractContainerMenu</span> <span class="variable">abstractcontainermenu</span> <span class="operator">=</span> <span class="built_in">this</span>.player.containerMenu;</span><br><span class="line">   <span class="keyword">if</span> (abstractcontainermenu <span class="keyword">instanceof</span> AnvilMenu anvilmenu) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!anvilmenu.stillValid(<span class="built_in">this</span>.player)) &#123;</span><br><span class="line">         LOGGER.debug(<span class="string">&quot;Player &#123;&#125; interacted with invalid menu &#123;&#125;&quot;</span>, <span class="built_in">this</span>.player, anvilmenu);</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      anvilmenu.setItemName(p_9899_.getName());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="ItemCombinerMenu-类"><a href="#ItemCombinerMenu-类" class="headerlink" title="ItemCombinerMenu 类"></a>ItemCombinerMenu 类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ItemCombinerMenu</span> <span class="keyword">extends</span> <span class="title class_">AbstractContainerMenu</span> &#123;</span><br><span class="line">    <span class="comment">// 玩家背包行</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INVENTORY_SLOTS_PER_ROW</span> <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line">    <span class="comment">// 玩家背包列</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INVENTORY_SLOTS_PER_COLUMN</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">final</span> ContainerLevelAccess access;</span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">final</span> Player player;</span><br><span class="line">    <span class="comment">// 输入 slot</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">final</span> Container inputSlots;</span><br><span class="line">    <span class="comment">// 输入 slot index</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Integer&gt; inputSlotIndexes;</span><br><span class="line">    <span class="comment">// result slot</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">ResultContainer</span> <span class="variable">resultSlots</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResultContainer</span>();</span><br><span class="line">    <span class="comment">// result slot index</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> resultSlotIndex;</span><br><span class="line"><span class="comment">// 子类实现方法</span></span><br><span class="line">    <span class="comment">// 能否被拿起</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">mayPickup</span><span class="params">(Player p_39798_, <span class="type">boolean</span> p_39799_)</span>;</span><br><span class="line"><span class="comment">// 能否拿出</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">onTake</span><span class="params">(Player p_150601_, ItemStack p_150602_)</span>;</span><br><span class="line"><span class="comment">// 是否合法方块</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">isValidBlock</span><span class="params">(BlockState p_39788_)</span>;</span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">ItemCombinerMenu</span><span class="params">(<span class="meta">@Nullable</span> MenuType&lt;?&gt; p_39773_, <span class="type">int</span> p_39774_, Inventory p_39775_, ContainerLevelAccess p_39776_)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>(p_39773_, p_39774_);</span><br><span class="line">      <span class="built_in">this</span>.access = p_39776_;</span><br><span class="line">      <span class="built_in">this</span>.player = p_39775_.player;</span><br><span class="line">      <span class="type">ItemCombinerMenuSlotDefinition</span> <span class="variable">itemcombinermenuslotdefinition</span> <span class="operator">=</span> <span class="built_in">this</span>.createInputSlotDefinitions();</span><br><span class="line">      <span class="built_in">this</span>.inputSlots = <span class="built_in">this</span>.createContainer(itemcombinermenuslotdefinition.getNumOfInputSlots());</span><br><span class="line">      <span class="built_in">this</span>.inputSlotIndexes = itemcombinermenuslotdefinition.getInputSlotIndexes();</span><br><span class="line">      <span class="built_in">this</span>.resultSlotIndex = itemcombinermenuslotdefinition.getResultSlotIndex();</span><br><span class="line">      <span class="built_in">this</span>.createInputSlots(itemcombinermenuslotdefinition);</span><br><span class="line">      <span class="built_in">this</span>.createResultSlot(itemcombinermenuslotdefinition);</span><br><span class="line">      <span class="built_in">this</span>.createInventorySlots(p_39775_);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 创建输入slot</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">createInputSlots</span><span class="params">(ItemCombinerMenuSlotDefinition p_267172_)</span> &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">final</span> ItemCombinerMenuSlotDefinition.SlotDefinition itemcombinermenuslotdefinition$slotdefinition : p_267172_.getSlots()) &#123;</span><br><span class="line">         <span class="built_in">this</span>.addSlot(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Slot</span>(</span><br><span class="line">               <span class="built_in">this</span>.inputSlots,</span><br><span class="line">               itemcombinermenuslotdefinition$slotdefinition.slotIndex(),</span><br><span class="line">               itemcombinermenuslotdefinition$slotdefinition.x(),</span><br><span class="line">               itemcombinermenuslotdefinition$slotdefinition.y()</span><br><span class="line">            ) &#123;</span><br><span class="line">                <span class="comment">// 能否被放入</span></span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">mayPlace</span><span class="params">(ItemStack p_267156_)</span> &#123;</span><br><span class="line">                  <span class="keyword">return</span> itemcombinermenuslotdefinition$slotdefinition.mayPlace().test(p_267156_);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         );</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 创建输出的slot</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">createResultSlot</span><span class="params">(ItemCombinerMenuSlotDefinition p_267000_)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.addSlot(<span class="keyword">new</span> <span class="title class_">Slot</span>(<span class="built_in">this</span>.resultSlots, p_267000_.getResultSlot().slotIndex(), p_267000_.getResultSlot().x(), p_267000_.getResultSlot().y()) &#123;</span><br><span class="line">          <span class="comment">// 能否被放置</span></span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">mayPlace</span><span class="params">(ItemStack p_39818_)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">         &#125;</span><br><span class="line"><span class="comment">// 能否被拿起，调用抽象方法，由子类实现</span></span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">mayPickup</span><span class="params">(Player p_39813_)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ItemCombinerMenu.<span class="built_in">this</span>.mayPickup(p_39813_, <span class="built_in">this</span>.hasItem());</span><br><span class="line">         &#125;</span><br><span class="line"><span class="comment">// 能否被拿出，调用抽象方法，由子类实现</span></span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onTake</span><span class="params">(Player p_150604_, ItemStack p_150605_)</span> &#123;</span><br><span class="line">            ItemCombinerMenu.<span class="built_in">this</span>.onTake(p_150604_, p_150605_);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 创建玩家的背包</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">createInventorySlots</span><span class="params">(Inventory p_267325_)</span> &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j) &#123;</span><br><span class="line">            <span class="built_in">this</span>.addSlot(<span class="keyword">new</span> <span class="title class_">Slot</span>(p_267325_, j + i * <span class="number">9</span> + <span class="number">9</span>, <span class="number">8</span> + j * <span class="number">18</span>, <span class="number">84</span> + i * <span class="number">18</span>));</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">9</span>; ++k) &#123;</span><br><span class="line">         <span class="built_in">this</span>.addSlot(<span class="keyword">new</span> <span class="title class_">Slot</span>(p_267325_, k, <span class="number">8</span> + k * <span class="number">18</span>, <span class="number">142</span>));</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 合成结果，子类实现</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">createResult</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 输入的slot创建函数，子类实现</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">abstract</span> ItemCombinerMenuSlotDefinition <span class="title function_">createInputSlotDefinitions</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 创建simplecontainer</span></span><br><span class="line">   <span class="keyword">private</span> SimpleContainer <span class="title function_">createContainer</span><span class="params">(<span class="type">int</span> p_267204_)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleContainer</span>(p_267204_) &#123;</span><br><span class="line">          <span class="comment">// 重写方法，当内容改变时候，设置赃位</span></span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setChanged</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.setChanged();</span><br><span class="line">            ItemCombinerMenu.<span class="built_in">this</span>.slotsChanged(<span class="built_in">this</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//slots改变时候，如果不是输入slot则调用createresult方法。</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">slotsChanged</span><span class="params">(Container p_39778_)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>.slotsChanged(p_39778_);</span><br><span class="line">      <span class="keyword">if</span> (p_39778_ == <span class="built_in">this</span>.inputSlots) &#123;</span><br><span class="line">         <span class="built_in">this</span>.createResult();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 当移除当前的menu时候</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removed</span><span class="params">(Player p_39790_)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>.removed(p_39790_);</span><br><span class="line">      <span class="built_in">this</span>.access.execute((p_39796_, p_39797_) -&gt; <span class="built_in">this</span>.clearContainer(p_39790_, <span class="built_in">this</span>.inputSlots));</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 判断是否合法位置打开menu</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">stillValid</span><span class="params">(Player p_39780_)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.access</span><br><span class="line">         .evaluate(</span><br><span class="line">            (p_39785_, p_39786_) -&gt; !<span class="built_in">this</span>.isValidBlock(p_39785_.getBlockState(p_39786_))</span><br><span class="line">                  ? <span class="literal">false</span></span><br><span class="line">                  : p_39780_.distanceToSqr((<span class="type">double</span>)p_39786_.getX() + <span class="number">0.5</span>, (<span class="type">double</span>)p_39786_.getY() + <span class="number">0.5</span>, (<span class="type">double</span>)p_39786_.getZ() + <span class="number">0.5</span>) &lt;= <span class="number">64.0</span>,</span><br><span class="line">            <span class="literal">true</span></span><br><span class="line">         );</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// shift的快速移动</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> ItemStack <span class="title function_">quickMoveStack</span><span class="params">(Player p_39792_, <span class="type">int</span> p_39793_)</span> &#123;</span><br><span class="line">      <span class="type">ItemStack</span> <span class="variable">itemstack</span> <span class="operator">=</span> ItemStack.EMPTY;</span><br><span class="line">      <span class="type">Slot</span> <span class="variable">slot</span> <span class="operator">=</span> <span class="built_in">this</span>.slots.get(p_39793_);</span><br><span class="line">      <span class="keyword">if</span> (slot != <span class="literal">null</span> &amp;&amp; slot.hasItem()) &#123;</span><br><span class="line">         <span class="type">ItemStack</span> <span class="variable">itemstack1</span> <span class="operator">=</span> slot.getItem();</span><br><span class="line">         itemstack = itemstack1.copy();</span><br><span class="line">         <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="built_in">this</span>.getInventorySlotStart();</span><br><span class="line">         <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="built_in">this</span>.getUseRowEnd();</span><br><span class="line">         <span class="keyword">if</span> (p_39793_ == <span class="built_in">this</span>.getResultSlot()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">this</span>.moveItemStackTo(itemstack1, i, j, <span class="literal">true</span>)) &#123;</span><br><span class="line">               <span class="keyword">return</span> ItemStack.EMPTY;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            slot.onQuickCraft(itemstack1, itemstack);</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.inputSlotIndexes.contains(p_39793_)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">this</span>.moveItemStackTo(itemstack1, i, j, <span class="literal">false</span>)) &#123;</span><br><span class="line">               <span class="keyword">return</span> ItemStack.EMPTY;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.canMoveIntoInputSlots(itemstack1) &amp;&amp; p_39793_ &gt;= <span class="built_in">this</span>.getInventorySlotStart() &amp;&amp; p_39793_ &lt; <span class="built_in">this</span>.getUseRowEnd()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="built_in">this</span>.getSlotToQuickMoveTo(itemstack);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">this</span>.moveItemStackTo(itemstack1, k, <span class="built_in">this</span>.getResultSlot(), <span class="literal">false</span>)) &#123;</span><br><span class="line">               <span class="keyword">return</span> ItemStack.EMPTY;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p_39793_ &gt;= <span class="built_in">this</span>.getInventorySlotStart() &amp;&amp; p_39793_ &lt; <span class="built_in">this</span>.getInventorySlotEnd()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">this</span>.moveItemStackTo(itemstack1, <span class="built_in">this</span>.getUseRowStart(), <span class="built_in">this</span>.getUseRowEnd(), <span class="literal">false</span>)) &#123;</span><br><span class="line">               <span class="keyword">return</span> ItemStack.EMPTY;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p_39793_ &gt;= <span class="built_in">this</span>.getUseRowStart()</span><br><span class="line">            &amp;&amp; p_39793_ &lt; <span class="built_in">this</span>.getUseRowEnd()</span><br><span class="line">            &amp;&amp; !<span class="built_in">this</span>.moveItemStackTo(itemstack1, <span class="built_in">this</span>.getInventorySlotStart(), <span class="built_in">this</span>.getInventorySlotEnd(), <span class="literal">false</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> ItemStack.EMPTY;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (itemstack1.isEmpty()) &#123;</span><br><span class="line">            slot.setByPlayer(ItemStack.EMPTY);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            slot.setChanged();</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (itemstack1.getCount() == itemstack.getCount()) &#123;</span><br><span class="line">            <span class="keyword">return</span> ItemStack.EMPTY;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         slot.onTake(p_39792_, itemstack1);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> itemstack;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">canMoveIntoInputSlots</span><span class="params">(ItemStack p_39787_)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSlotToQuickMoveTo</span><span class="params">(ItemStack p_267159_)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.inputSlots.isEmpty() ? <span class="number">0</span> : <span class="built_in">this</span>.inputSlotIndexes.get(<span class="number">0</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getResultSlot</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.resultSlotIndex;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getInventorySlotStart</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.getResultSlot() + <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getInventorySlotEnd</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.getInventorySlotStart() + <span class="number">27</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getUseRowStart</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.getInventorySlotEnd();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getUseRowEnd</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.getUseRowStart() + <span class="number">9</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="ItemCombinerScreen类"><a href="#ItemCombinerScreen类" class="headerlink" title="ItemCombinerScreen类"></a>ItemCombinerScreen类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@OnlyIn(Dist.CLIENT)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ItemCombinerScreen</span>&lt;T <span class="keyword">extends</span> <span class="title class_">ItemCombinerMenu</span>&gt; <span class="keyword">extends</span> <span class="title class_">AbstractContainerScreen</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">ContainerListener</span> &#123;</span><br><span class="line">    <span class="comment">// menuResource</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> ResourceLocation menuResource;</span><br><span class="line"><span class="comment">// </span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">ItemCombinerScreen</span><span class="params">(T p_98901_, Inventory p_98902_, Component p_98903_, ResourceLocation p_98904_)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>(p_98901_, p_98902_, p_98903_);</span><br><span class="line">      <span class="built_in">this</span>.menuResource = p_98904_;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 子类实现</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">subInit</span><span class="params">()</span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// init函数</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>.init();</span><br><span class="line">      <span class="built_in">this</span>.subInit();</span><br><span class="line">      <span class="built_in">this</span>.menu.addSlotListener(<span class="built_in">this</span>);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 关闭scrren时候移除 SlotListener</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removed</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>.removed();</span><br><span class="line">      <span class="built_in">this</span>.menu.removeSlotListener(<span class="built_in">this</span>);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 渲染</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">render</span><span class="params">(GuiGraphics p_281810_, <span class="type">int</span> p_283312_, <span class="type">int</span> p_283420_, <span class="type">float</span> p_282956_)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>.render(p_281810_, p_283312_, p_283420_, p_282956_);</span><br><span class="line">      <span class="built_in">this</span>.renderFg(p_281810_, p_283312_, p_283420_, p_282956_);</span><br><span class="line">      <span class="built_in">this</span>.renderTooltip(p_281810_, p_283312_, p_283420_);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 渲染文字 子类实现</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">renderFg</span><span class="params">(GuiGraphics p_283399_, <span class="type">int</span> p_98928_, <span class="type">int</span> p_98929_, <span class="type">float</span> p_98930_)</span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 渲染背景图片，以及error图片</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">renderBg</span><span class="params">(GuiGraphics p_282749_, <span class="type">float</span> p_283494_, <span class="type">int</span> p_283098_, <span class="type">int</span> p_282054_)</span> &#123;</span><br><span class="line">      p_282749_.blit(<span class="built_in">this</span>.menuResource, <span class="built_in">this</span>.leftPos, <span class="built_in">this</span>.topPos, <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">this</span>.imageWidth, <span class="built_in">this</span>.imageHeight);</span><br><span class="line">      <span class="built_in">this</span>.renderErrorIcon(p_282749_, <span class="built_in">this</span>.leftPos, <span class="built_in">this</span>.topPos);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">renderErrorIcon</span><span class="params">(GuiGraphics p_281990_, <span class="type">int</span> p_266822_, <span class="type">int</span> p_267045_)</span>;</span><br><span class="line"><span class="comment">// 两个接口的方法</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dataChanged</span><span class="params">(AbstractContainerMenu p_169759_, <span class="type">int</span> p_169760_, <span class="type">int</span> p_169761_)</span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">slotChanged</span><span class="params">(AbstractContainerMenu p_98910_, <span class="type">int</span> p_98911_, ItemStack p_98912_)</span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 我的世界 </tag>
            
            <tag> Java </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14-pytorch-model understanding with captum</title>
      <link href="/2023/11/15/14-pytorch-model-understanding-with-captum/"/>
      <url>/2023/11/15/14-pytorch-model-understanding-with-captum/</url>
      
        <content type="html"><![CDATA[<h1 id="MODEL-UNDERSTANDING-WITH-CAPTUM"><a href="#MODEL-UNDERSTANDING-WITH-CAPTUM" class="headerlink" title="MODEL UNDERSTANDING WITH CAPTUM"></a>MODEL UNDERSTANDING WITH CAPTUM</h1><p>Captum（拉丁语中的“理解”）是一个开源、可扩展的库，用于构建在 PyTorch 上的模型可解释性。</p><p>随着模型复杂性的增加以及由此导致的透明度的缺乏，模型可解释性方法变得越来越重要。模型理解既是一个活跃的研究领域，也是使用机器学习跨行业实际应用的重点领域。 Captum 提供最先进的算法，包括集成梯度，为研究人员和开发人员提供一种简单的方法来了解哪些特征有助于模型的输出。</p><p>captum.ai 网站上提供了完整的文档、API 参考以及针对特定主题的一套教程。</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Captum 的模型可解释性方法是根据归因。 Captum 中提供三种归因：</p><ul><li>特征归因<strong>Feature Attribution</strong> 试图根据生成特定输出的输入的特征来解释该输出。根据评论中的某些单词来解释电影评论是正面还是负面，就是特征归因的一个例子。</li><li>层归因<strong>Layer Attribution</strong> 检查特定输入后模型隐藏层的活动。在层属性示例中检查卷积层响应于输入图像的空间映射输出。</li><li>神经元<strong>Neuron Attribution</strong>归因与层归因类似，但侧重于单个神经元的活动。</li></ul><p>在这个交互式笔记本中，我们将了解特征归因和图层归因。</p><p>三种归因类型中的每一种都有多种与其关联的归因算法。许多归因算法分为两大类：</p><ul><li>基于梯度的算法计算模型输出、层输出或神经元激活相对于输入的后向梯度。积分梯度（针对特征）、层梯度*激活和神经元电导都是基于梯度的算法。</li><li>基于扰动的算法检查模型、层或神经元的输出随输入变化的变化。输入扰动可以是定向的或随机的。遮挡、特征消融和特征排列都是基于扰动的算法。</li></ul><p>我们将在下面研究这两种类型的算法。</p><p>特别是在涉及大型模型的情况下，以易于将归因数据与正在检查的输入特征相关联的方式可视化归因数据可能很有价值。虽然当然可以使用 Matplotlib、Plotly 或类似工具创建您自己的可视化，但 Captum 提供了特定于其属性的增强工具：</p><ul><li><code>captum.attr.visualization</code> 模块（下面导入为 <code>viz</code> ）提供了有用的功能来可视化与图像相关的属性。</li><li>Captum Insights 是 Captum 之上的一个易于使用的 API，它提供了一个可视化小部件，其中包含针对图像、文本和任意模型类型的现成可视化效果。</li></ul><p>这两个可视化工具集都将在本笔记本中演示。前几个示例将重点关注计算机视觉用例，但最后的 Captum Insights 部分将演示多模型、视觉问答模型中归因的可视化。</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>在开始之前，您需要有一个 Python 环境：</p><ul><li>Python 版本 3.6 或更高版本</li><li>对于 Captum Insights 示例，Flask 1.1 或更高版本以及 Flask-Compress（建议使用最新版本）</li><li>PyTorch 1.2 或更高版本（推荐最新版本）</li><li>TorchVision 0.6 或更高版本（推荐最新版本）</li><li>Captum（推荐最新版本）</li><li>Matplotlib 版本 3.3.4，因为 Captum 当前使用 Matplotlib 函数，其参数已在更高版本中重命名</li></ul><p>要在 Anaconda 或 pip 虚拟环境中安装 Captum，请使用以下适合您环境的命令：</p><p>With <code>conda</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda install pytorch torchvision captum flask-compress matplotlib=<span class="number">3.3</span><span class="number">.4</span> -c pytorch</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>With <code>pip</code>: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install torch torchvision captum matplotlib==<span class="number">3.3</span><span class="number">.4</span> Flask-Compress</span><br></pre></td></tr></table></figure><h2 id="A-First-Example"><a href="#A-First-Example" class="headerlink" title="A First Example"></a>A First Example</h2><p>首先，让我们举一个简单、直观的例子。我们将从在 ImageNet 数据集上预训练的 ResNet 模型开始。我们将获得测试输入，并使用不同的特征归因算法来检查输入图像如何影响输出，并查看一些测试图像的输入归因图的有用可视化。</p><p>首先，一些导入库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">import</span> torchvision.models <span class="keyword">as</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> captum</span><br><span class="line"><span class="keyword">from</span> captum.attr <span class="keyword">import</span> IntegratedGradients, Occlusion, LayerGradCam, LayerAttribution</span><br><span class="line"><span class="keyword">from</span> captum.attr <span class="keyword">import</span> visualization <span class="keyword">as</span> viz</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os, sys</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib.colors <span class="keyword">import</span> LinearSegmentedColormap</span><br></pre></td></tr></table></figure><p>现在我们将使用 TorchVision 模型库下载预训练的 ResNet。由于我们没有进行训练，因此我们现在将其置于评估模式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = models.resnet18(weights=<span class="string">&#x27;IMAGENET1K_V1&#x27;</span>)</span><br><span class="line">model = model.<span class="built_in">eval</span>()</span><br></pre></td></tr></table></figure><p>您获得此交互式笔记本的位置还应该有一个 <code>img</code> 文件夹，其中包含文件 <code>cat.jpg</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test_img = Image.<span class="built_in">open</span>(<span class="string">&#x27;img/cat.jpg&#x27;</span>)</span><br><span class="line">test_img_data = np.asarray(test_img)</span><br><span class="line">plt.imshow(test_img_data)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>我们的 ResNet 模型是在 ImageNet 数据集上进行训练的，并期望图像具有一定的大小，通道数据标准化为特定的值范围。我们还将提取我们的模型识别的类别的人类可读标签列表 - 该列表也应该位于 <code>img</code> 文件夹中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># model expects 224x224 3-color image</span></span><br><span class="line">transform = transforms.Compose([</span><br><span class="line"> transforms.Resize(<span class="number">224</span>),</span><br><span class="line"> transforms.CenterCrop(<span class="number">224</span>),</span><br><span class="line"> transforms.ToTensor()</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># standard ImageNet normalization</span></span><br><span class="line">transform_normalize = transforms.Normalize(</span><br><span class="line">     mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>],</span><br><span class="line">     std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>]</span><br><span class="line"> )</span><br><span class="line"></span><br><span class="line">transformed_img = transform(test_img)</span><br><span class="line">input_img = transform_normalize(transformed_img)</span><br><span class="line">input_img = input_img.unsqueeze(<span class="number">0</span>) <span class="comment"># the model requires a dummy batch dimension</span></span><br><span class="line"></span><br><span class="line">labels_path = <span class="string">&#x27;img/imagenet_class_index.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(labels_path) <span class="keyword">as</span> json_data:</span><br><span class="line">    idx_to_labels = json.load(json_data)</span><br></pre></td></tr></table></figure><p>现在，我们可以问一个问题：我们的模型认为这张图像代表什么？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">output = model(input_img)</span><br><span class="line">output = F.softmax(output, dim=<span class="number">1</span>)</span><br><span class="line">prediction_score, pred_label_idx = torch.topk(output, <span class="number">1</span>)</span><br><span class="line">pred_label_idx.squeeze_()</span><br><span class="line">predicted_label = idx_to_labels[<span class="built_in">str</span>(pred_label_idx.item())][<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Predicted:&#x27;</span>, predicted_label, <span class="string">&#x27;(&#x27;</span>, prediction_score.squeeze().item(), <span class="string">&#x27;)&#x27;</span>)</span><br></pre></td></tr></table></figure><p>我们已经确认 ResNet 认为我们的猫图像实际上就是一只猫。但为什么模型认为这是猫的图像呢？</p><p>为了找到这个问题的答案，我们求助于 Captum。</p><h2 id="Feature-Attribution-with-Integrated-Gradients"><a href="#Feature-Attribution-with-Integrated-Gradients" class="headerlink" title="Feature Attribution with Integrated Gradients"></a>Feature Attribution with Integrated Gradients</h2><p>特征归因将特定输出归因于输入的特征。它使用特定的输入（这里是我们的测试图像）来生成每个输入特征与特定输出特征的相对重要性的地图。</p><p>集成梯度是 Captum 中可用的特征归因算法之一。积分梯度通过近似模型输出相对于输入的梯度积分，为每个输入特征分配重要性分数。</p><p>在我们的例子中，我们将采用输出向量的特定元素 - 即指示模型对其所选类别的置信度的元素 - 并使用积分梯度来了解输入图像的哪些部分对该输出做出了贡献。</p><p>一旦我们从积分梯度中获得重要性图，我们将使用 Captum 中的可视化工具来提供重要性图的有用表示。 Captum 的 <code>visualize_image_attr()</code> 功能提供了多种用于自定义归因数据显示的选项。在这里，我们传入一个自定义的 Matplotlib 颜色图。</p><p>使用 <code>integrated_gradients.attribute()</code> 调用运行单元通常需要一两分钟。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Initialize the attribution algorithm with the model</span></span><br><span class="line">integrated_gradients = IntegratedGradients(model)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ask the algorithm to attribute our output target to</span></span><br><span class="line">attributions_ig = integrated_gradients.attribute(input_img, target=pred_label_idx, n_steps=<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Show the original image for comparison</span></span><br><span class="line">_ = viz.visualize_image_attr(<span class="literal">None</span>, np.transpose(transformed_img.squeeze().cpu().detach().numpy(), (<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>)),</span><br><span class="line">                      method=<span class="string">&quot;original_image&quot;</span>, title=<span class="string">&quot;Original Image&quot;</span>)</span><br><span class="line"></span><br><span class="line">default_cmap = LinearSegmentedColormap.from_list(<span class="string">&#x27;custom blue&#x27;</span>,</span><br><span class="line">                                                 [(<span class="number">0</span>, <span class="string">&#x27;#ffffff&#x27;</span>),</span><br><span class="line">                                                  (<span class="number">0.25</span>, <span class="string">&#x27;#0000ff&#x27;</span>),</span><br><span class="line">                                                  (<span class="number">1</span>, <span class="string">&#x27;#0000ff&#x27;</span>)], N=<span class="number">256</span>)</span><br><span class="line"></span><br><span class="line">_ = viz.visualize_image_attr(np.transpose(attributions_ig.squeeze().cpu().detach().numpy(), (<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>)),</span><br><span class="line">                             np.transpose(transformed_img.squeeze().cpu().detach().numpy(), (<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>)),</span><br><span class="line">                             method=<span class="string">&#x27;heat_map&#x27;</span>,</span><br><span class="line">                             cmap=default_cmap,</span><br><span class="line">                             show_colorbar=<span class="literal">True</span>,</span><br><span class="line">                             sign=<span class="string">&#x27;positive&#x27;</span>,</span><br><span class="line">                             title=<span class="string">&#x27;Integrated Gradients&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在上图中，您应该看到积分梯度为我们提供了图像中猫位置周围最强的信号。</p><h2 id="Feature-Attribution-with-Occlusion"><a href="#Feature-Attribution-with-Occlusion" class="headerlink" title="Feature Attribution with Occlusion"></a>Feature Attribution with Occlusion</h2><p>基于梯度的归因方法有助于通过直接计算出相对于输入的输出变化来理解模型。基于扰动的归因方法通过引入输入变化来衡量对输出的影响，更直接地解决这个问题。闭塞就是这样一种方法。它涉及替换输入图像的部分，并检查对输出信号的影响。</p><p>下面，我们设置遮挡归因。与配置卷积神经网络类似，您可以指定目标区域的大小和步幅长度来确定各个测量的间距。我们将使用 <code>visualize_image_attr_multiple()</code> 可视化遮挡归因的输出，按区域显示正面和负面归因的热图，并使用正面归因区域掩盖原始图像。遮罩提供了一个非常有启发性的视图，让我们了解模型发现猫照片中的哪些区域最“像猫”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">occlusion = Occlusion(model)</span><br><span class="line"></span><br><span class="line">attributions_occ = occlusion.attribute(input_img,</span><br><span class="line">                                       target=pred_label_idx,</span><br><span class="line">                                       strides=(<span class="number">3</span>, <span class="number">8</span>, <span class="number">8</span>),</span><br><span class="line">                                       sliding_window_shapes=(<span class="number">3</span>,<span class="number">15</span>, <span class="number">15</span>),</span><br><span class="line">                                       baselines=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_ = viz.visualize_image_attr_multiple(np.transpose(attributions_occ.squeeze().cpu().detach().numpy(), (<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>)),</span><br><span class="line">                                      np.transpose(transformed_img.squeeze().cpu().detach().numpy(), (<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>)),</span><br><span class="line">                                      [<span class="string">&quot;original_image&quot;</span>, <span class="string">&quot;heat_map&quot;</span>, <span class="string">&quot;heat_map&quot;</span>, <span class="string">&quot;masked_image&quot;</span>],</span><br><span class="line">                                      [<span class="string">&quot;all&quot;</span>, <span class="string">&quot;positive&quot;</span>, <span class="string">&quot;negative&quot;</span>, <span class="string">&quot;positive&quot;</span>],</span><br><span class="line">                                      show_colorbar=<span class="literal">True</span>,</span><br><span class="line">                                      titles=[<span class="string">&quot;Original&quot;</span>, <span class="string">&quot;Positive Attribution&quot;</span>, <span class="string">&quot;Negative Attribution&quot;</span>, <span class="string">&quot;Masked&quot;</span>],</span><br><span class="line">                                      fig_size=(<span class="number">18</span>, <span class="number">6</span>)</span><br><span class="line">                                     )</span><br></pre></td></tr></table></figure><p>我们再次看到包含猫的图像区域具有更大的重要性。</p><h2 id="Layer-Attribution-with-Layer-GradCAM"><a href="#Layer-Attribution-with-Layer-GradCAM" class="headerlink" title="Layer Attribution with Layer GradCAM"></a>Layer Attribution with Layer GradCAM</h2><p>层归因允许您将模型中隐藏层的活动归因于输入的特征。下面，我们将使用层归因算法来检查模型中卷积层之一的活动。</p><p>GradCAM 计算目标输出相对于给定层的梯度、每个输出通道（输出的维度 2）的平均值，并将每个通道的平均梯度乘以层激活。将所有通道的结果相加。 GradCAM 是为卷积网络设计的；由于卷积层的活动通常在空间上映射到输入，因此 GradCAM 属性通常会被上采样并用于屏蔽输入。</p><p>层归因的设置与输入归因类似，不同之处在于除了模型之外，您还必须在模型中指定要检查的隐藏层。如上所述，当我们调用 <code>attribute()</code> 时，我们指定感兴趣的目标类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">layer_gradcam = LayerGradCam(model, model.layer3[<span class="number">1</span>].conv2)</span><br><span class="line">attributions_lgc = layer_gradcam.attribute(input_img, target=pred_label_idx)</span><br><span class="line"></span><br><span class="line">_ = viz.visualize_image_attr(attributions_lgc[<span class="number">0</span>].cpu().permute(<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>).detach().numpy(),</span><br><span class="line">                             sign=<span class="string">&quot;all&quot;</span>,</span><br><span class="line">                             title=<span class="string">&quot;Layer 3 Block 1 Conv 2&quot;</span>)</span><br></pre></td></tr></table></figure><p>我们将使用 LayerAttribution 基类中的便捷方法 <code>interpolate()</code> 对该属性数据进行上采样，以便与输入图像进行比较。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">upsamp_attr_lgc = LayerAttribution.interpolate(attributions_lgc, input_img.shape[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(attributions_lgc.shape)</span><br><span class="line"><span class="built_in">print</span>(upsamp_attr_lgc.shape)</span><br><span class="line"><span class="built_in">print</span>(input_img.shape)</span><br><span class="line"></span><br><span class="line">_ = viz.visualize_image_attr_multiple(upsamp_attr_lgc[<span class="number">0</span>].cpu().permute(<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>).detach().numpy(),</span><br><span class="line">                                      transformed_img.permute(<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>).numpy(),</span><br><span class="line">                                      [<span class="string">&quot;original_image&quot;</span>,<span class="string">&quot;blended_heat_map&quot;</span>,<span class="string">&quot;masked_image&quot;</span>],</span><br><span class="line">                                      [<span class="string">&quot;all&quot;</span>,<span class="string">&quot;positive&quot;</span>,<span class="string">&quot;positive&quot;</span>],</span><br><span class="line">                                      show_colorbar=<span class="literal">True</span>,</span><br><span class="line">                                      titles=[<span class="string">&quot;Original&quot;</span>, <span class="string">&quot;Positive Attribution&quot;</span>, <span class="string">&quot;Masked&quot;</span>],</span><br><span class="line">                                      fig_size=(<span class="number">18</span>, <span class="number">6</span>))</span><br></pre></td></tr></table></figure><p>诸如此类的可视化可以让您对隐藏层如何响应输入有新的见解。</p><h2 id="Visualization-with-Captum-Insights"><a href="#Visualization-with-Captum-Insights" class="headerlink" title="Visualization with Captum Insights"></a>Visualization with Captum Insights</h2><p>Captum Insights 是一个构建在 Captum 之上的可解释性可视化小部件，旨在促进模型理解。 Captum Insights 跨图像、文本和其他特征工作，帮助用户了解特征归因。它允许您可视化多个输入&#x2F;输出对的归因，并提供图像、文本和任意数据的可视化工具。</p><p>在笔记本的这一部分中，我们将使用 Captum Insights 可视化多个图像分类推理。</p><p>首先，让我们收集一些图像，看看模型对它们的看法。为了增加多样性，我们将带上我们的猫、茶壶和三叶虫化石：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">imgs = [<span class="string">&#x27;img/cat.jpg&#x27;</span>, <span class="string">&#x27;img/teapot.jpg&#x27;</span>, <span class="string">&#x27;img/trilobite.jpg&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> img <span class="keyword">in</span> imgs:</span><br><span class="line">    img = Image.<span class="built_in">open</span>(img)</span><br><span class="line">    transformed_img = transform(img)</span><br><span class="line">    input_img = transform_normalize(transformed_img)</span><br><span class="line">    input_img = input_img.unsqueeze(<span class="number">0</span>) <span class="comment"># the model requires a dummy batch dimension</span></span><br><span class="line"></span><br><span class="line">    output = model(input_img)</span><br><span class="line">    output = F.softmax(output, dim=<span class="number">1</span>)</span><br><span class="line">    prediction_score, pred_label_idx = torch.topk(output, <span class="number">1</span>)</span><br><span class="line">    pred_label_idx.squeeze_()</span><br><span class="line">    predicted_label = idx_to_labels[<span class="built_in">str</span>(pred_label_idx.item())][<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Predicted:&#x27;</span>, predicted_label, <span class="string">&#x27;/&#x27;</span>, pred_label_idx.item(), <span class="string">&#x27; (&#x27;</span>, prediction_score.squeeze().item(), <span class="string">&#x27;)&#x27;</span>)</span><br></pre></td></tr></table></figure><p>……看起来我们的模型正确地识别了它们 - 但当然，我们想更深入地挖掘。为此，我们将使用 Captum Insights 小部件，我们使用下面导入的 <code>AttributionVisualizer</code> 对象对其进行配置。 <code>AttributionVisualizer</code> 需要批量数据，因此我们将引入 Captum 的 <code>Batch</code> 帮助器类。我们将专门查看图像，因此我们还将导入 <code>ImageFeature</code> 。</p><p>我们使用以下参数配置 <code>AttributionVisualizer</code> ：</p><ul><li>一系列要检查的模型（在我们的例子中，只有一个）</li><li>评分函数，允许 Captum Insights 从模型中提取前 k 个预测</li><li>我们的模型所训练的类的有序的、人类可读的列表</li><li>要查找的功能列表 - 在我们的例子中是 <code>ImageFeature</code></li><li>数据集，它是一个可迭代对象，返回批量输入和标签 - 就像您用于训练一样</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> captum.insights <span class="keyword">import</span> AttributionVisualizer, Batch</span><br><span class="line"><span class="keyword">from</span> captum.insights.attr_vis.features <span class="keyword">import</span> ImageFeature</span><br><span class="line"></span><br><span class="line"><span class="comment"># Baseline is all-zeros input - this may differ depending on your data</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">baseline_func</span>(<span class="params"><span class="built_in">input</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">input</span> * <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># merging our image transforms from above</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">full_img_transform</span>(<span class="params"><span class="built_in">input</span></span>):</span><br><span class="line">    i = Image.<span class="built_in">open</span>(<span class="built_in">input</span>)</span><br><span class="line">    i = transform(i)</span><br><span class="line">    i = transform_normalize(i)</span><br><span class="line">    i = i.unsqueeze(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input_imgs = torch.cat(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> i: full_img_transform(i), imgs)), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">visualizer = AttributionVisualizer(</span><br><span class="line">    models=[model],</span><br><span class="line">    score_func=<span class="keyword">lambda</span> o: torch.nn.functional.softmax(o, <span class="number">1</span>),</span><br><span class="line">    classes=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> k: idx_to_labels[k][<span class="number">1</span>], idx_to_labels.keys())),</span><br><span class="line">    features=[</span><br><span class="line">        ImageFeature(</span><br><span class="line">            <span class="string">&quot;Photo&quot;</span>,</span><br><span class="line">            baseline_transforms=[baseline_func],</span><br><span class="line">            input_transforms=[],</span><br><span class="line">        )</span><br><span class="line">    ],</span><br><span class="line">    dataset=[Batch(input_imgs, labels=[<span class="number">282</span>,<span class="number">849</span>,<span class="number">69</span>])]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>请注意，与我们上面的归因不同，运行上面的单元格根本不需要太多时间。这是因为 Captum Insights 允许您在可视化小部件中配置不同的归因算法，然后它将计算并显示归因。该过程将需要几分钟。</p><p>运行下面的单元格将呈现 Captum Insights 小部件。然后，您可以选择归因方法及其参数，根据预测类别或预测正确性过滤模型响应，查看模型的预测以及相关概率，并查看与原始图像相比的归因热图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">visualizer.render()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13-pytorch-training with pytorch</title>
      <link href="/2023/11/15/13-pytorch-training-with-pytorch/"/>
      <url>/2023/11/15/13-pytorch-training-with-pytorch/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>在过去的视频中，我们讨论并演示了：</p><ul><li>使用 torch.nn 模块的神经网络层和函数构建模型</li><li>自动梯度计算的机制，这是基于梯度的模型训练的核心</li><li>使用 TensorBoard 可视化训练进度和其他活动</li></ul><p>在本视频中，我们将向您的库存添加一些新工具：</p><ul><li>我们将熟悉数据集和数据加载器抽象，以及它们如何简化在训练循环期间向模型提供数据的过程</li><li>我们将讨论特定的损失函数以及何时使用它们</li><li>我们将了解 PyTorch 优化器，它实现根据损失函数的结果调整模型权重的算法</li></ul><p>最后，我们将把所有这些放在一起，并看到完整的 PyTorch 训练循环的实际运行。</p><h2 id="Dataset-and-DataLoader"><a href="#Dataset-and-DataLoader" class="headerlink" title="Dataset and DataLoader"></a>Dataset and DataLoader</h2><p><code>Dataset</code> 和 <code>DataLoader</code> 类封装了从存储中提取数据并将其批量暴露给训练循环的过程。</p><p><code>Dataset</code> 负责访问和处理单个数据实例。</p><p><code>DataLoader</code> 从 <code>Dataset</code> 中提取数据实例（自动或使用您定义的采样器），批量收集它们，然后返回它们以供训练循环使用。 <code>DataLoader</code> 适用于所有类型的数据集，无论它们包含什么类型的数据。</p><p>在本教程中，我们将使用 TorchVision 提供的 Fashion-MNIST 数据集。我们使用 <code>torchvision.transforms.Normalize()</code> 对图像图块内容的分布进行零中心和标准化，并下载训练和验证数据分割。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"></span><br><span class="line"><span class="comment"># PyTorch TensorBoard support</span></span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">transform = transforms.Compose(</span><br><span class="line">    [transforms.ToTensor(),</span><br><span class="line">    transforms.Normalize((<span class="number">0.5</span>,), (<span class="number">0.5</span>,))])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create datasets for training &amp; validation, download if necessary</span></span><br><span class="line">training_set = torchvision.datasets.FashionMNIST(<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">True</span>, transform=transform, download=<span class="literal">True</span>)</span><br><span class="line">validation_set = torchvision.datasets.FashionMNIST(<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">False</span>, transform=transform, download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create data loaders for our datasets; shuffle for training, not for validation</span></span><br><span class="line">training_loader = torch.utils.data.DataLoader(training_set, batch_size=<span class="number">4</span>, shuffle=<span class="literal">True</span>)</span><br><span class="line">validation_loader = torch.utils.data.DataLoader(validation_set, batch_size=<span class="number">4</span>, shuffle=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Class labels</span></span><br><span class="line">classes = (<span class="string">&#x27;T-shirt/top&#x27;</span>, <span class="string">&#x27;Trouser&#x27;</span>, <span class="string">&#x27;Pullover&#x27;</span>, <span class="string">&#x27;Dress&#x27;</span>, <span class="string">&#x27;Coat&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sandal&#x27;</span>, <span class="string">&#x27;Shirt&#x27;</span>, <span class="string">&#x27;Sneaker&#x27;</span>, <span class="string">&#x27;Bag&#x27;</span>, <span class="string">&#x27;Ankle Boot&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Report split sizes</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Training set has &#123;&#125; instances&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(training_set)))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Validation set has &#123;&#125; instances&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(validation_set)))</span><br></pre></td></tr></table></figure><p>与往常一样，让我们将数据可视化作为健全性检查：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># Helper function for inline image display</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matplotlib_imshow</span>(<span class="params">img, one_channel=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="keyword">if</span> one_channel:</span><br><span class="line">        img = img.mean(dim=<span class="number">0</span>)</span><br><span class="line">    img = img / <span class="number">2</span> + <span class="number">0.5</span>     <span class="comment"># unnormalize</span></span><br><span class="line">    npimg = img.numpy()</span><br><span class="line">    <span class="keyword">if</span> one_channel:</span><br><span class="line">        plt.imshow(npimg, cmap=<span class="string">&quot;Greys&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        plt.imshow(np.transpose(npimg, (<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>)))</span><br><span class="line"></span><br><span class="line">dataiter = <span class="built_in">iter</span>(training_loader)</span><br><span class="line">images, labels = <span class="built_in">next</span>(dataiter)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a grid from the images and show them</span></span><br><span class="line">img_grid = torchvision.utils.make_grid(images)</span><br><span class="line">matplotlib_imshow(img_grid, one_channel=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;  &#x27;</span>.join(classes[labels[j]] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)))</span><br></pre></td></tr></table></figure><h2 id="The-Model"><a href="#The-Model" class="headerlink" title="The Model"></a>The Model</h2><p>我们将在本示例中使用的模型是 LeNet-5 的变体 - 如果您看过本系列之前的视频，它应该很熟悉。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"><span class="comment"># PyTorch models inherit from torch.nn.Module</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GarmentClassifier</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(GarmentClassifier, self).__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">1</span>, <span class="number">6</span>, <span class="number">5</span>)</span><br><span class="line">        self.pool = nn.MaxPool2d(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="number">6</span>, <span class="number">16</span>, <span class="number">5</span>)</span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">16</span> * <span class="number">4</span> * <span class="number">4</span>, <span class="number">120</span>)</span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">120</span>, <span class="number">84</span>)</span><br><span class="line">        self.fc3 = nn.Linear(<span class="number">84</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.pool(F.relu(self.conv1(x)))</span><br><span class="line">        x = self.pool(F.relu(self.conv2(x)))</span><br><span class="line">        x = x.view(-<span class="number">1</span>, <span class="number">16</span> * <span class="number">4</span> * <span class="number">4</span>)</span><br><span class="line">        x = F.relu(self.fc1(x))</span><br><span class="line">        x = F.relu(self.fc2(x))</span><br><span class="line">        x = self.fc3(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model = GarmentClassifier()</span><br></pre></td></tr></table></figure><h2 id="Loss-Function"><a href="#Loss-Function" class="headerlink" title="Loss Function"></a>Loss Function</h2><p>对于这个例子，我们将使用交叉熵损失。出于演示目的，我们将创建一批虚拟输出和标签值，通过损失函数运行它们，并检查结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">loss_fn = torch.nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="comment"># NB: Loss functions expect data in batches, so we&#x27;re creating batches of 4</span></span><br><span class="line"><span class="comment"># Represents the model&#x27;s confidence in each of the 10 classes for a given input</span></span><br><span class="line">dummy_outputs = torch.rand(<span class="number">4</span>, <span class="number">10</span>)</span><br><span class="line"><span class="comment"># Represents the correct class among the 10 being tested</span></span><br><span class="line">dummy_labels = torch.tensor([<span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">7</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dummy_outputs)</span><br><span class="line"><span class="built_in">print</span>(dummy_labels)</span><br><span class="line"></span><br><span class="line">loss = loss_fn(dummy_outputs, dummy_labels)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Total loss for this batch: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(loss.item()))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tensor([[<span class="number">0.7026</span>, <span class="number">0.1489</span>, <span class="number">0.0065</span>, <span class="number">0.6841</span>, <span class="number">0.4166</span>, <span class="number">0.3980</span>, <span class="number">0.9849</span>, <span class="number">0.6701</span>, <span class="number">0.4601</span>,</span><br><span class="line">         <span class="number">0.8599</span>],</span><br><span class="line">        [<span class="number">0.7461</span>, <span class="number">0.3920</span>, <span class="number">0.9978</span>, <span class="number">0.0354</span>, <span class="number">0.9843</span>, <span class="number">0.0312</span>, <span class="number">0.5989</span>, <span class="number">0.2888</span>, <span class="number">0.8170</span>,</span><br><span class="line">         <span class="number">0.4150</span>],</span><br><span class="line">        [<span class="number">0.8408</span>, <span class="number">0.5368</span>, <span class="number">0.0059</span>, <span class="number">0.8931</span>, <span class="number">0.3942</span>, <span class="number">0.7349</span>, <span class="number">0.5500</span>, <span class="number">0.0074</span>, <span class="number">0.0554</span>,</span><br><span class="line">         <span class="number">0.1537</span>],</span><br><span class="line">        [<span class="number">0.7282</span>, <span class="number">0.8755</span>, <span class="number">0.3649</span>, <span class="number">0.4566</span>, <span class="number">0.8796</span>, <span class="number">0.2390</span>, <span class="number">0.9865</span>, <span class="number">0.7549</span>, <span class="number">0.9105</span>,</span><br><span class="line">         <span class="number">0.5427</span>]])</span><br><span class="line">tensor([<span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">7</span>])</span><br><span class="line">Total loss <span class="keyword">for</span> this batch: <span class="number">2.428950071334839</span></span><br></pre></td></tr></table></figure><h2 id="Optimizer"><a href="#Optimizer" class="headerlink" title="Optimizer"></a>Optimizer</h2><p>在这个例子中，我们将使用简单的动量随机梯度下降。</p><p>尝试此优化方案的一些变化可能会很有启发：</p><ul><li>学习率决定优化器采取的步骤的大小。就准确性和收敛时间而言，不同的学习率对训练结果有何影响？</li><li>动量将优化器推向多个步骤中梯度最强的方向。改变这个值对你的结果有什么影响？</li><li>尝试一些不同的优化算法，例如平均 SGD、Adagrad 或 Adam。您的结果有何不同？</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Optimizers specified in the torch.optim package</span></span><br><span class="line">optimizer = torch.optim.SGD(model.parameters(), lr=<span class="number">0.001</span>, momentum=<span class="number">0.9</span>)</span><br></pre></td></tr></table></figure><h2 id="The-Training-Loop"><a href="#The-Training-Loop" class="headerlink" title="The Training Loop"></a>The Training Loop</h2><p>下面，我们有一个执行一个训练周期的函数。它枚举来自 DataLoader 的数据，并在循环的每次传递中执行以下操作：</p><ul><li>从DataLoader获取一批训练数据</li><li>将优化器的梯度归零</li><li>执行推理 - 即从模型中获取输入批次的预测</li><li>计算该组预测与数据集标签的损失</li><li>计算学习权重的后向梯度</li><li>告诉优化器执行一个学习步骤 - 即根据我们选择的优化算法，根据观察到的该批次的梯度来调整模型的学习权重</li><li>它报告每 1000 批次的损失。</li><li>最后，它报告最后 1000 个批次的平均每批次损失，以便与验证运行进行比较</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">train_one_epoch</span>(<span class="params">epoch_index, tb_writer</span>):</span><br><span class="line">    running_loss = <span class="number">0.</span></span><br><span class="line">    last_loss = <span class="number">0.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Here, we use enumerate(training_loader) instead of</span></span><br><span class="line">    <span class="comment"># iter(training_loader) so that we can track the batch</span></span><br><span class="line">    <span class="comment"># index and do some intra-epoch reporting</span></span><br><span class="line">    <span class="keyword">for</span> i, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(training_loader):</span><br><span class="line">        <span class="comment"># Every data instance is an input + label pair</span></span><br><span class="line">        inputs, labels = data</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Zero your gradients for every batch!</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Make predictions for this batch</span></span><br><span class="line">        outputs = model(inputs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Compute the loss and its gradients</span></span><br><span class="line">        loss = loss_fn(outputs, labels)</span><br><span class="line">        loss.backward()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Adjust learning weights</span></span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Gather data and report</span></span><br><span class="line">        running_loss += loss.item()</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">1000</span> == <span class="number">999</span>:</span><br><span class="line">            last_loss = running_loss / <span class="number">1000</span> <span class="comment"># loss per batch</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;  batch &#123;&#125; loss: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i + <span class="number">1</span>, last_loss))</span><br><span class="line">            tb_x = epoch_index * <span class="built_in">len</span>(training_loader) + i + <span class="number">1</span></span><br><span class="line">            tb_writer.add_scalar(<span class="string">&#x27;Loss/train&#x27;</span>, last_loss, tb_x)</span><br><span class="line">            running_loss = <span class="number">0.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> last_loss</span><br></pre></td></tr></table></figure><h3 id="Per-Epoch-Activity"><a href="#Per-Epoch-Activity" class="headerlink" title="Per-Epoch Activity"></a>Per-Epoch Activity</h3><p>每个时期我们需要做一次以下几件事：</p><ul><li>通过检查一组未用于训练的数据的相对损失来执行验证，并报告这一点</li><li>保存模型的副本</li></ul><p>在这里，我们将在 TensorBoard 中进行报告。这将需要进入命令行来启动 TensorBoard，并在另一个浏览器选项卡中将其打开。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Initializing in a separate cell so we can easily add more epochs to the same run</span></span><br><span class="line">timestamp = datetime.now().strftime(<span class="string">&#x27;%Y%m%d_%H%M%S&#x27;</span>)</span><br><span class="line">writer = SummaryWriter(<span class="string">&#x27;runs/fashion_trainer_&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(timestamp))</span><br><span class="line">epoch_number = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">EPOCHS = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">best_vloss = <span class="number">1_000_000.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(EPOCHS):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;EPOCH &#123;&#125;:&#x27;</span>.<span class="built_in">format</span>(epoch_number + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Make sure gradient tracking is on, and do a pass over the data</span></span><br><span class="line">    model.train(<span class="literal">True</span>)</span><br><span class="line">    avg_loss = train_one_epoch(epoch_number, writer)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    running_vloss = <span class="number">0.0</span></span><br><span class="line">    <span class="comment"># Set the model to evaluation mode, disabling dropout and using population</span></span><br><span class="line">    <span class="comment"># statistics for batch normalization.</span></span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Disable gradient computation and reduce memory consumption.</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> i, vdata <span class="keyword">in</span> <span class="built_in">enumerate</span>(validation_loader):</span><br><span class="line">            vinputs, vlabels = vdata</span><br><span class="line">            voutputs = model(vinputs)</span><br><span class="line">            vloss = loss_fn(voutputs, vlabels)</span><br><span class="line">            running_vloss += vloss</span><br><span class="line"></span><br><span class="line">    avg_vloss = running_vloss / (i + <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;LOSS train &#123;&#125; valid &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(avg_loss, avg_vloss))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Log the running loss averaged per batch</span></span><br><span class="line">    <span class="comment"># for both training and validation</span></span><br><span class="line">    writer.add_scalars(<span class="string">&#x27;Training vs. Validation Loss&#x27;</span>,</span><br><span class="line">                    &#123; <span class="string">&#x27;Training&#x27;</span> : avg_loss, <span class="string">&#x27;Validation&#x27;</span> : avg_vloss &#125;,</span><br><span class="line">                    epoch_number + <span class="number">1</span>)</span><br><span class="line">    writer.flush()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Track best performance, and save the model&#x27;s state</span></span><br><span class="line">    <span class="keyword">if</span> avg_vloss &lt; best_vloss:</span><br><span class="line">        best_vloss = avg_vloss</span><br><span class="line">        model_path = <span class="string">&#x27;model_&#123;&#125;_&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(timestamp, epoch_number)</span><br><span class="line">        torch.save(model.state_dict(), model_path)</span><br><span class="line"></span><br><span class="line">    epoch_number += <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">EPOCH <span class="number">1</span>:</span><br><span class="line">  batch <span class="number">1000</span> loss: <span class="number">1.6334228584356607</span></span><br><span class="line">  batch <span class="number">2000</span> loss: <span class="number">0.8325267538074403</span></span><br><span class="line">  batch <span class="number">3000</span> loss: <span class="number">0.7359380583595484</span></span><br><span class="line">  batch <span class="number">4000</span> loss: <span class="number">0.6198329215242994</span></span><br><span class="line">  batch <span class="number">5000</span> loss: <span class="number">0.6000315657821484</span></span><br><span class="line">  batch <span class="number">6000</span> loss: <span class="number">0.555109024874866</span></span><br><span class="line">  batch <span class="number">7000</span> loss: <span class="number">0.5260250487388112</span></span><br><span class="line">  batch <span class="number">8000</span> loss: <span class="number">0.4973462742221891</span></span><br><span class="line">  batch <span class="number">9000</span> loss: <span class="number">0.4781935699362075</span></span><br><span class="line">  batch <span class="number">10000</span> loss: <span class="number">0.47880298678041433</span></span><br><span class="line">  batch <span class="number">11000</span> loss: <span class="number">0.45598648857555235</span></span><br><span class="line">  batch <span class="number">12000</span> loss: <span class="number">0.4327470133750467</span></span><br><span class="line">  batch <span class="number">13000</span> loss: <span class="number">0.41800182418141046</span></span><br><span class="line">  batch <span class="number">14000</span> loss: <span class="number">0.4115047634313814</span></span><br><span class="line">  batch <span class="number">15000</span> loss: <span class="number">0.4211296908891527</span></span><br><span class="line">LOSS train <span class="number">0.4211296908891527</span> valid <span class="number">0.414460688829422</span></span><br><span class="line">EPOCH <span class="number">2</span>:</span><br><span class="line">  batch <span class="number">1000</span> loss: <span class="number">0.3879808729066281</span></span><br><span class="line">  batch <span class="number">2000</span> loss: <span class="number">0.35912817339546743</span></span><br><span class="line">  batch <span class="number">3000</span> loss: <span class="number">0.38074520684120944</span></span><br><span class="line">  batch <span class="number">4000</span> loss: <span class="number">0.3614532373107213</span></span><br><span class="line">  batch <span class="number">5000</span> loss: <span class="number">0.36850082185724753</span></span><br><span class="line">  batch <span class="number">6000</span> loss: <span class="number">0.3703581801643886</span></span><br><span class="line">  batch <span class="number">7000</span> loss: <span class="number">0.38547042514081115</span></span><br><span class="line">  batch <span class="number">8000</span> loss: <span class="number">0.37846584360170527</span></span><br><span class="line">  batch <span class="number">9000</span> loss: <span class="number">0.3341486988377292</span></span><br><span class="line">  batch <span class="number">10000</span> loss: <span class="number">0.3433013284947956</span></span><br><span class="line">  batch <span class="number">11000</span> loss: <span class="number">0.35607743899174965</span></span><br><span class="line">  batch <span class="number">12000</span> loss: <span class="number">0.3499939931873523</span></span><br><span class="line">  batch <span class="number">13000</span> loss: <span class="number">0.33874178926000603</span></span><br><span class="line">  batch <span class="number">14000</span> loss: <span class="number">0.35130289171106416</span></span><br><span class="line">  batch <span class="number">15000</span> loss: <span class="number">0.3394507191307202</span></span><br><span class="line">LOSS train <span class="number">0.3394507191307202</span> valid <span class="number">0.3581162691116333</span></span><br><span class="line">EPOCH <span class="number">3</span>:</span><br><span class="line">  batch <span class="number">1000</span> loss: <span class="number">0.3319729989422485</span></span><br><span class="line">  batch <span class="number">2000</span> loss: <span class="number">0.29558994361863006</span></span><br><span class="line">  batch <span class="number">3000</span> loss: <span class="number">0.3107374766407593</span></span><br><span class="line">  batch <span class="number">4000</span> loss: <span class="number">0.3298987646112146</span></span><br><span class="line">  batch <span class="number">5000</span> loss: <span class="number">0.30858693152241906</span></span><br><span class="line">  batch <span class="number">6000</span> loss: <span class="number">0.33916381367447684</span></span><br><span class="line">  batch <span class="number">7000</span> loss: <span class="number">0.3105102765217889</span></span><br><span class="line">  batch <span class="number">8000</span> loss: <span class="number">0.3011080777524912</span></span><br><span class="line">  batch <span class="number">9000</span> loss: <span class="number">0.3142058177240979</span></span><br><span class="line">  batch <span class="number">10000</span> loss: <span class="number">0.31458891937109</span></span><br><span class="line">  batch <span class="number">11000</span> loss: <span class="number">0.31527258940579483</span></span><br><span class="line">  batch <span class="number">12000</span> loss: <span class="number">0.31501667268342864</span></span><br><span class="line">  batch <span class="number">13000</span> loss: <span class="number">0.3011875962628328</span></span><br><span class="line">  batch <span class="number">14000</span> loss: <span class="number">0.30012811454350596</span></span><br><span class="line">  batch <span class="number">15000</span> loss: <span class="number">0.31833117976446373</span></span><br><span class="line">LOSS train <span class="number">0.31833117976446373</span> valid <span class="number">0.3307691514492035</span></span><br><span class="line">EPOCH <span class="number">4</span>:</span><br><span class="line">  batch <span class="number">1000</span> loss: <span class="number">0.2786161053752294</span></span><br><span class="line">  batch <span class="number">2000</span> loss: <span class="number">0.27965198021690596</span></span><br><span class="line">  batch <span class="number">3000</span> loss: <span class="number">0.28595415444140965</span></span><br><span class="line">  batch <span class="number">4000</span> loss: <span class="number">0.292985666413857</span></span><br><span class="line">  batch <span class="number">5000</span> loss: <span class="number">0.3069892351147719</span></span><br><span class="line">  batch <span class="number">6000</span> loss: <span class="number">0.29902250939945224</span></span><br><span class="line">  batch <span class="number">7000</span> loss: <span class="number">0.2863366014406201</span></span><br><span class="line">  batch <span class="number">8000</span> loss: <span class="number">0.2655441066541243</span></span><br><span class="line">  batch <span class="number">9000</span> loss: <span class="number">0.3045048695363293</span></span><br><span class="line">  batch <span class="number">10000</span> loss: <span class="number">0.27626545656517554</span></span><br><span class="line">  batch <span class="number">11000</span> loss: <span class="number">0.2808379335970967</span></span><br><span class="line">  batch <span class="number">12000</span> loss: <span class="number">0.29241049340573955</span></span><br><span class="line">  batch <span class="number">13000</span> loss: <span class="number">0.28030834131941446</span></span><br><span class="line">  batch <span class="number">14000</span> loss: <span class="number">0.2983542350126445</span></span><br><span class="line">  batch <span class="number">15000</span> loss: <span class="number">0.3009556676162611</span></span><br><span class="line">LOSS train <span class="number">0.3009556676162611</span> valid <span class="number">0.41686952114105225</span></span><br><span class="line">EPOCH <span class="number">5</span>:</span><br><span class="line">  batch <span class="number">1000</span> loss: <span class="number">0.2614263167564495</span></span><br><span class="line">  batch <span class="number">2000</span> loss: <span class="number">0.2587047562422049</span></span><br><span class="line">  batch <span class="number">3000</span> loss: <span class="number">0.2642477260621345</span></span><br><span class="line">  batch <span class="number">4000</span> loss: <span class="number">0.2825975873669813</span></span><br><span class="line">  batch <span class="number">5000</span> loss: <span class="number">0.26987933717705165</span></span><br><span class="line">  batch <span class="number">6000</span> loss: <span class="number">0.2759250026817317</span></span><br><span class="line">  batch <span class="number">7000</span> loss: <span class="number">0.26055969463163275</span></span><br><span class="line">  batch <span class="number">8000</span> loss: <span class="number">0.29164007206353565</span></span><br><span class="line">  batch <span class="number">9000</span> loss: <span class="number">0.2893096504513578</span></span><br><span class="line">  batch <span class="number">10000</span> loss: <span class="number">0.2486029507305684</span></span><br><span class="line">  batch <span class="number">11000</span> loss: <span class="number">0.2732803234480907</span></span><br><span class="line">  batch <span class="number">12000</span> loss: <span class="number">0.27927226484491985</span></span><br><span class="line">  batch <span class="number">13000</span> loss: <span class="number">0.2686819267635074</span></span><br><span class="line">  batch <span class="number">14000</span> loss: <span class="number">0.24746483912148323</span></span><br><span class="line">  batch <span class="number">15000</span> loss: <span class="number">0.27903492261294194</span></span><br><span class="line">LOSS train <span class="number">0.27903492261294194</span> valid <span class="number">0.31206756830215454</span></span><br></pre></td></tr></table></figure><p>要加载模型的保存版本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">saved_model = GarmentClassifier()</span><br><span class="line">saved_model.load_state_dict(torch.load(PATH))</span><br></pre></td></tr></table></figure><p>加载模型后，它就可以满足您的任何需要 - 更多训练、推理或分析。</p><p>请注意，如果您的模型具有影响模型结构的构造函数参数，则您需要提供它们并将模型配置为与保存模型时的状态相同。</p><h2 id="Other-Resources"><a href="#Other-Resources" class="headerlink" title="Other Resources"></a>Other Resources</h2><ul><li>有关数据实用程序的文档，包括 Dataset 和 DataLoader，位于 pytorch.org</li><li>关于使用固定内存进行 GPU 训练的说明</li><li>有关 TorchVision、TorchText 和 TorchAudio 中可用数据集的文档</li><li>有关 PyTorch 中可用损失函数的文档</li><li>torch.optim 包的文档，其中包括优化器和相关工具，例如学习率调度</li><li>有关保存和加载模型的详细教程</li><li>pytorch.org 的教程部分包含有关各种训练任务的教程，包括不同领域的分类、生成对抗网络、强化学习等</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12-pytorch-pytorch tensorboard support</title>
      <link href="/2023/11/15/12-pytorch-pytorch-tensorboard-support/"/>
      <url>/2023/11/15/12-pytorch-pytorch-tensorboard-support/</url>
      
        <content type="html"><![CDATA[<h1 id="PYTORCH-TENSORBOARD-SUPPORT"><a href="#PYTORCH-TENSORBOARD-SUPPORT" class="headerlink" title="PYTORCH TENSORBOARD SUPPORT"></a>PYTORCH TENSORBOARD SUPPORT</h1><h2 id="Before-You-Start"><a href="#Before-You-Start" class="headerlink" title="Before You Start"></a>Before You Start</h2><p>要运行本教程，您需要安装 PyTorch、TorchVision、Matplotlib 和 TensorBoard。</p><p>With <code>conda</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda install pytorch torchvision -c pytorch</span><br><span class="line">conda install matplotlib tensorboard</span><br></pre></td></tr></table></figure><p>With pip:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install torch torchvision matplotlib tensorboard</span><br></pre></td></tr></table></figure><p>安装依赖项后，在安装它们的 Python 环境中重新启动此笔记本。</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>在本笔记本中，我们将针对 Fashion-MNIST 数据集训练 LeNet-5 的变体。 Fashion-MNIST 是一组描绘各种服装的图像图块，其中有十个类别标签指示所描绘服装的类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PyTorch model and training necessities</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"></span><br><span class="line"><span class="comment"># Image datasets and image manipulation</span></span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"></span><br><span class="line"><span class="comment"># Image display</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># PyTorch TensorBoard support</span></span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"><span class="comment"># In case you are using an environment that has TensorFlow installed,</span></span><br><span class="line"><span class="comment"># such as Google Colab, uncomment the following code to avoid</span></span><br><span class="line"><span class="comment"># a bug with saving embeddings to your TensorBoard directory</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># import tensorflow as tf</span></span><br><span class="line"><span class="comment"># import tensorboard as tb</span></span><br><span class="line"><span class="comment"># tf.io.gfile = tb.compat.tensorflow_stub.io.gfile</span></span><br></pre></td></tr></table></figure><h2 id="Showing-Images-in-TensorBoard"><a href="#Showing-Images-in-TensorBoard" class="headerlink" title="Showing Images in TensorBoard"></a>Showing Images in TensorBoard</h2><p>首先，我们将数据集中的示例图像添加到 TensorBoard：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gather datasets and prepare them for consumption</span></span><br><span class="line">transform = transforms.Compose(</span><br><span class="line">    [transforms.ToTensor(),</span><br><span class="line">    transforms.Normalize((<span class="number">0.5</span>,), (<span class="number">0.5</span>,))])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Store separate training and validations splits in ./data</span></span><br><span class="line">training_set = torchvision.datasets.FashionMNIST(<span class="string">&#x27;./data&#x27;</span>,</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">    train=<span class="literal">True</span>,</span><br><span class="line">    transform=transform)</span><br><span class="line">validation_set = torchvision.datasets.FashionMNIST(<span class="string">&#x27;./data&#x27;</span>,</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">    train=<span class="literal">False</span>,</span><br><span class="line">    transform=transform)</span><br><span class="line"></span><br><span class="line">training_loader = torch.utils.data.DataLoader(training_set,</span><br><span class="line">                                              batch_size=<span class="number">4</span>,</span><br><span class="line">                                              shuffle=<span class="literal">True</span>,</span><br><span class="line">                                              num_workers=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">validation_loader = torch.utils.data.DataLoader(validation_set,</span><br><span class="line">                                                batch_size=<span class="number">4</span>,</span><br><span class="line">                                                shuffle=<span class="literal">False</span>,</span><br><span class="line">                                                num_workers=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Class labels</span></span><br><span class="line">classes = (<span class="string">&#x27;T-shirt/top&#x27;</span>, <span class="string">&#x27;Trouser&#x27;</span>, <span class="string">&#x27;Pullover&#x27;</span>, <span class="string">&#x27;Dress&#x27;</span>, <span class="string">&#x27;Coat&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sandal&#x27;</span>, <span class="string">&#x27;Shirt&#x27;</span>, <span class="string">&#x27;Sneaker&#x27;</span>, <span class="string">&#x27;Bag&#x27;</span>, <span class="string">&#x27;Ankle Boot&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Helper function for inline image display</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matplotlib_imshow</span>(<span class="params">img, one_channel=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="keyword">if</span> one_channel:</span><br><span class="line">        img = img.mean(dim=<span class="number">0</span>)</span><br><span class="line">    img = img / <span class="number">2</span> + <span class="number">0.5</span>     <span class="comment"># unnormalize</span></span><br><span class="line">    npimg = img.numpy()</span><br><span class="line">    <span class="keyword">if</span> one_channel:</span><br><span class="line">        plt.imshow(npimg, cmap=<span class="string">&quot;Greys&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        plt.imshow(np.transpose(npimg, (<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Extract a batch of 4 images</span></span><br><span class="line">dataiter = <span class="built_in">iter</span>(training_loader)</span><br><span class="line">images, labels = <span class="built_in">next</span>(dataiter)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a grid from the images and show them</span></span><br><span class="line">img_grid = torchvision.utils.make_grid(images)</span><br><span class="line">matplotlib_imshow(img_grid, one_channel=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz</span><br><span class="line">Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz to ./data/FashionMNIST/raw/train-images-idx3-ubyte.gz</span><br><span class="line"></span><br><span class="line">  0%|          | 0/26421880 [00:00&lt;?, ?it/s]</span><br><span class="line">  0%|          | 65536/26421880 [00:00&lt;01:12, 364190.06it/s]</span><br><span class="line">  1%|          | 229376/26421880 [00:00&lt;00:38, 681499.72it/s]</span><br><span class="line">  2%|2         | 655360/26421880 [00:00&lt;00:14, 1797638.14it/s]</span><br><span class="line">  7%|6         | 1769472/26421880 [00:00&lt;00:06, 3863535.64it/s]</span><br><span class="line"> 14%|#3        | 3670016/26421880 [00:00&lt;00:02, 7836390.00it/s]</span><br><span class="line"> 21%|##1       | 5668864/26421880 [00:00&lt;00:02, 9387876.09it/s]</span><br><span class="line"> 32%|###1      | 8454144/26421880 [00:01&lt;00:01, 13858138.54it/s]</span><br><span class="line"> 40%|###9      | 10551296/26421880 [00:01&lt;00:01, 13275947.57it/s]</span><br><span class="line"> 50%|#####     | 13303808/26421880 [00:01&lt;00:00, 16592868.65it/s]</span><br><span class="line"> 58%|#####8    | 15433728/26421880 [00:01&lt;00:00, 15098119.07it/s]</span><br><span class="line"> 69%|######8   | 18120704/26421880 [00:01&lt;00:00, 17772010.13it/s]</span><br><span class="line"> 77%|#######7  | 20381696/26421880 [00:01&lt;00:00, 16117299.56it/s]</span><br><span class="line"> 87%|########6 | 22970368/26421880 [00:01&lt;00:00, 18330844.79it/s]</span><br><span class="line"> 96%|#########5| 25362432/26421880 [00:01&lt;00:00, 16821085.78it/s]</span><br><span class="line">100%|##########| 26421880/26421880 [00:02&lt;00:00, 13143960.49it/s]</span><br><span class="line">Extracting ./data/FashionMNIST/raw/train-images-idx3-ubyte.gz to ./data/FashionMNIST/raw</span><br><span class="line"></span><br><span class="line">Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz</span><br><span class="line">Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw/train-labels-idx1-ubyte.gz</span><br><span class="line"></span><br><span class="line">  0%|          | 0/29515 [00:00&lt;?, ?it/s]</span><br><span class="line">100%|##########| 29515/29515 [00:00&lt;00:00, 324555.51it/s]</span><br><span class="line">Extracting ./data/FashionMNIST/raw/train-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw</span><br><span class="line"></span><br><span class="line">Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz</span><br><span class="line">Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz to ./data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz</span><br><span class="line"></span><br><span class="line">  0%|          | 0/4422102 [00:00&lt;?, ?it/s]</span><br><span class="line">  1%|1         | 65536/4422102 [00:00&lt;00:12, 361458.87it/s]</span><br><span class="line">  5%|5         | 229376/4422102 [00:00&lt;00:06, 680363.18it/s]</span><br><span class="line"> 20%|##        | 884736/4422102 [00:00&lt;00:01, 2498877.41it/s]</span><br><span class="line"> 43%|####2     | 1900544/4422102 [00:00&lt;00:00, 4401526.26it/s]</span><br><span class="line"> 79%|#######9  | 3506176/4422102 [00:00&lt;00:00, 7212994.99it/s]</span><br><span class="line">100%|##########| 4422102/4422102 [00:00&lt;00:00, 6063383.04it/s]</span><br><span class="line">Extracting ./data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz to ./data/FashionMNIST/raw</span><br><span class="line"></span><br><span class="line">Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz</span><br><span class="line">Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz</span><br><span class="line"></span><br><span class="line">  0%|          | 0/5148 [00:00&lt;?, ?it/s]</span><br><span class="line">100%|##########| 5148/5148 [00:00&lt;00:00, 39187435.56it/s]</span><br><span class="line">Extracting ./data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw</span><br></pre></td></tr></table></figure><p>上面，我们使用 TorchVision 和 Matplotlib 创建了小批量输入数据的可视化网格。下面，我们使用 <code>SummaryWriter</code> 上的 <code>add_image()</code> 调用来记录图像以供 TensorBoard 使用，并且我们还调用 <code>flush()</code> 以确保它立即写入磁盘。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Default log_dir argument is &quot;runs&quot; - but it&#x27;s good to be specific</span></span><br><span class="line"><span class="comment"># torch.utils.tensorboard.SummaryWriter is imported above</span></span><br><span class="line">writer = SummaryWriter(<span class="string">&#x27;runs/fashion_mnist_experiment_1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Write image data to TensorBoard log dir</span></span><br><span class="line">writer.add_image(<span class="string">&#x27;Four Fashion-MNIST Images&#x27;</span>, img_grid)</span><br><span class="line">writer.flush()</span><br><span class="line"></span><br><span class="line"><span class="comment"># To view, start TensorBoard on the command line with:</span></span><br><span class="line"><span class="comment">#   tensorboard --logdir=runs</span></span><br><span class="line"><span class="comment"># ...and open a browser tab to http://localhost:6006/</span></span><br></pre></td></tr></table></figure><p>如果您在命令行启动 TensorBoard 并在新的浏览器选项卡（通常在 localhost:6006）中打开它，您应该在 IMAGES 选项卡下看到图像网格。</p><h2 id="Graphing-Scalars-to-Visualize-Training"><a href="#Graphing-Scalars-to-Visualize-Training" class="headerlink" title="Graphing Scalars to Visualize Training"></a>Graphing Scalars to Visualize Training</h2><p>TensorBoard 对于跟踪训练进度和效果非常有用。下面，我们将运行一个训练循环，跟踪一些指标，并保存数据以供 TensorBoard 的使用。</p><p>让我们定义一个模型来对图像图块进行分类，以及用于训练的优化器和损失函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Net</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Net, self).__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">1</span>, <span class="number">6</span>, <span class="number">5</span>)</span><br><span class="line">        self.pool = nn.MaxPool2d(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="number">6</span>, <span class="number">16</span>, <span class="number">5</span>)</span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">16</span> * <span class="number">4</span> * <span class="number">4</span>, <span class="number">120</span>)</span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">120</span>, <span class="number">84</span>)</span><br><span class="line">        self.fc3 = nn.Linear(<span class="number">84</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.pool(F.relu(self.conv1(x)))</span><br><span class="line">        x = self.pool(F.relu(self.conv2(x)))</span><br><span class="line">        x = x.view(-<span class="number">1</span>, <span class="number">16</span> * <span class="number">4</span> * <span class="number">4</span>)</span><br><span class="line">        x = F.relu(self.fc1(x))</span><br><span class="line">        x = F.relu(self.fc2(x))</span><br><span class="line">        x = self.fc3(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">net = Net()</span><br><span class="line">criterion = nn.CrossEntropyLoss()</span><br><span class="line">optimizer = optim.SGD(net.parameters(), lr=<span class="number">0.001</span>, momentum=<span class="number">0.9</span>)</span><br></pre></td></tr></table></figure><p>现在让我们训练一个 epoch，并评估每 1000 个批次的训练集损失与验证集损失：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(validation_loader))</span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>):  <span class="comment"># loop over the dataset multiple times</span></span><br><span class="line">    running_loss = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(training_loader, <span class="number">0</span>):</span><br><span class="line">        <span class="comment"># basic training loop</span></span><br><span class="line">        inputs, labels = data</span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        outputs = net(inputs)</span><br><span class="line">        loss = criterion(outputs, labels)</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        running_loss += loss.item()</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">1000</span> == <span class="number">999</span>:    <span class="comment"># Every 1000 mini-batches...</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Batch &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i + <span class="number">1</span>))</span><br><span class="line">            <span class="comment"># Check against the validation set</span></span><br><span class="line">            running_vloss = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># In evaluation mode some model specific operations can be omitted eg. dropout layer</span></span><br><span class="line">            net.train(<span class="literal">False</span>) <span class="comment"># Switching to evaluation mode, eg. turning off regularisation</span></span><br><span class="line">            <span class="keyword">for</span> j, vdata <span class="keyword">in</span> <span class="built_in">enumerate</span>(validation_loader, <span class="number">0</span>):</span><br><span class="line">                vinputs, vlabels = vdata</span><br><span class="line">                voutputs = net(vinputs)</span><br><span class="line">                vloss = criterion(voutputs, vlabels)</span><br><span class="line">                running_vloss += vloss.item()</span><br><span class="line">            net.train(<span class="literal">True</span>) <span class="comment"># Switching back to training mode, eg. turning on regularisation</span></span><br><span class="line"></span><br><span class="line">            avg_loss = running_loss / <span class="number">1000</span></span><br><span class="line">            avg_vloss = running_vloss / <span class="built_in">len</span>(validation_loader)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Log the running loss averaged per batch</span></span><br><span class="line">            writer.add_scalars(<span class="string">&#x27;Training vs. Validation Loss&#x27;</span>,</span><br><span class="line">                            &#123; <span class="string">&#x27;Training&#x27;</span> : avg_loss, <span class="string">&#x27;Validation&#x27;</span> : avg_vloss &#125;,</span><br><span class="line">                            epoch * <span class="built_in">len</span>(training_loader) + i)</span><br><span class="line"></span><br><span class="line">            running_loss = <span class="number">0.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Finished Training&#x27;</span>)</span><br><span class="line"></span><br><span class="line">writer.flush()</span><br></pre></td></tr></table></figure><p>切换到打开的 TensorBoard 并查看 SCALARS 选项卡。</p><h2 id="Visualizing-Your-Model"><a href="#Visualizing-Your-Model" class="headerlink" title="Visualizing Your Model"></a>Visualizing Your Model</h2><p>TensorBoard 还可用于检查模型中的数据流。为此，请使用模型和示例输入调用 <code>add_graph()</code> 方法。当你打开时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Again, grab a single mini-batch of images</span></span><br><span class="line">dataiter = <span class="built_in">iter</span>(training_loader)</span><br><span class="line">images, labels = <span class="built_in">next</span>(dataiter)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add_graph() will trace the sample input through your model,</span></span><br><span class="line"><span class="comment"># and render it as a graph.</span></span><br><span class="line">writer.add_graph(net, images)</span><br><span class="line">writer.flush()</span><br></pre></td></tr></table></figure><p>当您切换到 TensorBoard 时，您应该会看到一个 GRAPHS 选项卡。双击“NET”节点以查看模型中的层和数据流。</p><h2 id="Visualizing-Your-Dataset-with-Embeddings"><a href="#Visualizing-Your-Dataset-with-Embeddings" class="headerlink" title="Visualizing Your Dataset with Embeddings"></a>Visualizing Your Dataset with Embeddings</h2><p>我们使用的 28×28 图像块可以建模为 784 维向量 (28 * 28 &#x3D; 784)。将其投影到较低维的表示形式可能会很有启发。 <code>add_embedding()</code> 方法会将一组数据投影到方差最大的三个维度上，并将它们显示为交互式 3D 图表。 <code>add_embedding()</code> 方法通过投影到方差最高的三个维度来自动执行此操作。</p><p>下面，我们将采集数据样本，并生成这样的嵌入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Select a random subset of data and corresponding labels</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">select_n_random</span>(<span class="params">data, labels, n=<span class="number">100</span></span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(data) == <span class="built_in">len</span>(labels)</span><br><span class="line"></span><br><span class="line">    perm = torch.randperm(<span class="built_in">len</span>(data))</span><br><span class="line">    <span class="keyword">return</span> data[perm][:n], labels[perm][:n]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Extract a random subset of data</span></span><br><span class="line">images, labels = select_n_random(training_set.data, training_set.targets)</span><br><span class="line"></span><br><span class="line"><span class="comment"># get the class labels for each image</span></span><br><span class="line">class_labels = [classes[label] <span class="keyword">for</span> label <span class="keyword">in</span> labels]</span><br><span class="line"></span><br><span class="line"><span class="comment"># log embeddings</span></span><br><span class="line">features = images.view(-<span class="number">1</span>, <span class="number">28</span> * <span class="number">28</span>)</span><br><span class="line">writer.add_embedding(features,</span><br><span class="line">                    metadata=class_labels,</span><br><span class="line">                    label_img=images.unsqueeze(<span class="number">1</span>))</span><br><span class="line">writer.flush()</span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><p>现在，如果您切换到 TensorBoard 并选择“投影仪”选项卡，您应该会看到投影的 3D 表示。您可以旋转和缩放模型。在大尺度和小尺度上检查它，看看是否可以发现投影数据和标签聚类中的模式。</p><p>为了获得更好的可见性，建议：</p><ul><li>从左侧的“颜色依据”下拉列表中选择“标签”。</li><li>切换顶部的夜间模式图标，将浅色图像放置在深色背景上。</li></ul><h2 id="Other-Resources"><a href="#Other-Resources" class="headerlink" title="Other Resources"></a>Other Resources</h2><p>欲了解更多信息，请查看：</p><ul><li>torch.utils.tensorboard.SummaryWriter 上的 PyTorch 文档</li><li>PyTorch.org 教程中的 Tensorboard 教程内容</li><li>有关 TensorBoard 的更多信息，请参阅 TensorBoard 文档</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11-pytorch-building models with pytorch</title>
      <link href="/2023/11/15/11-pytorch-building-models-with-pytorch/"/>
      <url>/2023/11/15/11-pytorch-building-models-with-pytorch/</url>
      
        <content type="html"><![CDATA[<h1 id="BUILDING-MODELS-WITH-PYTORCH"><a href="#BUILDING-MODELS-WITH-PYTORCH" class="headerlink" title="BUILDING MODELS WITH PYTORCH"></a>BUILDING MODELS WITH PYTORCH</h1><h2 id="torch-nn-Module-and-torch-nn-Parameter"><a href="#torch-nn-Module-and-torch-nn-Parameter" class="headerlink" title="torch.nn.Module and torch.nn.Parameter"></a><code>torch.nn.Module</code> and <code>torch.nn.Parameter</code></h2><p>除了 <code>Parameter</code> 之外，我们在本视频中讨论的类都是 <code>torch.nn.Module</code> 的子类。这是 PyTorch 基类，旨在封装特定于 PyTorch 模型及其组件的行为。</p><p><code>torch.nn.Module</code> 的一项重要行为是注册参数。如果特定的 <code>Module</code> 子类具有学习权重，这些权重将表示为 <code>torch.nn.Parameter</code> 的实例。 <code>Parameter</code> 类是 <code>torch.Tensor</code> 的子类，具有特殊行为，当它们被指定为 <code>Module</code> 的属性时，它们将被添加到该列表中模块参数。这些参数可以通过 <code>Module</code> 类上的 <code>parameters()</code> 方法访问。</p><p>作为一个简单的例子，这是一个非常简单的模型，具有两个线性层和一个激活函数。我们将创建它的一个实例并要求它报告其参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TinyModel</span>(torch.nn.Module):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(TinyModel, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.linear1 = torch.nn.Linear(<span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line">        self.activation = torch.nn.ReLU()</span><br><span class="line">        self.linear2 = torch.nn.Linear(<span class="number">200</span>, <span class="number">10</span>)</span><br><span class="line">        self.softmax = torch.nn.Softmax()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.linear1(x)</span><br><span class="line">        x = self.activation(x)</span><br><span class="line">        x = self.linear2(x)</span><br><span class="line">        x = self.softmax(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">tinymodel = TinyModel()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;The model:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(tinymodel)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n\nJust one layer:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(tinymodel.linear2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n\nModel params:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> tinymodel.parameters():</span><br><span class="line">    <span class="built_in">print</span>(param)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n\nLayer params:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> tinymodel.linear2.parameters():</span><br><span class="line">    <span class="built_in">print</span>(param)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">The model:</span><br><span class="line">TinyModel(</span><br><span class="line">  (linear1): Linear(in_features=100, out_features=200, bias=True)</span><br><span class="line">  (activation): ReLU()</span><br><span class="line">  (linear2): Linear(in_features=200, out_features=10, bias=True)</span><br><span class="line">  (softmax): Softmax(dim=None)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Just one layer:</span><br><span class="line">Linear(in_features=200, out_features=10, bias=True)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Model params:</span><br><span class="line">Parameter containing:</span><br><span class="line">tensor([[ 0.0765,  0.0830, -0.0234,  ..., -0.0337, -0.0355, -0.0968],</span><br><span class="line">        [-0.0573,  0.0250, -0.0132,  ..., -0.0060,  0.0240,  0.0280],</span><br><span class="line">        [-0.0908, -0.0369,  0.0842,  ..., -0.0078, -0.0333, -0.0324],</span><br><span class="line">        ...,</span><br><span class="line">        [-0.0273, -0.0162, -0.0878,  ...,  0.0451,  0.0297, -0.0722],</span><br><span class="line">        [ 0.0833, -0.0874, -0.0020,  ..., -0.0215,  0.0356,  0.0405],</span><br><span class="line">        [-0.0637,  0.0190, -0.0571,  ..., -0.0874,  0.0176,  0.0712]],</span><br><span class="line">       requires_grad=True)</span><br><span class="line">Parameter containing:</span><br><span class="line">tensor([ 0.0304, -0.0758, -0.0549, -0.0893, -0.0809, -0.0804, -0.0079, -0.0413,</span><br><span class="line">        -0.0968,  0.0888,  0.0239, -0.0659, -0.0560, -0.0060,  0.0660, -0.0319,</span><br><span class="line">        -0.0370,  0.0633, -0.0143, -0.0360,  0.0670, -0.0804,  0.0265, -0.0870,</span><br><span class="line">         0.0039, -0.0174, -0.0680, -0.0531,  0.0643,  0.0794,  0.0209,  0.0419,</span><br><span class="line">         0.0562, -0.0173, -0.0055,  0.0813,  0.0613, -0.0379,  0.0228,  0.0304,</span><br><span class="line">        -0.0354,  0.0609, -0.0398,  0.0410,  0.0564, -0.0101, -0.0790, -0.0824,</span><br><span class="line">        -0.0126,  0.0557,  0.0900,  0.0597,  0.0062, -0.0108,  0.0112, -0.0358,</span><br><span class="line">        -0.0203,  0.0566, -0.0816, -0.0633, -0.0266, -0.0624, -0.0746,  0.0492,</span><br><span class="line">         0.0450,  0.0530, -0.0706,  0.0308,  0.0533,  0.0202, -0.0469, -0.0448,</span><br><span class="line">         0.0548,  0.0331,  0.0257, -0.0764, -0.0892,  0.0783,  0.0062,  0.0844,</span><br><span class="line">        -0.0959, -0.0468, -0.0926,  0.0925,  0.0147,  0.0391,  0.0765,  0.0059,</span><br><span class="line">         0.0216, -0.0724,  0.0108,  0.0701, -0.0147, -0.0693, -0.0517,  0.0029,</span><br><span class="line">         0.0661,  0.0086, -0.0574,  0.0084, -0.0324,  0.0056,  0.0626, -0.0833,</span><br><span class="line">        -0.0271, -0.0526,  0.0842, -0.0840, -0.0234, -0.0898, -0.0710, -0.0399,</span><br><span class="line">         0.0183, -0.0883, -0.0102, -0.0545,  0.0706, -0.0646, -0.0841, -0.0095,</span><br><span class="line">        -0.0823, -0.0385,  0.0327, -0.0810, -0.0404,  0.0570,  0.0740,  0.0829,</span><br><span class="line">         0.0845,  0.0817, -0.0239, -0.0444, -0.0221,  0.0216,  0.0103, -0.0631,</span><br><span class="line">         0.0831, -0.0273,  0.0756,  0.0022,  0.0407,  0.0072,  0.0374, -0.0608,</span><br><span class="line">         0.0424, -0.0585,  0.0505, -0.0455,  0.0268, -0.0950, -0.0642,  0.0843,</span><br><span class="line">         0.0760, -0.0889, -0.0617, -0.0916,  0.0102, -0.0269, -0.0011,  0.0318,</span><br><span class="line">         0.0278, -0.0160,  0.0159, -0.0817,  0.0768, -0.0876, -0.0524, -0.0332,</span><br><span class="line">        -0.0583,  0.0053,  0.0503, -0.0342, -0.0319, -0.0562,  0.0376, -0.0696,</span><br><span class="line">         0.0735,  0.0222, -0.0775, -0.0072,  0.0294,  0.0994, -0.0355, -0.0809,</span><br><span class="line">        -0.0539,  0.0245,  0.0670,  0.0032,  0.0891, -0.0694, -0.0994,  0.0126,</span><br><span class="line">         0.0629,  0.0936,  0.0058, -0.0073,  0.0498,  0.0616, -0.0912, -0.0490],</span><br><span class="line">       requires_grad=True)</span><br><span class="line">Parameter containing:</span><br><span class="line">tensor([[ 0.0504, -0.0203, -0.0573,  ...,  0.0253,  0.0642, -0.0088],</span><br><span class="line">        [-0.0078, -0.0608, -0.0626,  ..., -0.0350, -0.0028, -0.0634],</span><br><span class="line">        [-0.0317, -0.0202, -0.0593,  ..., -0.0280,  0.0571, -0.0114],</span><br><span class="line">        ...,</span><br><span class="line">        [ 0.0582, -0.0471, -0.0236,  ...,  0.0273,  0.0673,  0.0555],</span><br><span class="line">        [ 0.0258, -0.0706,  0.0315,  ..., -0.0663, -0.0133,  0.0078],</span><br><span class="line">        [-0.0062,  0.0544, -0.0280,  ..., -0.0303, -0.0326, -0.0462]],</span><br><span class="line">       requires_grad=True)</span><br><span class="line">Parameter containing:</span><br><span class="line">tensor([ 0.0385, -0.0116,  0.0703,  0.0407, -0.0346, -0.0178,  0.0308, -0.0502,</span><br><span class="line">         0.0616,  0.0114], requires_grad=True)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Layer params:</span><br><span class="line">Parameter containing:</span><br><span class="line">tensor([[ 0.0504, -0.0203, -0.0573,  ...,  0.0253,  0.0642, -0.0088],</span><br><span class="line">        [-0.0078, -0.0608, -0.0626,  ..., -0.0350, -0.0028, -0.0634],</span><br><span class="line">        [-0.0317, -0.0202, -0.0593,  ..., -0.0280,  0.0571, -0.0114],</span><br><span class="line">        ...,</span><br><span class="line">        [ 0.0582, -0.0471, -0.0236,  ...,  0.0273,  0.0673,  0.0555],</span><br><span class="line">        [ 0.0258, -0.0706,  0.0315,  ..., -0.0663, -0.0133,  0.0078],</span><br><span class="line">        [-0.0062,  0.0544, -0.0280,  ..., -0.0303, -0.0326, -0.0462]],</span><br><span class="line">       requires_grad=True)</span><br><span class="line">Parameter containing:</span><br><span class="line">tensor([ 0.0385, -0.0116,  0.0703,  0.0407, -0.0346, -0.0178,  0.0308, -0.0502,</span><br><span class="line">         0.0616,  0.0114], requires_grad=True)</span><br></pre></td></tr></table></figure><p>这显示了 PyTorch 模型的基本结构：有一个 <code>__init__()</code> 方法定义模型的层和其他组件，还有一个 <code>forward()</code> 方法完成计算。请注意，我们可以打印模型或其任何子模块，以了解其结构。</p><h2 id="Common-Layer-Types"><a href="#Common-Layer-Types" class="headerlink" title="Common Layer Types"></a>Common Layer Types</h2><h3 id="Linear-Layers"><a href="#Linear-Layers" class="headerlink" title="Linear Layers"></a>Linear Layers</h3><p>神经网络层最基本的类型是线性或全连接层。在该层中，每个输入都会影响该层的每个输出，其程度由该层的权重指定。如果模型有 m 个输入和 n 个输出，则权重将是 m x n 矩阵。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">lin = torch.nn.Linear(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">x = torch.rand(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Input:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n\nWeight and Bias parameters:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> lin.parameters():</span><br><span class="line">    <span class="built_in">print</span>(param)</span><br><span class="line"></span><br><span class="line">y = lin(x)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n\nOutput:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">tensor([[0.8790, 0.9774, 0.2547]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Weight and Bias parameters:</span><br><span class="line">Parameter containing:</span><br><span class="line">tensor([[ 0.1656,  0.4969, -0.4972],</span><br><span class="line">        [-0.2035, -0.2579, -0.3780]], requires_grad=True)</span><br><span class="line">Parameter containing:</span><br><span class="line">tensor([0.3768, 0.3781], requires_grad=True)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">tensor([[ 0.8814, -0.1492]], grad_fn=&lt;AddmmBackward0&gt;)</span><br></pre></td></tr></table></figure><p>如果将 <code>x</code> 与线性层的权重进行矩阵乘法，并添加偏差，您会发现得到输出向量 <code>y</code> 。</p><p>需要注意的另一个重要功能：当我们使用 <code>lin.weight</code> 检查图层的权重时，它会将自己报告为 <code>Parameter</code> （它是 <code>Tensor</code> 的子类） ，并让我们知道它正在使用 autograd 跟踪梯度。这是 <code>Parameter</code> 的默认行为，与 <code>Tensor</code> 不同。</p><p>线性层广泛应用于深度学习模型中。最常见的地方之一是在分类器模型中，该模型通常在末尾有一个或多个线性层，其中最后一层将有 n 个输出，其中 n 是分类器处理的类的数量。</p><h3 id="Convolutional-Layers"><a href="#Convolutional-Layers" class="headerlink" title="Convolutional Layers"></a>Convolutional Layers</h3><p>构建卷积层是为了处理具有<strong>高度空间相关性的数据</strong>。它们在计算机视觉中非常常用，它们检测紧密的特征分组，然后将其组合成更高级别的特征。它们也会出现在其他上下文中 - 例如，在 NLP 应用程序中，单词的直接上下文（即序列中附近的其他单词）可以影响句子的含义。</p><p>我们在之前的视频中看到了 LeNet5 中卷积层的作用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LeNet</span>(torch.nn.Module):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(LeNet, self).__init__()</span><br><span class="line">        <span class="comment"># 1 input image channel (black &amp; white), 6 output channels, 5x5 square convolution</span></span><br><span class="line">        <span class="comment"># kernel</span></span><br><span class="line">        self.conv1 = torch.nn.Conv2d(<span class="number">1</span>, <span class="number">6</span>, <span class="number">5</span>)</span><br><span class="line">        self.conv2 = torch.nn.Conv2d(<span class="number">6</span>, <span class="number">16</span>, <span class="number">3</span>)</span><br><span class="line">        <span class="comment"># an affine operation: y = Wx + b</span></span><br><span class="line">        self.fc1 = torch.nn.Linear(<span class="number">16</span> * <span class="number">6</span> * <span class="number">6</span>, <span class="number">120</span>)  <span class="comment"># 6*6 from image dimension</span></span><br><span class="line">        self.fc2 = torch.nn.Linear(<span class="number">120</span>, <span class="number">84</span>)</span><br><span class="line">        self.fc3 = torch.nn.Linear(<span class="number">84</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="comment"># Max pooling over a (2, 2) window</span></span><br><span class="line">        x = F.max_pool2d(F.relu(self.conv1(x)), (<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">        <span class="comment"># If the size is a square you can only specify a single number</span></span><br><span class="line">        x = F.max_pool2d(F.relu(self.conv2(x)), <span class="number">2</span>)</span><br><span class="line">        x = x.view(-<span class="number">1</span>, self.num_flat_features(x))</span><br><span class="line">        x = F.relu(self.fc1(x))</span><br><span class="line">        x = F.relu(self.fc2(x))</span><br><span class="line">        x = self.fc3(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">num_flat_features</span>(<span class="params">self, x</span>):</span><br><span class="line">        size = x.size()[<span class="number">1</span>:]  <span class="comment"># all dimensions except the batch dimension</span></span><br><span class="line">        num_features = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> size:</span><br><span class="line">            num_features *= s</span><br><span class="line">        <span class="keyword">return</span> num_features</span><br></pre></td></tr></table></figure><p>让我们分解一下该模型的卷积层中发生的情况。以 <code>conv1</code> 开头：</p><ul><li>LeNet5 旨在接收 1x32x32 黑白图像。卷积层构造函数的第一个参数是输入通道的数量。在这里，它是 1。如果我们构建这个模型来查看 3 色通道，那么它就是 3。</li><li>卷积层就像一个扫描图像的窗口，寻找它可以识别的模式。这些模式称为特征，卷积层的参数之一是我们希望它学习的特征数量。这是构造函数的第二个参数，是输出特征的数量。在这里，我们要求我们的层学习 6 个特征。</li><li>就在上面，我将卷积层比作一个窗口——但是窗口有多大呢？第三个参数是窗口或内核大小。这里，“5”意味着我们选择了 5x5 内核。 （如果您想要高度与宽度不同的内核，您可以为此参数指定一个元组 - 例如， <code>(3, 5)</code> 以获得 3x5 卷积内核。）</li></ul><p>卷积层的输出是激活图 - 输入张量中特征存在的空间表示。 <code>conv1</code> 将为我们提供 6x28x28 的输出张量； 6 是要素的数量，28 是地图的高度和宽度。 （28 是因为当在 32 像素行上扫描 5 像素窗口时，只有 28 个有效位置。）</p><p>然后，我们将卷积的输出传递给 ReLU 激活函数（稍后将详细介绍激活函数），然后传递给最大池化层。最大池化层采用激活图中彼此靠近的特征并将它们分组在一起。它通过减少张量、将输出中的每个 2x2 单元格合并为一个单元格，并为该单元格分配进入其中的 4 个单元格的最大值来实现此目的。这为我们提供了激活图的较低分辨率版本，尺寸为 6x14x14。</p><p>我们的下一个卷积层 <code>conv2</code> 需要 6 个输入通道（对应于第一层寻求的 6 个特征）、16 个输出通道和一个 3x3 内核。它输出一个 16x12x12 的激活图，再次通过最大池化层减少到 16x6x6。在将此输出传递到线性层之前，它会被重塑为 16 * 6 * 6 &#x3D; 576 元素的向量，以供下一层使用。</p><p>有用于处理 1D、2D 和 3D 张量的卷积层。卷积层构造函数还有更多可选参数，包括输入中的步幅长度（例如，仅扫描每秒或每三个位置）、填充（以便您可以扫描到输入的边缘）等等。请参阅文档以获取更多信息。</p><h3 id="Recurrent-Layers"><a href="#Recurrent-Layers" class="headerlink" title="Recurrent Layers"></a>Recurrent Layers</h3><p>循环神经网络（或 RNN）用于处理顺序数据——从科学仪器的时间序列测量到自然语言句子再到 DNA 核苷酸。 RNN 通过维护一个隐藏状态来实现这一点，该隐藏状态充当迄今为止在序列中所看到内容的一种记忆。</p><p>RNN 层或其变体 LSTM（长短期记忆）和 GRU（门控循环单元）的内部结构相当复杂，超出了本视频的范围，但我们将向您展示其中的结构使用基于 LSTM 的词性标注器（一种分类器，可以告诉你一个单词是否是名词、动词等）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LSTMTagger</span>(torch.nn.Module):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, embedding_dim, hidden_dim, vocab_size, tagset_size</span>):</span><br><span class="line">        <span class="built_in">super</span>(LSTMTagger, self).__init__()</span><br><span class="line">        self.hidden_dim = hidden_dim</span><br><span class="line"></span><br><span class="line">        self.word_embeddings = torch.nn.Embedding(vocab_size, embedding_dim)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># The LSTM takes word embeddings as inputs, and outputs hidden states</span></span><br><span class="line">        <span class="comment"># with dimensionality hidden_dim.</span></span><br><span class="line">        self.lstm = torch.nn.LSTM(embedding_dim, hidden_dim)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># The linear layer that maps from hidden state space to tag space</span></span><br><span class="line">        self.hidden2tag = torch.nn.Linear(hidden_dim, tagset_size)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, sentence</span>):</span><br><span class="line">        embeds = self.word_embeddings(sentence)</span><br><span class="line">        lstm_out, _ = self.lstm(embeds.view(<span class="built_in">len</span>(sentence), <span class="number">1</span>, -<span class="number">1</span>))</span><br><span class="line">        tag_space = self.hidden2tag(lstm_out.view(<span class="built_in">len</span>(sentence), -<span class="number">1</span>))</span><br><span class="line">        tag_scores = F.log_softmax(tag_space, dim=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> tag_scores</span><br></pre></td></tr></table></figure><p>构造函数有四个参数：</p><ul><li><code>vocab_size</code> 是输入词汇中的单词数。每个单词都是 <code>vocab_size</code> 维空间中的一个单热向量（或单位向量）。</li><li><code>tagset_size</code> 是输出集中的标签数量。</li><li><code>embedding_dim</code> 是词汇嵌入空间的大小。嵌入将词汇映射到低维空间，其中具有相似含义的单词在空间中靠近在一起。</li><li><code>hidden_dim</code> 是 LSTM 内存的大小。</li></ul><p>输入将是一个句子，其中单词表示为 one-hot 向量的索引。然后嵌入层会将它们映射到 <code>embedding_dim</code> 维空间。 LSTM 获取此嵌入序列并对其进行迭代，生成长度为 <code>hidden_dim</code> 的输出向量。最后的线性层充当分类器；将 <code>log_softmax()</code> 应用于最后一层的输出会将输出转换为给定单词映射到给定标签的归一化估计概率集。</p><p>如果您想了解该网络的实际应用，请查看 pytorch.org 上的序列模型和 LSTM 网络教程。</p><h3 id="Transformers"><a href="#Transformers" class="headerlink" title="Transformers"></a>Transformers</h3><p>Transformer 是一种多用途网络，它已经通过 BERT 等模型取代了 NLP 领域的最先进技术。对 Transformer 架构的讨论超出了本视频的范围，但 PyTorch 有一个 <code>Transformer</code> 类，允许您定义 Transformer 模型的整体参数 - 注意力头的数量、编码器和解码器的数量层、dropout 和激活函数等。（您甚至可以使用正确的参数从这个单个类构建 BERT 模型！） <code>torch.nn.Transformer</code> 类还具有用于封装各个组件的类（ <code>TransformerEncoder</code> ）和子组件（ <code>TransformerEncoderLayer</code> 、 <code>TransformerDecoderLayer</code> ）。有关详细信息，请查看变压器类的文档以及 pytorch.org 上的相关教程。</p><h3 id="Data-Manipulation-Layers"><a href="#Data-Manipulation-Layers" class="headerlink" title="Data Manipulation Layers"></a>Data Manipulation Layers</h3><p>还有其他层类型在模型中执行重要功能，但本身不参与学习过程。</p><p>最大池化（及其孪生最小池化）通过组合单元格并将输入单元格的最大值分配给输出单元格来减少张量（我们看到了这一点）。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my_tensor = torch.rand(<span class="number">1</span>, <span class="number">6</span>, <span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tensor)</span><br><span class="line"></span><br><span class="line">maxpool_layer = torch.nn.MaxPool2d(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(maxpool_layer(my_tensor))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tensor([[[0.5036, 0.6285, 0.3460, 0.7817, 0.9876, 0.0074],</span><br><span class="line">         [0.3969, 0.7950, 0.1449, 0.4110, 0.8216, 0.6235],</span><br><span class="line">         [0.2347, 0.3741, 0.4997, 0.9737, 0.1741, 0.4616],</span><br><span class="line">         [0.3962, 0.9970, 0.8778, 0.4292, 0.2772, 0.9926],</span><br><span class="line">         [0.4406, 0.3624, 0.8960, 0.6484, 0.5544, 0.9501],</span><br><span class="line">         [0.2489, 0.8971, 0.7499, 0.1803, 0.9571, 0.6733]]])</span><br><span class="line">tensor([[[0.7950, 0.9876],</span><br><span class="line">         [0.9970, 0.9926]]])</span><br></pre></td></tr></table></figure><p>如果仔细观察上面的值，您会发现 maxpooled 输出中的每个值都是 6x6 输入的每个象限的最大值。</p><p>归一化层将一层的输出重新居中并归一化，然后再将其输入到另一层。居中和缩放中间张量有许多有益的效果，例如让您使用更高的学习率而不会爆炸&#x2F;消失梯度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">my_tensor = torch.rand(<span class="number">1</span>, <span class="number">4</span>, <span class="number">4</span>) * <span class="number">20</span> + <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(my_tensor)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(my_tensor.mean())</span><br><span class="line"></span><br><span class="line">norm_layer = torch.nn.BatchNorm1d(<span class="number">4</span>)</span><br><span class="line">normed_tensor = norm_layer(my_tensor)</span><br><span class="line"><span class="built_in">print</span>(normed_tensor)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(normed_tensor.mean())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tensor([[[ <span class="number">7.7375</span>, <span class="number">23.5649</span>,  <span class="number">6.8452</span>, <span class="number">16.3517</span>],</span><br><span class="line">         [<span class="number">19.5792</span>, <span class="number">20.3254</span>,  <span class="number">6.1930</span>, <span class="number">23.7576</span>],</span><br><span class="line">         [<span class="number">23.7554</span>, <span class="number">20.8565</span>, <span class="number">18.4241</span>,  <span class="number">8.5742</span>],</span><br><span class="line">         [<span class="number">22.5100</span>, <span class="number">15.6154</span>, <span class="number">13.5698</span>, <span class="number">11.8411</span>]]])</span><br><span class="line">tensor(<span class="number">16.2188</span>)</span><br><span class="line">tensor([[[-<span class="number">0.8614</span>,  <span class="number">1.4543</span>, -<span class="number">0.9919</span>,  <span class="number">0.3990</span>],</span><br><span class="line">         [ <span class="number">0.3160</span>,  <span class="number">0.4274</span>, -<span class="number">1.6834</span>,  <span class="number">0.9400</span>],</span><br><span class="line">         [ <span class="number">1.0256</span>,  <span class="number">0.5176</span>,  <span class="number">0.0914</span>, -<span class="number">1.6346</span>],</span><br><span class="line">         [ <span class="number">1.6352</span>, -<span class="number">0.0663</span>, -<span class="number">0.5711</span>, -<span class="number">0.9978</span>]]],</span><br><span class="line">       grad_fn=&lt;NativeBatchNormBackward0&gt;)</span><br><span class="line">tensor(<span class="number">3.3528e-08</span>, grad_fn=&lt;MeanBackward0&gt;)</span><br></pre></td></tr></table></figure><p>运行上面的单元，我们向输入张量添加了一个大的缩放因子和偏移量；你应该看到输入张量的 <code>mean()</code> 位于 15 附近的某个地方。在通过归一化层运行它之后，你可以看到值更小，并且分组在零附近 - 事实上，平均值应该非常大小（&gt; 1e-8）。</p><p>这是有益的，因为许多激活函数（如下所述）的最强梯度接近 0，但有时会遭受输入梯度消失或爆炸的影响，从而使它们远离零。将数据保持在最陡梯度区域的中心往往意味着更快、更好的学习和更高的可行学习率。</p><p>Dropout 层是一种鼓励模型中稀疏表示的工具，也就是说，推动模型用更少的数据进行推理。</p><p>Dropout 层通过在训练期间随机设置部分输入张量来工作 - Dropout 层始终关闭以进行推理。这迫使模型针对这个屏蔽或缩减的数据集进行学习。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my_tensor = torch.rand(<span class="number">1</span>, <span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">dropout = torch.nn.Dropout(p=<span class="number">0.4</span>)</span><br><span class="line"><span class="built_in">print</span>(dropout(my_tensor))</span><br><span class="line"><span class="built_in">print</span>(dropout(my_tensor))</span><br></pre></td></tr></table></figure><p>在上面，您可以看到 dropout 对样本张量的影响。您可以使用可选的 <code>p</code> 参数来设置单个权重退出的概率；如果不这样做，则默认为 0.5。</p><h3 id="Activation-Functions"><a href="#Activation-Functions" class="headerlink" title="Activation Functions"></a>Activation Functions</h3><p>激活函数使深度学习成为可能。神经网络实际上是一个具有许多参数的程序，用于模拟数学函数。如果我们所做的只是重复使用层权重的多个张量，我们只能模拟线性函数；此外，拥有许多层是没有意义的，因为整个网络将减少到单个矩阵乘法。在层之间插入非线性激活函数使得深度学习模型能够模拟任何函数，而不仅仅是线性函数。</p><p><code>torch.nn.Module</code> 具有封装所有主要激活函数的对象，包括 ReLU 及其许多变体、Tanh、Hardtanh、sigmoid 等。它还包括其他函数，例如 Softmax，它们在模型的输出阶段最有用。</p><h3 id="Loss-Functions"><a href="#Loss-Functions" class="headerlink" title="Loss Functions"></a>Loss Functions</h3><p>损失函数告诉我们模型的预测与正确答案的差距有多大。 PyTorch 包含多种损失函数，包括常见的 MSE（均方误差 &#x3D; L2 范数）、交叉熵损失和负似然损失（对分类器有用）等。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10-pytorch-the fundaments of autograd</title>
      <link href="/2023/11/14/10-pytorch-the-fundaments-of-autograd/"/>
      <url>/2023/11/14/10-pytorch-the-fundaments-of-autograd/</url>
      
        <content type="html"><![CDATA[<h1 id="THE-FUNDAMENTALS-OF-AUTOGRAD"><a href="#THE-FUNDAMENTALS-OF-AUTOGRAD" class="headerlink" title="THE FUNDAMENTALS OF AUTOGRAD"></a>THE FUNDAMENTALS OF AUTOGRAD</h1><p>PyTorch 的 Autograd 功能是 PyTorch 灵活快速地构建机器学习项目的一部分。它允许在复杂的计算中快速、轻松地计算多个偏导数（也称为梯度）。此操作是基于反向传播的神经网络学习的核心。</p><p>autograd 的强大之处在于它在运行时动态跟踪您的计算，这意味着如果您的模型有决策分支或循环，其长度直到运行时才知道，计算仍然会被正确跟踪，并且您将得到正确的结果梯度来驱动学习。再加上您的模型是用 Python 构建的，与依赖于更严格结构的模型的静态分析来计算梯度的框架相比，它提供了更大的灵活性。</p><h2 id="What-Do-We-Need-Autograd-For"><a href="#What-Do-We-Need-Autograd-For" class="headerlink" title="What Do We Need Autograd For?"></a>What Do We Need Autograd For?</h2><p>机器学习模型是一个具有输入和输出的函数。在本次讨论中，我们将输入视为一个维度向量 $$ \vec{x} $$，其中包含元素$$x_i$$。然后我们可以将模型 M 表示为输入的向量值函数：$$ \vec{y} &#x3D; \vec{M}(\vec{x}) $$。 （我们将 M 的输出值视为向量，因为一般来说，模型可能有任意数量的输出。）</p><p>由于我们主要在训练的背景下讨论 autograd，因此我们感兴趣的输出将是模型的损失。损失函数 $$  L(\vec y ) &#x3D; L( \vec M ( \vec x )) $$ 是模型输出的单值标量函数。该函数表示我们的模型的预测与特定输入的理想输出的差距有多大。注意：在此之后，我们通常会在上下文应该清晰的地方省略矢量符号 - 例如，  $$ y $$而不是$$\vec y$$ 。</p><p>在训练模型时，我们希望最小化损失。在完美模型的理想情况下，这意味着调整其学习权重 - 即函数的可调整参数 - 使得所有输入的损失为零。在现实世界中，这意味着一个不断调整学习权重的迭代过程，直到我们看到对于各种输入我们得到了可以容忍的损失。</p><p>我们如何决定轻推权重的距离和方向？我们希望最小化损失，这意味着使其相对于输入的一阶导数等于 0： $$\frac{\partial L }{\partial x} &#x3D; 0$$</p><p>但请记住，损失不是直接从输入导出的，而是模型输出的函数（直接是输入的函数）， $$\frac{∂L}{∂x} &#x3D; \frac{∂L(y))}{∂x}$$ 。根据微积分的链式法则，我们有 $$\frac{∂L(\vec y)}{∂x} &#x3D; \frac{∂L}{∂y}\frac{∂y}{∂x}&#x3D;\frac{∂L}{∂y}\frac{∂M(x)}{∂x}$$ </p><p> $$\frac{∂M(x)}{∂x}$$是事情变得复杂的地方。如果我们再次使用链式法则扩展表达式，模型输出相对于输入的偏导数将涉及模型中每个相乘的学习权重、每个激活函数以及每个其他数学变换的许多局部偏导数。每个此类偏导数的完整表达式是通过计算图的每个可能路径的局部梯度的乘积之和，该计算图以我们试图测量其梯度的变量结束。</p><p>特别是，我们对学习权重的梯度感兴趣——它们告诉我们改变每个权重的方向以使损失函数更接近于零。</p><p>由于此类局部导数（每个导数对应于模型计算图中的一条单独路径）的数量往往会随着神经网络的深度呈指数级增长，因此计算它们的复杂性也会随之增加。这就是 autograd 发挥作用的地方：它跟踪每次计算的历史记录。 PyTorch 模型中的每个计算张量都带有其输入张量和用于创建它的函数的历史记录。结合 PyTorch 函数旨在作用于张量的事实，每个函数都有一个用于计算自己的导数的内置实现，这大大加快了学习所需的局部导数的计算速度。</p><h2 id="A-Simple-Example"><a href="#A-Simple-Example" class="headerlink" title="A Simple Example"></a>A Simple Example</h2><p>这是很多理论 - 但在实践中使用 autograd 是什么样子呢？</p><p>让我们从一个简单的例子开始。首先，我们将进行一些导入以绘制结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># %matplotlib inline</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.ticker <span class="keyword">as</span> ticker</span><br><span class="line"><span class="keyword">import</span> math</span><br></pre></td></tr></table></figure><p>接下来，我们将创建一个在间隔 [0,2*PI]上充满均匀间隔值的输入张量，并指定 <code>requires_grad=True</code> 。 （与大多数创建张量的函数一样， <code>torch.linspace()</code> 接受可选的 <code>requires_grad</code> 选项。）设置此标志意味着在接下来的每次计算中，autograd将在该计算的输出张量。</p><p>接下来，我们将执行计算，并根据输入绘制其输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = torch.sin(a)</span><br><span class="line">plt.plot(a.detach(), b.detach())</span><br></pre></td></tr></table></figure><p>让我们仔细看看张量 <code>b</code> 。当我们打印它时，我们会看到一个指示符，表明它正在跟踪其计算历史记录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tensor([ 0.0000e+00,  2.5882e-01,  5.0000e-01,  7.0711e-01,  8.6603e-01,</span><br><span class="line">         9.6593e-01,  1.0000e+00,  9.6593e-01,  8.6603e-01,  7.0711e-01,</span><br><span class="line">         5.0000e-01,  2.5882e-01, -8.7423e-08, -2.5882e-01, -5.0000e-01,</span><br><span class="line">        -7.0711e-01, -8.6603e-01, -9.6593e-01, -1.0000e+00, -9.6593e-01,</span><br><span class="line">        -8.6603e-01, -7.0711e-01, -5.0000e-01, -2.5882e-01,  1.7485e-07],</span><br><span class="line">       grad_fn=&lt;SinBackward0&gt;)</span><br></pre></td></tr></table></figure><p>这个 <code>grad_fn</code> 给了我们一个提示，当我们执行反向传播步骤并计算梯度时，我们需要计算所有该张量输入的 $$ sin(x)$$的导数。</p><p>让我们执行更多计算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="number">2</span> * b</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line">d = c + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tensor([ 0.0000e+00,  5.1764e-01,  1.0000e+00,  1.4142e+00,  1.7321e+00,</span><br><span class="line">         1.9319e+00,  2.0000e+00,  1.9319e+00,  1.7321e+00,  1.4142e+00,</span><br><span class="line">         1.0000e+00,  5.1764e-01, -1.7485e-07, -5.1764e-01, -1.0000e+00,</span><br><span class="line">        -1.4142e+00, -1.7321e+00, -1.9319e+00, -2.0000e+00, -1.9319e+00,</span><br><span class="line">        -1.7321e+00, -1.4142e+00, -1.0000e+00, -5.1764e-01,  3.4969e-07],</span><br><span class="line">       grad_fn=&lt;MulBackward0&gt;)</span><br><span class="line">tensor([ 1.0000e+00,  1.5176e+00,  2.0000e+00,  2.4142e+00,  2.7321e+00,</span><br><span class="line">         2.9319e+00,  3.0000e+00,  2.9319e+00,  2.7321e+00,  2.4142e+00,</span><br><span class="line">         2.0000e+00,  1.5176e+00,  1.0000e+00,  4.8236e-01, -3.5763e-07,</span><br><span class="line">        -4.1421e-01, -7.3205e-01, -9.3185e-01, -1.0000e+00, -9.3185e-01,</span><br><span class="line">        -7.3205e-01, -4.1421e-01,  4.7684e-07,  4.8236e-01,  1.0000e+00],</span><br><span class="line">       grad_fn=&lt;AddBackward0&gt;)</span><br></pre></td></tr></table></figure><p>最后，让我们计算一个单元素输出。当您在不带参数的张量上调用 <code>.backward()</code> 时，它期望调用张量仅包含单个元素，就像计算损失函数时的情况一样。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">out = d.<span class="built_in">sum</span>()</span><br><span class="line"><span class="built_in">print</span>(out)</span><br></pre></td></tr></table></figure><p>tensor(25., grad_fn&#x3D;<SumBackward0>)</p><p>使用张量存储的每个 <code>grad_fn</code> 都允许您使用其 <code>next_functions</code> 属性将计算一直返回到其输入。我们可以在下面看到，在 <code>d</code> 上深入研究这个属性向我们展示了所有先前张量的梯度函数。请注意， <code>a.grad_fn</code> 报告为 <code>None</code> ，表明这是函数的输入，没有自己的历史记录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;d:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(d.grad_fn)</span><br><span class="line"><span class="built_in">print</span>(d.grad_fn.next_functions)</span><br><span class="line"><span class="built_in">print</span>(d.grad_fn.next_functions[<span class="number">0</span>][<span class="number">0</span>].next_functions)</span><br><span class="line"><span class="built_in">print</span>(d.grad_fn.next_functions[<span class="number">0</span>][<span class="number">0</span>].next_functions[<span class="number">0</span>][<span class="number">0</span>].next_functions)</span><br><span class="line"><span class="built_in">print</span>(d.grad_fn.next_functions[<span class="number">0</span>][<span class="number">0</span>].next_functions[<span class="number">0</span>][<span class="number">0</span>].next_functions[<span class="number">0</span>][<span class="number">0</span>].next_functions)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nc:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(c.grad_fn)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nb:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(b.grad_fn)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\na:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a.grad_fn)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">d:</span><br><span class="line">&lt;AddBackward0 object at 0x7f334cdf7190&gt;</span><br><span class="line">((&lt;MulBackward0 object at 0x7f334cdf5b40&gt;, 0), (None, 0))</span><br><span class="line">((&lt;SinBackward0 object at 0x7f334cdf5b40&gt;, 0), (None, 0))</span><br><span class="line">((&lt;AccumulateGrad object at 0x7f334cdf7190&gt;, 0),)</span><br><span class="line">()</span><br><span class="line"></span><br><span class="line">c:</span><br><span class="line">&lt;MulBackward0 object at 0x7f334cdf5b40&gt;</span><br><span class="line"></span><br><span class="line">b:</span><br><span class="line">&lt;SinBackward0 object at 0x7f334cdf5b40&gt;</span><br><span class="line"></span><br><span class="line">a:</span><br><span class="line">None</span><br></pre></td></tr></table></figure><p>有了所有这些机制，我们如何推出衍生品呢？您在输出上调用 <code>backward()</code> 方法，并检查输入的 <code>grad</code> 属性以检查渐变：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">out.backward()</span><br><span class="line"><span class="built_in">print</span>(a.grad)</span><br><span class="line">plt.plot(a.detach(), a.grad.detach())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tensor([ <span class="number">2.0000e+00</span>,  <span class="number">1.9319e+00</span>,  <span class="number">1.7321e+00</span>,  <span class="number">1.4142e+00</span>,  <span class="number">1.0000e+00</span>,</span><br><span class="line">         <span class="number">5.1764e-01</span>, -<span class="number">8.7423e-08</span>, -<span class="number">5.1764e-01</span>, -<span class="number">1.0000e+00</span>, -<span class="number">1.4142e+00</span>,</span><br><span class="line">        -<span class="number">1.7321e+00</span>, -<span class="number">1.9319e+00</span>, -<span class="number">2.0000e+00</span>, -<span class="number">1.9319e+00</span>, -<span class="number">1.7321e+00</span>,</span><br><span class="line">        -<span class="number">1.4142e+00</span>, -<span class="number">1.0000e+00</span>, -<span class="number">5.1764e-01</span>,  <span class="number">2.3850e-08</span>,  <span class="number">5.1764e-01</span>,</span><br><span class="line">         <span class="number">1.0000e+00</span>,  <span class="number">1.4142e+00</span>,  <span class="number">1.7321e+00</span>,  <span class="number">1.9319e+00</span>,  <span class="number">2.0000e+00</span>])</span><br><span class="line"></span><br><span class="line">[&lt;matplotlib.lines.Line2D <span class="built_in">object</span> at <span class="number">0x7f334cdd0460</span>&gt;]</span><br></pre></td></tr></table></figure><p>回想一下我们达到这里所采取的计算步骤：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = torch.linspace(<span class="number">0.</span>, <span class="number">2.</span> * math.pi, steps=<span class="number">25</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">b = torch.sin(a)</span><br><span class="line">c = <span class="number">2</span> * b</span><br><span class="line">d = c + <span class="number">1</span></span><br><span class="line">out = d.<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure><p>添加一个常数，就像我们计算 <code>d</code> 一样，不会改变导数。剩下 $$c&#x3D;2<em>b&#x3D;2</em>sin(a)$$，它的导数应该是 $$2*cos(a)$$ 。看看上面的图表，这就是我们所看到的。</p><p>请注意，只有计算的叶节点才会计算其梯度。例如，如果您尝试 <code>print(c.grad)</code> 您会得到 <code>None</code> 。在这个简单的示例中，只有输入是叶节点，因此只有它计算了梯度。</p><h2 id="Autograd-in-Training"><a href="#Autograd-in-Training" class="headerlink" title="Autograd in Training"></a>Autograd in Training</h2><p>我们已经简要了解了 autograd 的工作原理，但是当它用于其预期目的时，它会是什么样子呢？让我们定义一个小模型并检查它在单个训练批次后如何变化。首先，定义一些常量、我们的模型以及输入和输出的一些替代：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">BATCH_SIZE = <span class="number">16</span></span><br><span class="line">DIM_IN = <span class="number">1000</span></span><br><span class="line">HIDDEN_SIZE = <span class="number">100</span></span><br><span class="line">DIM_OUT = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TinyModel</span>(torch.nn.Module):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(TinyModel, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.layer1 = torch.nn.Linear(<span class="number">1000</span>, <span class="number">100</span>)</span><br><span class="line">        self.relu = torch.nn.ReLU()</span><br><span class="line">        self.layer2 = torch.nn.Linear(<span class="number">100</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.layer1(x)</span><br><span class="line">        x = self.relu(x)</span><br><span class="line">        x = self.layer2(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">some_input = torch.randn(BATCH_SIZE, DIM_IN, requires_grad=<span class="literal">False</span>)</span><br><span class="line">ideal_output = torch.randn(BATCH_SIZE, DIM_OUT, requires_grad=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">model = TinyModel()</span><br></pre></td></tr></table></figure><p>您可能会注意到的一件事是，我们从未为模型的层指定 <code>requires_grad=True</code> 。在 <code>torch.nn.Module</code> 的子类中，假设我们想要跟踪层权重的梯度以进行学习。</p><p>如果我们查看模型的各层，我们可以检查权重的值，并验证尚未计算任何梯度：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(model.layer2.weight[<span class="number">0</span>][<span class="number">0</span>:<span class="number">10</span>]) <span class="comment"># just a small slice</span></span><br><span class="line"><span class="built_in">print</span>(model.layer2.weight.grad)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tensor([ 0.0920,  0.0916,  0.0121,  0.0083, -0.0055,  0.0367,  0.0221, -0.0276,</span><br><span class="line">        -0.0086,  0.0157], grad_fn=&lt;SliceBackward0&gt;)</span><br><span class="line">None</span><br></pre></td></tr></table></figure><p>让我们看看当我们运行一批训练时，情况会发生什么变化。对于损失函数，我们将仅使用 <code>prediction</code> 和 <code>ideal_output</code> 之间的欧几里德距离的平方，并且我们将使用基本的随机梯度下降优化器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">optimizer = torch.optim.SGD(model.parameters(), lr=<span class="number">0.001</span>)</span><br><span class="line"></span><br><span class="line">prediction = model(some_input)</span><br><span class="line"></span><br><span class="line">loss = (ideal_output - prediction).<span class="built_in">pow</span>(<span class="number">2</span>).<span class="built_in">sum</span>()</span><br><span class="line"><span class="built_in">print</span>(loss)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensor(211.2634, grad_fn=&lt;SumBackward0&gt;)</span><br></pre></td></tr></table></figure><p>现在，让我们调用 <code>loss.backward()</code> 看看会发生什么：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loss.backward()</span><br><span class="line"><span class="built_in">print</span>(model.layer2.weight[<span class="number">0</span>][<span class="number">0</span>:<span class="number">10</span>])</span><br><span class="line"><span class="built_in">print</span>(model.layer2.weight.grad[<span class="number">0</span>][<span class="number">0</span>:<span class="number">10</span>])</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tensor([ 0.0920,  0.0916,  0.0121,  0.0083, -0.0055,  0.0367,  0.0221, -0.0276,</span><br><span class="line">        -0.0086,  0.0157], grad_fn=&lt;SliceBackward0&gt;)</span><br><span class="line">tensor([12.8997,  2.9572,  2.3021,  1.8887,  5.0710,  7.3192,  3.5169,  2.4319,</span><br><span class="line">         0.1732, -5.3835])</span><br></pre></td></tr></table></figure><p>我们可以看到每个学习权重的梯度都已计算出来，但权重保持不变，因为我们还没有运行优化器。优化器负责根据计算的梯度更新模型权重。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">optimizer.step()</span><br><span class="line"><span class="built_in">print</span>(model.layer2.weight[<span class="number">0</span>][<span class="number">0</span>:<span class="number">10</span>])</span><br><span class="line"><span class="built_in">print</span>(model.layer2.weight.grad[<span class="number">0</span>][<span class="number">0</span>:<span class="number">10</span>])</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tensor([ 0.0791,  0.0886,  0.0098,  0.0064, -0.0106,  0.0293,  0.0186, -0.0300,</span><br><span class="line">        -0.0088,  0.0211], grad_fn=&lt;SliceBackward0&gt;)</span><br><span class="line">tensor([12.8997,  2.9572,  2.3021,  1.8887,  5.0710,  7.3192,  3.5169,  2.4319,</span><br><span class="line">         0.1732, -5.3835])</span><br></pre></td></tr></table></figure><p>您应该看到 <code>layer2</code> 的权重已更改。</p><p>该过程中一件重要的事情是：调用 <code>optimizer.step()</code> 后，您需要调用 <code>optimizer.zero_grad()</code> ，否则每次运行 <code>loss.backward()</code> 时，学习权重的梯度都会积累：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(model.layer2.weight.grad[<span class="number">0</span>][<span class="number">0</span>:<span class="number">10</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">5</span>):</span><br><span class="line">    prediction = model(some_input)</span><br><span class="line">    loss = (ideal_output - prediction).<span class="built_in">pow</span>(<span class="number">2</span>).<span class="built_in">sum</span>()</span><br><span class="line">    loss.backward()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(model.layer2.weight.grad[<span class="number">0</span>][<span class="number">0</span>:<span class="number">10</span>])</span><br><span class="line"></span><br><span class="line">optimizer.zero_grad(set_to_none=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(model.layer2.weight.grad[<span class="number">0</span>][<span class="number">0</span>:<span class="number">10</span>])</span><br></pre></td></tr></table></figure><p>运行上面的单元格后，您应该看到多次运行 <code>loss.backward()</code> 后，大多数梯度的幅度都会大得多。在运行下一个训练批次之前未能将梯度归零将导致梯度以这种方式爆炸，从而导致不正确且不可预测的学习结果。</p><h2 id="Turning-Autograd-Off-and-On"><a href="#Turning-Autograd-Off-and-On" class="headerlink" title="Turning Autograd Off and On"></a>Turning Autograd Off and On</h2><p>在某些情况下，您需要对是否启用自动分级进行细粒度控制。根据具体情况，有多种方法可以做到这一点。</p><p>最简单的方法是直接更改张量上的 <code>requires_grad</code> 标志：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = torch.ones(<span class="number">2</span>, <span class="number">3</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">b1 = <span class="number">2</span> * a</span><br><span class="line"><span class="built_in">print</span>(b1)</span><br><span class="line"></span><br><span class="line">a.requires_grad = <span class="literal">False</span></span><br><span class="line">b2 = <span class="number">2</span> * a</span><br><span class="line"><span class="built_in">print</span>(b2)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tensor([[1., 1., 1.],</span><br><span class="line">        [1., 1., 1.]], requires_grad=True)</span><br><span class="line">tensor([[2., 2., 2.],</span><br><span class="line">        [2., 2., 2.]], grad_fn=&lt;MulBackward0&gt;)</span><br><span class="line">tensor([[2., 2., 2.],</span><br><span class="line">        [2., 2., 2.]])</span><br></pre></td></tr></table></figure><p>在上面的单元格中，我们看到 <code>b1</code> 有一个 <code>grad_fn</code> （即跟踪的计算历史），这正是我们所期望的，因为它是从张量 <code>a</code> ，已打开 autograd。当我们使用 <code>a.requires_grad = False</code> 显式关闭 autograd 时，将不再跟踪计算历史记录，正如我们在计算 <code>b2</code> 时看到的那样。</p><p>如果您只需要暂时关闭 autograd，更好的方法是使用 <code>torch.no_grad()</code> ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = torch.ones(<span class="number">2</span>, <span class="number">3</span>, requires_grad=<span class="literal">True</span>) * <span class="number">2</span></span><br><span class="line">b = torch.ones(<span class="number">2</span>, <span class="number">3</span>, requires_grad=<span class="literal">True</span>) * <span class="number">3</span></span><br><span class="line"></span><br><span class="line">c1 = a + b</span><br><span class="line"><span class="built_in">print</span>(c1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    c2 = a + b</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line"></span><br><span class="line">c3 = a * b</span><br><span class="line"><span class="built_in">print</span>(c3)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tensor([[5., 5., 5.],</span><br><span class="line">        [5., 5., 5.]], grad_fn=&lt;AddBackward0&gt;)</span><br><span class="line">tensor([[5., 5., 5.],</span><br><span class="line">        [5., 5., 5.]])</span><br><span class="line">tensor([[6., 6., 6.],</span><br><span class="line">        [6., 6., 6.]], grad_fn=&lt;MulBackward0&gt;)</span><br></pre></td></tr></table></figure><p><code>torch.no_grad()</code> 也可以用作函数或方法装饰器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_tensors1</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="meta">@torch.no_grad()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_tensors2</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = torch.ones(<span class="number">2</span>, <span class="number">3</span>, requires_grad=<span class="literal">True</span>) * <span class="number">2</span></span><br><span class="line">b = torch.ones(<span class="number">2</span>, <span class="number">3</span>, requires_grad=<span class="literal">True</span>) * <span class="number">3</span></span><br><span class="line"></span><br><span class="line">c1 = add_tensors1(a, b)</span><br><span class="line"><span class="built_in">print</span>(c1)</span><br><span class="line"></span><br><span class="line">c2 = add_tensors2(a, b)</span><br><span class="line"><span class="built_in">print</span>(c2)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tensor([[5., 5., 5.],</span><br><span class="line">        [5., 5., 5.]], grad_fn=&lt;AddBackward0&gt;)</span><br><span class="line">tensor([[5., 5., 5.],</span><br><span class="line">        [5., 5., 5.]])</span><br></pre></td></tr></table></figure><p>有一个相应的上下文管理器 <code>torch.enable_grad()</code> ，用于在尚未打开 autograd 时打开它。它也可以用作装饰器。</p><p>最后，您可能有一个需要梯度跟踪的张量，但您想要一个不需要梯度跟踪的副本。为此，我们有 <code>Tensor</code> 对象的 <code>detach()</code> 方法 - 它创建与计算历史分离的张量的副本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = torch.rand(<span class="number">5</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">y = x.detach()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tensor([0.0670, 0.3890, 0.7264, 0.3559, 0.6584], requires_grad=True)</span><br><span class="line">tensor([0.0670, 0.3890, 0.7264, 0.3559, 0.6584])</span><br></pre></td></tr></table></figure><p>当我们想要绘制一些张量的图表时，我们就这样做了。这是因为 <code>matplotlib</code> 期望 NumPy 数组作为输入，并且对于 require_grad&#x3D;True 的张量，不会启用从 PyTorch 张量到 NumPy 数组的隐式转换。制作一份独立的副本可以让我们继续前进。</p><h3 id="Autograd-and-In-place-Operations"><a href="#Autograd-and-In-place-Operations" class="headerlink" title="Autograd and In-place Operations"></a>Autograd and In-place Operations</h3><p>到目前为止，在本笔记本的每个示例中，我们都使用变量来捕获计算的中间值。 Autograd 需要这些中间值来执行梯度计算。因此，在使用 autograd 时必须小心使用就地操作。这样做可能会破坏在 <code>backward()</code> 调用中计算导数所需的信息。如果您尝试对需要自动分级的叶变量进行就地操作，PyTorch 甚至会阻止您，如下所示。</p><blockquote><p>以下代码单元引发运行时错误。这是预料之中的。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = torch.linspace(<span class="number">0.</span>, <span class="number">2.</span> * math.pi, steps=<span class="number">25</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">torch.sin_(a)</span><br></pre></td></tr></table></figure><h2 id="Autograd-Profiler"><a href="#Autograd-Profiler" class="headerlink" title="Autograd Profiler"></a>Autograd Profiler</h2><p>Autograd 详细跟踪计算的每一步。这样的计算历史记录与计时信息相结合，将成为一个方便的分析器 - 并且 autograd 具有该功能。下面是一个快速示例用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">device = torch.device(<span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line">run_on_gpu = <span class="literal">False</span></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    device = torch.device(<span class="string">&#x27;cuda&#x27;</span>)</span><br><span class="line">    run_on_gpu = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">x = torch.randn(<span class="number">2</span>, <span class="number">3</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">y = torch.rand(<span class="number">2</span>, <span class="number">3</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">z = torch.ones(<span class="number">2</span>, <span class="number">3</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> torch.autograd.profiler.profile(use_cuda=run_on_gpu) <span class="keyword">as</span> prf:</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        z = (z / x) * y</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(prf.key_averages().table(sort_by=<span class="string">&#x27;self_cpu_time_total&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-------------------------  ------------  ------------  ------------  ------------  ------------  ------------  ------------  ------------  ------------  ------------</span><br><span class="line">                     Name    Self CPU %      Self CPU   CPU total %     CPU total  CPU time avg     Self CUDA   Self CUDA %    CUDA total  CUDA time avg    # of Calls</span><br><span class="line">-------------------------  ------------  ------------  ------------  ------------  ------------  ------------  ------------  ------------  ------------  ------------</span><br><span class="line">                aten::div        50.96%       5.808ms        50.96%       5.808ms       5.808us      16.107ms        50.44%      16.107ms      16.107us          1000</span><br><span class="line">                aten::mul        48.96%       5.581ms        48.96%       5.581ms       5.581us      15.827ms        49.56%      15.827ms      15.827us          1000</span><br><span class="line">    cudaDeviceSynchronize         0.08%       9.000us         0.08%       9.000us       9.000us       0.000us         0.00%       0.000us       0.000us             1</span><br><span class="line">-------------------------  ------------  ------------  ------------  ------------  ------------  ------------  ------------  ------------  ------------  ------------</span><br><span class="line">Self CPU time total: 11.398ms</span><br><span class="line">Self CUDA time total: 31.934ms</span><br></pre></td></tr></table></figure><p>分析器还可以标记各个代码子块，按输入张量形状分解数据，并将数据导出为 Chrome 跟踪工具文件。有关 API 的完整详细信息，请参阅文档。</p><h2 id="Advanced-Topic-More-Autograd-Detail-and-the-High-Level-API"><a href="#Advanced-Topic-More-Autograd-Detail-and-the-High-Level-API" class="headerlink" title="Advanced Topic: More Autograd Detail and the High-Level API"></a>Advanced Topic: More Autograd Detail and the High-Level API</h2><p>如果您有一个具有 n 维输入和 m 维输出的函数 $$\vec{y}&#x3D;f(\vec{x})$$，则完整梯度是每个输出相对于每个输入的导数的矩阵，称为雅可比行列式：<br>$$<br>J &#x3D; \begin{pmatrix}<br> \frac{∂y1}{∂x_1} &amp; … &amp; \frac{∂y_1}{∂x_n} \<br> … &amp; … &amp; …\<br> \frac{∂y_m}{∂x_n} &amp; …  &amp; \frac{∂y_m}{∂x_n}<br>\end{pmatrix}<br>$$</p><p>如果您有第二个函数$$l&#x3D;g(\vec{y})$$ ，它接受 m 维输入（即与上面的输出相同的维度），并返回标量输出，您可以表达其相对于 $$\vec{y}$$作为列向量， $$v&#x3D;(\frac{∂l}{∂y1} …  \frac{∂l}{∂y_m})$$ - 这实际上只是一个单列雅可比行列式。</p><p>更具体地说，将第一个函数想象为 PyTorch 模型（可能有多个输入和多个输出），第二个函数作为损失函数（模型的输出作为输入，损失值作为标量输出）。</p><p>如果我们将第一个函数的雅可比行列式乘以第二个函数的梯度，并应用链式法则，我们得到：</p><p>注意：您还可以使用等效操作 $$v^T * J$$，并返回行向量。</p><p>得到的列向量是第二个函数相对于第一个函数的输入的梯度，或者在我们的模型和损失函数的情况下，是损失相对于模型输入的梯度。</p><p>“torch.autograd”是计算这些产品的引擎。这就是我们在向后传递过程中累积学习权重梯度的方式。</p><p>因此， <code>backward()</code> 调用还可以采用可选的向量输入。该向量表示张量上的一组梯度，将其乘以其之前的自动梯度追踪张量的雅可比行列式。让我们尝试一个带有小向量的具体示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = torch.randn(<span class="number">3</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">y = x * <span class="number">2</span></span><br><span class="line"><span class="keyword">while</span> y.data.norm() &lt; <span class="number">1000</span>:</span><br><span class="line">    y = y * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensor([  299.4868,   425.4009, -1082.9885], grad_fn=&lt;MulBackward0&gt;)</span><br></pre></td></tr></table></figure><p>如果我们现在尝试调用 <code>y.backward()</code> ，我们会收到运行时错误和一条消息，<strong>表明只能为标量输出隐式计算梯度</strong>。对于多维输出，autograd 希望我们为这三个输出提供梯度，并将其乘以雅可比行列式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v = torch.tensor([<span class="number">0.1</span>, <span class="number">1.0</span>, <span class="number">0.0001</span>], dtype=torch.<span class="built_in">float</span>) <span class="comment"># stand-in for gradients</span></span><br><span class="line">y.backward(v)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x.grad)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensor([1.0240e+02, 1.0240e+03, 1.0240e-01])</span><br></pre></td></tr></table></figure><p>（请注意，输出梯度都与 2 的幂相关 - 这是我们从重复的倍增操作中所期望的。）</p><h3 id="The-High-Level-API"><a href="#The-High-Level-API" class="headerlink" title="The High-Level API"></a>The High-Level API</h3><p>autograd 上有一个 API，可让您直接访问重要的微分矩阵和向量运算。特别是，它允许您计算特定输入的特定函数的雅可比矩阵和海塞矩阵。 （Hessian 矩阵类似于雅可比矩阵，但表示所有偏二阶导数。）它还提供了使用这些矩阵求向量积的方法。</p><p>让我们采用一个简单函数的雅可比行列式，针对 2 个单元素输入进行计算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">exp_adder</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * x.exp() + <span class="number">3</span> * y</span><br><span class="line"></span><br><span class="line">inputs = (torch.rand(<span class="number">1</span>), torch.rand(<span class="number">1</span>)) <span class="comment"># arguments for the function</span></span><br><span class="line"><span class="built_in">print</span>(inputs)</span><br><span class="line">torch.autograd.functional.jacobian(exp_adder, inputs)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(tensor([0.7212]), tensor([0.2079]))</span><br><span class="line"></span><br><span class="line">(tensor([[4.1137]]), tensor([[3.]]))</span><br></pre></td></tr></table></figure><p>如果仔细观察，第一个输出应等于 $$2e^x$$ （因为 $$e^x$$的导数是 $$e^x$$ ），第二个值应为 3。</p><p>当然，您可以使用高阶张量来做到这一点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">inputs = (torch.rand(<span class="number">3</span>), torch.rand(<span class="number">3</span>)) <span class="comment"># arguments for the function</span></span><br><span class="line"><span class="built_in">print</span>(inputs)</span><br><span class="line">torch.autograd.functional.jacobian(exp_adder, inputs)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(tensor([0.2080, 0.2604, 0.4415]), tensor([0.5220, 0.9867, 0.4288]))</span><br><span class="line"></span><br><span class="line">(tensor([[2.4623, 0.0000, 0.0000],</span><br><span class="line">        [0.0000, 2.5950, 0.0000],</span><br><span class="line">        [0.0000, 0.0000, 3.1102]]), tensor([[3., 0., 0.],</span><br><span class="line">        [0., 3., 0.],</span><br><span class="line">        [0., 0., 3.]]))</span><br></pre></td></tr></table></figure><p><code>torch.autograd.functional.hessian()</code> 方法的工作原理相同（假设您的函数是两次可微的），但返回所有二阶导数的矩阵。</p><p>如果您提供向量，还有一个函数可以直接计算向量雅可比积：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">do_some_doubling</span>(<span class="params">x</span>):</span><br><span class="line">    y = x * <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> y.data.norm() &lt; <span class="number">1000</span>:</span><br><span class="line">        y = y * <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">inputs = torch.randn(<span class="number">3</span>)</span><br><span class="line">my_gradients = torch.tensor([<span class="number">0.1</span>, <span class="number">1.0</span>, <span class="number">0.0001</span>])</span><br><span class="line">torch.autograd.functional.vjp(do_some_doubling, inputs, v=my_gradients)</span><br></pre></td></tr></table></figure><p><code>torch.autograd.functional.jvp()</code> 方法执行与 <code>vjp()</code> 相同的矩阵乘法，但操作数相反。 <code>vhp()</code> 和 <code>hvp()</code> 方法对向量 Hessian 乘积执行相同的操作。</p><p>有关更多信息，包括函数式 API 文档中的性能说明</p>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>09-pytorch-introduction to pytorch tensors</title>
      <link href="/2023/11/13/09-pytorch-introduction-to-pytorch-tensors/"/>
      <url>/2023/11/13/09-pytorch-introduction-to-pytorch-tensors/</url>
      
        <content type="html"><![CDATA[<h1 id="INTRODUCTION-TO-PYTORCH-TENSORS"><a href="#INTRODUCTION-TO-PYTORCH-TENSORS" class="headerlink" title="INTRODUCTION TO PYTORCH TENSORS"></a>INTRODUCTION TO PYTORCH TENSORS</h1><p>张量是 PyTorch 中的核心数据抽象。此交互式笔记本深入介绍了 <code>torch.Tensor</code> 类。</p><p>首先，让我们导入 PyTorch 模块。我们还将添加 Python 的数学模块来简化一些示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> math</span><br></pre></td></tr></table></figure><h2 id="Creating-Tensors"><a href="#Creating-Tensors" class="headerlink" title="Creating Tensors"></a>Creating Tensors</h2><p>创建张量的最简单方法是使用 <code>torch.empty()</code> 调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = torch.empty(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#x27;torch.Tensor&#x27;&gt;</span><br><span class="line">tensor([[7.4055e-29, 0.0000e+00, 7.4101e-04, 0.0000e+00],</span><br><span class="line">        [2.8026e-45, 0.0000e+00, 0.0000e+00, 0.0000e+00],</span><br><span class="line">        [0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00]])</span><br></pre></td></tr></table></figure><p>让我们解释我们刚刚所做的事情：</p><ul><li><p>我们使用 <code>torch</code> 模块附带的众多工厂方法之一创建了一个张量。</p></li><li><p>张量本身是二维的，有 3 行和 4 列。</p></li><li><p>返回对象的类型是 <code>torch.Tensor</code> ，它是 <code>torch.FloatTensor</code> 的别名；默认情况下，PyTorch 张量由 32 位浮点数填充。 （下面详细介绍数据类型。）</p></li><li><p>打印张量时，您可能会看到一些看起来随机的值。 <code>torch.empty()</code> 调用为张量分配内存，但不使用任何值对其进行初始化 - 因此您看到的是分配时内存中的内容。</p></li></ul><p>关于张量及其维数和术语的简要说明：</p><ul><li>有时您会看到称为向量的一维张量。</li><li>同样，二维张量通常称为矩阵。</li><li>任何超过二维的东西通常都被称为张量。</li></ul><p>通常，您需要使用某个值来初始化张量。常见情况是全零、全一或随机值， <code>torch</code> 模块为所有这些提供工厂方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">zeros = torch.zeros(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(zeros)</span><br><span class="line"></span><br><span class="line">ones = torch.ones(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(ones)</span><br><span class="line"></span><br><span class="line">torch.manual_seed(<span class="number">1729</span>)</span><br><span class="line">random = torch.rand(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(random)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tensor([[0., 0., 0.],</span><br><span class="line">        [0., 0., 0.]])</span><br><span class="line">tensor([[1., 1., 1.],</span><br><span class="line">        [1., 1., 1.]])</span><br><span class="line">tensor([[0.3126, 0.3791, 0.3087],</span><br><span class="line">        [0.0736, 0.4216, 0.0691]])</span><br></pre></td></tr></table></figure><p>工厂方法都按照您的预期执行操作 - 我们有一个充满 0 的张量，另一个充满 1 的张量，另一个充满 0 到 1 之间的随机值的张量。</p><h3 id="Random-Tensors-and-Seeding"><a href="#Random-Tensors-and-Seeding" class="headerlink" title="Random Tensors and Seeding"></a>Random Tensors and Seeding</h3><p>说到随机张量，您是否注意到紧随其前面的 <code>torch.manual_seed()</code> 调用？使用随机值初始化张量（例如模型的学习权重）很常见，但有时（尤其是在研究环境中）您需要确保结果的可重复性。手动设置随机数生成器的种子是实现此目的的方法。让我们更仔细地看看：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">torch.manual_seed(<span class="number">1729</span>)</span><br><span class="line">random1 = torch.rand(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(random1)</span><br><span class="line"></span><br><span class="line">random2 = torch.rand(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(random2)</span><br><span class="line"></span><br><span class="line">torch.manual_seed(<span class="number">1729</span>)</span><br><span class="line">random3 = torch.rand(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(random3)</span><br><span class="line"></span><br><span class="line">random4 = torch.rand(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(random4)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tensor([[0.3126, 0.3791, 0.3087],</span><br><span class="line">        [0.0736, 0.4216, 0.0691]])</span><br><span class="line">tensor([[0.2332, 0.4047, 0.2162],</span><br><span class="line">        [0.9927, 0.4128, 0.5938]])</span><br><span class="line">tensor([[0.3126, 0.3791, 0.3087],</span><br><span class="line">        [0.0736, 0.4216, 0.0691]])</span><br><span class="line">tensor([[0.2332, 0.4047, 0.2162],</span><br><span class="line">        [0.9927, 0.4128, 0.5938]])</span><br></pre></td></tr></table></figure><p>您应该在上面看到的是 <code>random1</code> 和 <code>random3</code> 具有相同的值， <code>random2</code> 和 <code>random4</code> 也是如此。手动设置 RNG 的种子会重置它，因此在大多数设置中，取决于随机数的相同计算应该提供相同的结果。</p><p>有关更多信息，请参阅有关重现性的 PyTorch 文档。 <a href="https://pytorch.org/docs/stable/notes/randomness.html">PyTorch documentation on reproducibility</a>.</p><h3 id="Tensor-Shapes"><a href="#Tensor-Shapes" class="headerlink" title="Tensor Shapes"></a>Tensor Shapes</h3><p>通常，当您对两个或多个张量执行操作时，它们需要具有相同的形状 - 即具有相同的维度数以及每个维度中相同的单元数。为此，我们有 <code>torch.*_like()</code> 方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">x = torch.empty(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(x.shape)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line">empty_like_x = torch.empty_like(x)</span><br><span class="line"><span class="built_in">print</span>(empty_like_x.shape)</span><br><span class="line"><span class="built_in">print</span>(empty_like_x)</span><br><span class="line"></span><br><span class="line">zeros_like_x = torch.zeros_like(x)</span><br><span class="line"><span class="built_in">print</span>(zeros_like_x.shape)</span><br><span class="line"><span class="built_in">print</span>(zeros_like_x)</span><br><span class="line"></span><br><span class="line">ones_like_x = torch.ones_like(x)</span><br><span class="line"><span class="built_in">print</span>(ones_like_x.shape)</span><br><span class="line"><span class="built_in">print</span>(ones_like_x)</span><br><span class="line"></span><br><span class="line">rand_like_x = torch.rand_like(x)</span><br><span class="line"><span class="built_in">print</span>(rand_like_x.shape)</span><br><span class="line"><span class="built_in">print</span>(rand_like_x)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">torch.Size([<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">tensor([[[<span class="number">9.4454e-02</span>, <span class="number">0.0000e+00</span>, <span class="number">1.4013e-45</span>],</span><br><span class="line">         [<span class="number">1.4013e-45</span>, <span class="number">2.8026e-45</span>, <span class="number">4.5902e-41</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="number">0.0000e+00</span>, <span class="number">0.0000e+00</span>, <span class="number">0.0000e+00</span>],</span><br><span class="line">         [<span class="number">0.0000e+00</span>, <span class="number">0.0000e+00</span>, <span class="number">4.5901e-41</span>]]])</span><br><span class="line">torch.Size([<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">tensor([[[ <span class="number">2.7817e+07</span>,  <span class="number">0.0000e+00</span>,  <span class="number">1.9560e-03</span>],</span><br><span class="line">         [ <span class="number">0.0000e+00</span>,  <span class="number">1.8199e-37</span>,  <span class="number">0.0000e+00</span>]],</span><br><span class="line"></span><br><span class="line">        [[ <span class="number">0.0000e+00</span>,  <span class="number">0.0000e+00</span>,  <span class="number">4.7316e-03</span>],</span><br><span class="line">         [ <span class="number">0.0000e+00</span>, -<span class="number">8.1359e-04</span>,  <span class="number">4.5901e-41</span>]]])</span><br><span class="line">torch.Size([<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">tensor([[[<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">         [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">         [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>]]])</span><br><span class="line">torch.Size([<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">tensor([[[<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">         [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">         [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>]]])</span><br><span class="line">torch.Size([<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">tensor([[[<span class="number">0.6128</span>, <span class="number">0.1519</span>, <span class="number">0.0453</span>],</span><br><span class="line">         [<span class="number">0.5035</span>, <span class="number">0.9978</span>, <span class="number">0.3884</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="number">0.6929</span>, <span class="number">0.1703</span>, <span class="number">0.1384</span>],</span><br><span class="line">         [<span class="number">0.4759</span>, <span class="number">0.7481</span>, <span class="number">0.0361</span>]]])</span><br></pre></td></tr></table></figure><p>上面代码单元中的第一个新内容是在张量上使用 <code>.shape</code> 属性。此属性包含张量每个维度的范围的列表 - 在我们的示例中， <code>x</code> 是形状为 2 x 2 x 3 的三维张量。</p><p>下面，我们调用 <code>.empty_like()</code> 、 <code>.zeros_like()</code> 、 <code>.ones_like()</code> 和 <code>.rand_like()</code> 方法。使用 <code>.shape</code> 属性，我们可以验证这些方法中的每一个都返回具有相同维度和范围的张量。</p><p>创建将覆盖的张量的最后一种方法是直接从 PyTorch 集合指定其数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">some_constants = torch.tensor([[<span class="number">3.1415926</span>, <span class="number">2.71828</span>], [<span class="number">1.61803</span>, <span class="number">0.0072897</span>]])</span><br><span class="line"><span class="built_in">print</span>(some_constants)</span><br><span class="line"></span><br><span class="line">some_integers = torch.tensor((<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>))</span><br><span class="line"><span class="built_in">print</span>(some_integers)</span><br><span class="line"></span><br><span class="line">more_integers = torch.tensor(((<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>), [<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>]))</span><br><span class="line"><span class="built_in">print</span>(more_integers)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tensor([[3.1416, 2.7183],</span><br><span class="line">        [1.6180, 0.0073]])</span><br><span class="line">tensor([ 2,  3,  5,  7, 11, 13, 17, 19])</span><br><span class="line">tensor([[2, 4, 6],</span><br><span class="line">        [3, 6, 9]])</span><br></pre></td></tr></table></figure><p>如果 Python 元组或列表中已有数据，则使用 <code>torch.tensor()</code> 是创建张量的最直接方法。如上所示，嵌套集合将产生多维张量。</p><blockquote><p><code>torch.tensor()</code> 创建数据的副本。</p></blockquote><h3 id="Tensor-Data-Types"><a href="#Tensor-Data-Types" class="headerlink" title="Tensor Data Types"></a>Tensor Data Types</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = torch.ones((<span class="number">2</span>, <span class="number">3</span>), dtype=torch.int16)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">b = torch.rand((<span class="number">2</span>, <span class="number">3</span>), dtype=torch.float64) * <span class="number">20.</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line">c = b.to(torch.int32)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tensor([[1, 1, 1],</span><br><span class="line">        [1, 1, 1]], dtype=torch.int16)</span><br><span class="line">tensor([[ 0.9956,  1.4148,  5.8364],</span><br><span class="line">        [11.2406, 11.2083, 11.6692]], dtype=torch.float64)</span><br><span class="line">tensor([[ 0,  1,  5],</span><br><span class="line">        [11, 11, 11]], dtype=torch.int32)</span><br></pre></td></tr></table></figure><p>设置张量基础数据类型的最简单方法是在创建时使用可选参数。在上面单元格的第一行中，我们为张量 <code>a</code> 设置 <code>dtype=torch.int16</code> 。当我们打印 <code>a</code> 时，我们可以看到它充满了 <code>1</code> 而不是 <code>1.</code> - Python 的微妙提示是这是一个整数类型而不是浮点数。</p><p>关于打印 <code>a</code> 需要注意的另一件事是，与我们将 <code>dtype</code> 保留为默认值（32 位浮点）不同，打印张量还指定其 <code>dtype</code> .</p><p>您可能还发现，我们从将张量的形状指定为一系列整数参数，到将这些参数分组到一个元组中。这并不是绝对必要的 - PyTorch 会将一系列初始的、未标记的整数参数作为张量形状 - 但在添加可选参数时，它可以使您的意图更具可读性。</p><p>设置数据类型的另一种方法是使用 <code>.to()</code> 方法。在上面的单元格中，我们以通常的方式创建一个随机浮点张量 <code>b</code> 。接下来，我们通过使用 <code>.to()</code> 方法将 <code>b</code> 转换为 32 位整数来创建 <code>c</code> 。请注意， <code>c</code> 包含与 <code>b</code> 相同的所有值，但被截断为整数。</p><p>可用的数据类型包括：</p><ul><li><code>torch.bool</code></li><li><code>torch.int8</code></li><li><code>torch.uint8</code></li><li><code>torch.int16</code></li><li><code>torch.int32</code></li><li><code>torch.int64</code></li><li><code>torch.half</code></li><li><code>torch.float</code></li><li><code>torch.double</code></li><li><code>torch.bfloat</code></li></ul><h2 id="Math-Logic-with-PyTorch-Tensors"><a href="#Math-Logic-with-PyTorch-Tensors" class="headerlink" title="Math &amp; Logic with PyTorch Tensors"></a>Math &amp; Logic with PyTorch Tensors</h2><p>现在您已经了解了创建张量的一些方法……您可以用它们做什么？</p><p>让我们首先看看基本算术，以及张量如何与简单标量交互：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ones = torch.zeros(<span class="number">2</span>, <span class="number">2</span>) + <span class="number">1</span></span><br><span class="line">twos = torch.ones(<span class="number">2</span>, <span class="number">2</span>) * <span class="number">2</span></span><br><span class="line">threes = (torch.ones(<span class="number">2</span>, <span class="number">2</span>) * <span class="number">7</span> - <span class="number">1</span>) / <span class="number">2</span></span><br><span class="line">fours = twos ** <span class="number">2</span></span><br><span class="line">sqrt2s = twos ** <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ones)</span><br><span class="line"><span class="built_in">print</span>(twos)</span><br><span class="line"><span class="built_in">print</span>(threes)</span><br><span class="line"><span class="built_in">print</span>(fours)</span><br><span class="line"><span class="built_in">print</span>(sqrt2s)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tensor([[1., 1.],</span><br><span class="line">        [1., 1.]])</span><br><span class="line">tensor([[2., 2.],</span><br><span class="line">        [2., 2.]])</span><br><span class="line">tensor([[3., 3.],</span><br><span class="line">        [3., 3.]])</span><br><span class="line">tensor([[4., 4.],</span><br><span class="line">        [4., 4.]])</span><br><span class="line">tensor([[1.4142, 1.4142],</span><br><span class="line">        [1.4142, 1.4142]])</span><br></pre></td></tr></table></figure><p>如上所示，张量和标量之间的算术运算（例如加法、减法、乘法、除法和求幂）分布在张量的每个元素上。由于此类操作的输出将是一个张量，因此您可以使用通常的运算符优先级规则将它们链接在一起，如我们创建 <code>threes</code> 的行中所示。</p><p>两个张量之间的类似操作也像您直观地期望的那样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">powers2 = twos ** torch.tensor([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line"><span class="built_in">print</span>(powers2)</span><br><span class="line"></span><br><span class="line">fives = ones + fours</span><br><span class="line"><span class="built_in">print</span>(fives)</span><br><span class="line"></span><br><span class="line">dozens = threes * fours</span><br><span class="line"><span class="built_in">print</span>(dozens)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tensor([[ 2.,  4.],</span><br><span class="line">        [ 8., 16.]])</span><br><span class="line">tensor([[5., 5.],</span><br><span class="line">        [5., 5.]])</span><br><span class="line">tensor([[12., 12.],</span><br><span class="line">        [12., 12.]])</span><br></pre></td></tr></table></figure><p>这里需要注意的是，前面的代码单元中的所有张量都具有相同的形状。当我们尝试对形状不同的张量执行二元运算时会发生什么？</p><blockquote><p>以下单元格抛出运行时错误。这是故意的。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = torch.rand(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">b = torch.rand(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a * b)</span><br></pre></td></tr></table></figure><p>在一般情况下，您不能以这种方式对不同形状的张量进行操作，即使在像上面的单元格这样的情况下，其中张量具有相同数量的元素。</p><h3 id="In-Brief-Tensor-Broadcasting"><a href="#In-Brief-Tensor-Broadcasting" class="headerlink" title="In Brief: Tensor Broadcasting"></a>In Brief: Tensor Broadcasting</h3><blockquote><p>如果您熟悉 NumPy ndarray 中的广播语义，您会发现此处适用相同的规则。</p></blockquote><p>相同形状规则的例外是张量广播。这是一个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rand = torch.rand(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">doubled = rand * (torch.ones(<span class="number">1</span>, <span class="number">4</span>) * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rand)</span><br><span class="line"><span class="built_in">print</span>(doubled)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tensor([[0.6146, 0.5999, 0.5013, 0.9397],</span><br><span class="line">        [0.8656, 0.5207, 0.6865, 0.3614]])</span><br><span class="line">tensor([[1.2291, 1.1998, 1.0026, 1.8793],</span><br><span class="line">        [1.7312, 1.0413, 1.3730, 0.7228]])</span><br></pre></td></tr></table></figure><p>这里有什么技巧呢？我们如何将 2x4 张量乘以 1x4 张量？</p><p>广播是一种在形状相似的张量之间执行操作的方法。在上面的示例中，一行四列张量乘以两行四列张量的两行。</p><p>这是深度学习中的一个重要操作。常见的示例是将学习权重张量乘以一批输入张量，分别将运算应用于批次中的每个实例，并返回相同形状的张量 - 就像我们的 (2, 4) * (1, 4)上面的示例返回形状为 (2, 4) 的张量。</p><p>广播规则如下：</p><ul><li>每个张量必须至少有一个维度 - 没有空张量。</li><li>比较两个张量的维度的大小，从最后到第一<ul><li>每个维度必须相等，或者</li><li>其中一个维度必须为 1，或者</li><li>该维度在张量之一中不存在</li></ul></li></ul><p>当然，正如您之前所见，形状相同的张量通常是“可广播的”。</p><p>以下是遵守上述规则并允许广播的一些情况示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a =     torch.ones(<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">b = a * torch.rand(   <span class="number">3</span>, <span class="number">2</span>) <span class="comment"># 3rd &amp; 2nd dims identical to a, dim 1 absent</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line">c = a * torch.rand(   <span class="number">3</span>, <span class="number">1</span>) <span class="comment"># 3rd dim = 1, 2nd dim identical to a</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line">d = a * torch.rand(   <span class="number">1</span>, <span class="number">2</span>) <span class="comment"># 3rd dim identical to a, 2nd dim = 1</span></span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">tensor([[[<span class="number">0.6493</span>, <span class="number">0.2633</span>],</span><br><span class="line">         [<span class="number">0.4762</span>, <span class="number">0.0548</span>],</span><br><span class="line">         [<span class="number">0.2024</span>, <span class="number">0.5731</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="number">0.6493</span>, <span class="number">0.2633</span>],</span><br><span class="line">         [<span class="number">0.4762</span>, <span class="number">0.0548</span>],</span><br><span class="line">         [<span class="number">0.2024</span>, <span class="number">0.5731</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="number">0.6493</span>, <span class="number">0.2633</span>],</span><br><span class="line">         [<span class="number">0.4762</span>, <span class="number">0.0548</span>],</span><br><span class="line">         [<span class="number">0.2024</span>, <span class="number">0.5731</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="number">0.6493</span>, <span class="number">0.2633</span>],</span><br><span class="line">         [<span class="number">0.4762</span>, <span class="number">0.0548</span>],</span><br><span class="line">         [<span class="number">0.2024</span>, <span class="number">0.5731</span>]]])</span><br><span class="line">tensor([[[<span class="number">0.7191</span>, <span class="number">0.7191</span>],</span><br><span class="line">         [<span class="number">0.4067</span>, <span class="number">0.4067</span>],</span><br><span class="line">         [<span class="number">0.7301</span>, <span class="number">0.7301</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="number">0.7191</span>, <span class="number">0.7191</span>],</span><br><span class="line">         [<span class="number">0.4067</span>, <span class="number">0.4067</span>],</span><br><span class="line">         [<span class="number">0.7301</span>, <span class="number">0.7301</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="number">0.7191</span>, <span class="number">0.7191</span>],</span><br><span class="line">         [<span class="number">0.4067</span>, <span class="number">0.4067</span>],</span><br><span class="line">         [<span class="number">0.7301</span>, <span class="number">0.7301</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="number">0.7191</span>, <span class="number">0.7191</span>],</span><br><span class="line">         [<span class="number">0.4067</span>, <span class="number">0.4067</span>],</span><br><span class="line">         [<span class="number">0.7301</span>, <span class="number">0.7301</span>]]])</span><br><span class="line">tensor([[[<span class="number">0.6276</span>, <span class="number">0.7357</span>],</span><br><span class="line">         [<span class="number">0.6276</span>, <span class="number">0.7357</span>],</span><br><span class="line">         [<span class="number">0.6276</span>, <span class="number">0.7357</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="number">0.6276</span>, <span class="number">0.7357</span>],</span><br><span class="line">         [<span class="number">0.6276</span>, <span class="number">0.7357</span>],</span><br><span class="line">         [<span class="number">0.6276</span>, <span class="number">0.7357</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="number">0.6276</span>, <span class="number">0.7357</span>],</span><br><span class="line">         [<span class="number">0.6276</span>, <span class="number">0.7357</span>],</span><br><span class="line">         [<span class="number">0.6276</span>, <span class="number">0.7357</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="number">0.6276</span>, <span class="number">0.7357</span>],</span><br><span class="line">         [<span class="number">0.6276</span>, <span class="number">0.7357</span>],</span><br><span class="line">         [<span class="number">0.6276</span>, <span class="number">0.7357</span>]]])</span><br></pre></td></tr></table></figure><p>仔细观察上面每个张量的值：</p><ul><li>创建 <code>b</code> 的乘法运算在 <code>a</code> 的每个“层”上广播。</li><li>对于 <code>c</code> ，该操作在 <code>a</code> 的每一层和每一行上广播 - 每个 3 元素列都是相同的。</li><li>对于 <code>d</code> ，我们将其切换 - 现在跨层和列的每一行都是相同的。</li></ul><p>有关广播的更多信息，请参阅有关该主题的 PyTorch 文档。</p><p>以下是一些尝试广播失败的示例：</p><blockquote><p>以下单元格抛出运行时错误。这是故意的。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a =     torch.ones(<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">b = a * torch.rand(<span class="number">4</span>, <span class="number">3</span>)    <span class="comment"># dimensions must match last-to-first</span></span><br><span class="line"></span><br><span class="line">c = a * torch.rand(   <span class="number">2</span>, <span class="number">3</span>) <span class="comment"># both 3rd &amp; 2nd dims different</span></span><br><span class="line"></span><br><span class="line">d = a * torch.rand((<span class="number">0</span>, ))   <span class="comment"># can&#x27;t broadcast with an empty tensor</span></span><br></pre></td></tr></table></figure><h3 id="More-Math-with-Tensors"><a href="#More-Math-with-Tensors" class="headerlink" title="More Math with Tensors"></a>More Math with Tensors</h3><p>PyTorch 张量有超过三百种可以对其执行的操作。</p><p>以下是一些主要操作类别的一个小样本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># common functions</span></span><br><span class="line">a = torch.rand(<span class="number">2</span>, <span class="number">4</span>) * <span class="number">2</span> - <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Common functions:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(torch.<span class="built_in">abs</span>(a))</span><br><span class="line"><span class="built_in">print</span>(torch.ceil(a))</span><br><span class="line"><span class="built_in">print</span>(torch.floor(a))</span><br><span class="line"><span class="built_in">print</span>(torch.clamp(a, -<span class="number">0.5</span>, <span class="number">0.5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># trigonometric functions and their inverses</span></span><br><span class="line">angles = torch.tensor([<span class="number">0</span>, math.pi / <span class="number">4</span>, math.pi / <span class="number">2</span>, <span class="number">3</span> * math.pi / <span class="number">4</span>])</span><br><span class="line">sines = torch.sin(angles)</span><br><span class="line">inverses = torch.asin(sines)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nSine and arcsine:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(angles)</span><br><span class="line"><span class="built_in">print</span>(sines)</span><br><span class="line"><span class="built_in">print</span>(inverses)</span><br><span class="line"></span><br><span class="line"><span class="comment"># bitwise operations</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nBitwise XOR:&#x27;</span>)</span><br><span class="line">b = torch.tensor([<span class="number">1</span>, <span class="number">5</span>, <span class="number">11</span>])</span><br><span class="line">c = torch.tensor([<span class="number">2</span>, <span class="number">7</span>, <span class="number">10</span>])</span><br><span class="line"><span class="built_in">print</span>(torch.bitwise_xor(b, c))</span><br><span class="line"></span><br><span class="line"><span class="comment"># comparisons:</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nBroadcasted, element-wise equality comparison:&#x27;</span>)</span><br><span class="line">d = torch.tensor([[<span class="number">1.</span>, <span class="number">2.</span>], [<span class="number">3.</span>, <span class="number">4.</span>]])</span><br><span class="line">e = torch.ones(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># many comparison ops support broadcasting!</span></span><br><span class="line"><span class="built_in">print</span>(torch.eq(d, e)) <span class="comment"># returns a tensor of type bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># reductions:</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nReduction ops:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(torch.<span class="built_in">max</span>(d))        <span class="comment"># returns a single-element tensor</span></span><br><span class="line"><span class="built_in">print</span>(torch.<span class="built_in">max</span>(d).item()) <span class="comment"># extracts the value from the returned tensor</span></span><br><span class="line"><span class="built_in">print</span>(torch.mean(d))       <span class="comment"># average</span></span><br><span class="line"><span class="built_in">print</span>(torch.std(d))        <span class="comment"># standard deviation</span></span><br><span class="line"><span class="built_in">print</span>(torch.prod(d))       <span class="comment"># product of all numbers</span></span><br><span class="line"><span class="built_in">print</span>(torch.unique(torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>]))) <span class="comment"># filter unique elements</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># vector and linear algebra operations</span></span><br><span class="line">v1 = torch.tensor([<span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>])         <span class="comment"># x unit vector</span></span><br><span class="line">v2 = torch.tensor([<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>])         <span class="comment"># y unit vector</span></span><br><span class="line">m1 = torch.rand(<span class="number">2</span>, <span class="number">2</span>)                   <span class="comment"># random matrix</span></span><br><span class="line">m2 = torch.tensor([[<span class="number">3.</span>, <span class="number">0.</span>], [<span class="number">0.</span>, <span class="number">3.</span>]]) <span class="comment"># three times identity matrix</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nVectors &amp; Matrices:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(torch.cross(v2, v1)) <span class="comment"># negative of z unit vector (v1 x v2 == -v2 x v1)</span></span><br><span class="line"><span class="built_in">print</span>(m1)</span><br><span class="line">m3 = torch.matmul(m1, m2)</span><br><span class="line"><span class="built_in">print</span>(m3)                  <span class="comment"># 3 times m1</span></span><br><span class="line"><span class="built_in">print</span>(torch.svd(m3))       <span class="comment"># singular value decomposition</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">Common functions:</span><br><span class="line">tensor([[0.9238, 0.5724, 0.0791, 0.2629],</span><br><span class="line">        [0.1986, 0.4439, 0.6434, 0.4776]])</span><br><span class="line">tensor([[-0., -0., 1., -0.],</span><br><span class="line">        [-0., 1., 1., -0.]])</span><br><span class="line">tensor([[-1., -1.,  0., -1.],</span><br><span class="line">        [-1.,  0.,  0., -1.]])</span><br><span class="line">tensor([[-0.5000, -0.5000,  0.0791, -0.2629],</span><br><span class="line">        [-0.1986,  0.4439,  0.5000, -0.4776]])</span><br><span class="line"></span><br><span class="line">Sine and arcsine:</span><br><span class="line">tensor([0.0000, 0.7854, 1.5708, 2.3562])</span><br><span class="line">tensor([0.0000, 0.7071, 1.0000, 0.7071])</span><br><span class="line">tensor([0.0000, 0.7854, 1.5708, 0.7854])</span><br><span class="line"></span><br><span class="line">Bitwise XOR:</span><br><span class="line">tensor([3, 2, 1])</span><br><span class="line"></span><br><span class="line">Broadcasted, element-wise equality comparison:</span><br><span class="line">tensor([[ True, False],</span><br><span class="line">        [False, False]])</span><br><span class="line"></span><br><span class="line">Reduction ops:</span><br><span class="line">tensor(4.)</span><br><span class="line">4.0</span><br><span class="line">tensor(2.5000)</span><br><span class="line">tensor(1.2910)</span><br><span class="line">tensor(24.)</span><br><span class="line">tensor([1, 2])</span><br><span class="line"></span><br><span class="line">Vectors &amp; Matrices:</span><br><span class="line">tensor([ 0.,  0., -1.])</span><br><span class="line">tensor([[0.7375, 0.8328],</span><br><span class="line">        [0.8444, 0.2941]])</span><br><span class="line">tensor([[2.2125, 2.4985],</span><br><span class="line">        [2.5332, 0.8822]])</span><br><span class="line">torch.return_types.svd(</span><br><span class="line">U=tensor([[-0.7889, -0.6145],</span><br><span class="line">        [-0.6145,  0.7889]]),</span><br><span class="line">S=tensor([4.1498, 1.0548]),</span><br><span class="line">V=tensor([[-0.7957,  0.6056],</span><br><span class="line">        [-0.6056, -0.7957]]))</span><br></pre></td></tr></table></figure><p>这是操作的一个小样本。有关更多详细信息和数学函数的完整清单，请查看文档。</p><h3 id="Altering-Tensors-in-Place"><a href="#Altering-Tensors-in-Place" class="headerlink" title="Altering Tensors in Place"></a>Altering Tensors in Place</h3><p>大多数张量上的二元运算都会返回第三个新张量。当我们说 <code>c = a * b</code> （其中 <code>a</code> 和 <code>b</code> 是张量）时，新张量 <code>c</code> 将占据与之前的张量不同的内存区域。其他张量。</p><p>不过，有时您可能希望就地更改张量 - 例如，如果您正在进行逐元素计算，您可以丢弃中间值。为此，大多数数学函数都有一个带有附加下划线（ <code>_</code> ）的版本，它将改变张量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = torch.tensor([<span class="number">0</span>, math.pi / <span class="number">4</span>, math.pi / <span class="number">2</span>, <span class="number">3</span> * math.pi / <span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(torch.sin(a))   <span class="comment"># this operation creates a new tensor in memory</span></span><br><span class="line"><span class="built_in">print</span>(a)              <span class="comment"># a has not changed</span></span><br><span class="line"></span><br><span class="line">b = torch.tensor([<span class="number">0</span>, math.pi / <span class="number">4</span>, math.pi / <span class="number">2</span>, <span class="number">3</span> * math.pi / <span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nb:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(torch.sin_(b))  <span class="comment"># note the underscore</span></span><br><span class="line"><span class="built_in">print</span>(b)              <span class="comment"># b has changed</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a:</span><br><span class="line">tensor([0.0000, 0.7854, 1.5708, 2.3562])</span><br><span class="line">tensor([0.0000, 0.7071, 1.0000, 0.7071])</span><br><span class="line">tensor([0.0000, 0.7854, 1.5708, 2.3562])</span><br><span class="line"></span><br><span class="line">b:</span><br><span class="line">tensor([0.0000, 0.7854, 1.5708, 2.3562])</span><br><span class="line">tensor([0.0000, 0.7071, 1.0000, 0.7071])</span><br><span class="line">tensor([0.0000, 0.7071, 1.0000, 0.7071])</span><br></pre></td></tr></table></figure><p>对于算术运算，有一些行为类似的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = torch.ones(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">b = torch.rand(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Before:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nAfter adding:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a.add_(b))</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nAfter multiplying&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(b.mul_(b))</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><p>请注意，这些就地算术函数是 <code>torch.Tensor</code> 对象上的方法，而不是像许多其他函数（例如 <code>torch.sin()</code> ）一样附加到 <code>torch</code> 模块。正如您从 <code>a.add_(b)</code> 中看到的，调用张量是就地更改的张量。</p><p>还有另一种选择可以将计算结果放入现有的分配张量中。到目前为止我们已经看到的许多方法和函数 - 包括创建方法！ - 有一个 <code>out</code> 参数，可让您指定一个张量来接收输出。如果 <code>out</code> 张量的形状正确且 <code>dtype</code> ，则无需新的内存分配即可发生这种情况：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a = torch.rand(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">b = torch.rand(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">c = torch.zeros(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">old_id = <span class="built_in">id</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">d = torch.matmul(a, b, out=c)</span><br><span class="line"><span class="built_in">print</span>(c)                <span class="comment"># contents of c have changed</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> c <span class="keyword">is</span> d           <span class="comment"># test c &amp; d are same object, not just containing equal values</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">id</span>(c) == old_id  <span class="comment"># make sure that our new c is the same object as the old one</span></span><br><span class="line"></span><br><span class="line">torch.rand(<span class="number">2</span>, <span class="number">2</span>, out=c) <span class="comment"># works for creation too!</span></span><br><span class="line"><span class="built_in">print</span>(c)                <span class="comment"># c has changed again</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">id</span>(c) == old_id  <span class="comment"># still the same object!</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tensor([[0., 0.],</span><br><span class="line">        [0., 0.]])</span><br><span class="line">tensor([[0.3653, 0.8699],</span><br><span class="line">        [0.2364, 0.3604]])</span><br><span class="line">tensor([[0.0776, 0.4004],</span><br><span class="line">        [0.9877, 0.0352]])</span><br></pre></td></tr></table></figure><h2 id="Copying-Tensors"><a href="#Copying-Tensors" class="headerlink" title="Copying Tensors"></a>Copying Tensors</h2><p>与 Python 中的任何对象一样，将张量分配给变量会使该变量成为张量的标签，并且不会复制它。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = torch.ones(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">b = a</span><br><span class="line"></span><br><span class="line">a[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">561</span>  <span class="comment"># we change a...</span></span><br><span class="line"><span class="built_in">print</span>(b)       <span class="comment"># ...and b is also altered</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tensor([[  1., 561.],</span><br><span class="line">        [  1.,   1.]])</span><br></pre></td></tr></table></figure><p>但是，如果您想要处理数据的单独副本怎么办？ <code>clone()</code> 方法适合您：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = torch.ones(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">b = a.clone()</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> b <span class="keyword">is</span> <span class="keyword">not</span> a      <span class="comment"># different objects in memory...</span></span><br><span class="line"><span class="built_in">print</span>(torch.eq(a, b))  <span class="comment"># ...but still with the same contents!</span></span><br><span class="line"></span><br><span class="line">a[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">561</span>          <span class="comment"># a changes...</span></span><br><span class="line"><span class="built_in">print</span>(b)               <span class="comment"># ...but b is still all ones</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tensor([[True, True],</span><br><span class="line">        [True, True]])</span><br><span class="line">tensor([[1., 1.],</span><br><span class="line">        [1., 1.]])</span><br></pre></td></tr></table></figure><p>使用“clone()”时需要注意一件重要的事情。如果您的源张量启用了 autograd，那么克隆张量也将启用。这将在 autograd 的视频中更深入地介绍，但如果您想要详细信息的简单版本，请继续。</p><p>在许多情况下，这就是您想要的。例如，如果您的模型在其 <code>forward()</code> 方法中具有多个计算路径，并且原始张量及其克隆都对模型的输出有贡献，那么为了启用模型学习，您需要为两个张量打开 autograd。如果您的源张量启用了自动梯度（如果它是一组学习权重或从涉及权重的计算中派生的，通常会启用自动梯度），那么您将得到您想要的结果。</p><p>另一方面，如果您正在进行计算，其中原始张量及其克隆都不需要跟踪梯度，那么只要源张量关闭了 autograd，您就可以开始了。</p><p>不过，还有第三种情况：假设您正在模型的 <code>forward()</code> 函数中执行计算，其中默认情况下为所有内容打开渐变，但您想在中途提取一些值来生成一些指标。在这种情况下，您不希望源张量的克隆副本跟踪梯度 - 通过关闭 autograd 的历史记录跟踪可以提高性能。为此，您可以在源张量上使用 <code>.detach()</code> 方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = torch.rand(<span class="number">2</span>, <span class="number">2</span>, requires_grad=<span class="literal">True</span>) <span class="comment"># turn on autograd</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">b = a.clone()</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line">c = a.detach().clone()</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tensor([[0.0905, 0.4485],</span><br><span class="line">        [0.8740, 0.2526]], requires_grad=True)</span><br><span class="line">tensor([[0.0905, 0.4485],</span><br><span class="line">        [0.8740, 0.2526]], grad_fn=&lt;CloneBackward0&gt;)</span><br><span class="line">tensor([[0.0905, 0.4485],</span><br><span class="line">        [0.8740, 0.2526]])</span><br><span class="line">tensor([[0.0905, 0.4485],</span><br><span class="line">        [0.8740, 0.2526]], requires_grad=True)</span><br></pre></td></tr></table></figure><ul><li>我们创建 <code>a</code> 并打开 <code>requires_grad=True</code> 。我们还没有讨论这个可选参数，但会在 autograd 单元中讨论。</li><li>当我们打印 <code>a</code> 时，它通知我们属性 <code>requires_grad=True</code> - 这意味着自动分级和计算历史跟踪已打开。</li><li>我们克隆 <code>a</code> 并将其标记为 <code>b</code> 。当我们打印 <code>b</code> 时，我们可以看到它正在跟踪其计算历史记录 - 它继承了 <code>a</code> 的 autograd 设置，并添加到计算历史记录中。</li><li>我们克隆了a到c，但是我们调用了a的detach方法后才调用clone</li><li>打印 <code>c</code> ，我们没有看到计算历史，也没有 <code>requires_grad=True</code> 。</li></ul><p><code>detach()</code> 方法将张量从其计算历史中分离出来。它说，“做接下来的任何事情，就好像自动分级已关闭一样。”它在不更改 <code>a</code> 的情况下执行此操作 - 您可以看到，当我们在末尾再次打印 <code>a</code> 时，它保留了其 <code>requires_grad=True</code> 属性。</p><h2 id="Moving-to-GPU"><a href="#Moving-to-GPU" class="headerlink" title="Moving to GPU"></a>Moving to GPU</h2><p>PyTorch的主要优势之一是它在兼容CUDA的Nvidia GPU上具有强大的加速能力。（“CUDA”代表计算统一设备架构，这是英伟达的并行计算平台。）到目前为止，我们所做的一切都在CPU上。我们如何转向更快的硬件？</p><p>首先，我们应该使用 <code>is_available()</code> 方法检查 GPU 是否可用。</p><blockquote><p>如果您没有安装 CUDA 兼容的 GPU 和 CUDA 驱动程序，本节中的可执行单元将不会执行任何与 GPU 相关的代码。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;We have a GPU!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Sorry, CPU only.&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">We have a GPU!</span><br></pre></td></tr></table></figure><p>一旦我们确定一个或多个 GPU 可用，我们就需要将数据放在 GPU 可以看到的地方。您的 CPU 对计算机 RAM 中的数据进行计算。您的 GPU 附有专用内存。每当您想要在设备上执行计算时，您必须将该计算所需的所有数据移动到该设备可访问的内存中。 （通俗地说，“将数据移至 GPU 可访问的内存”缩写为“将数据移至 GPU”。）</p><p>有多种方法可以将数据传输到目标设备上。您可以在创建时执行此操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    gpu_rand = torch.rand(<span class="number">2</span>, <span class="number">2</span>, device=<span class="string">&#x27;cuda&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(gpu_rand)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Sorry, CPU only.&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tensor([[<span class="number">0.3344</span>, <span class="number">0.2640</span>],</span><br><span class="line">        [<span class="number">0.2119</span>, <span class="number">0.0582</span>]], device=<span class="string">&#x27;cuda:0&#x27;</span>)</span><br></pre></td></tr></table></figure><p>默认情况下，新的张量是在CPU上创建的，因此我们必须使用可选的设备参数指定何时在GPU上创建张量。你可以看到，当我们打印新的张量时，PyTorch会通知我们它在哪个设备上（如果它不在CPU上）。</p><p>您可以通过 <code>torch.cuda.device_count()</code> 查询 GPU 数量。如果您有多个 GPU，您可以通过索引指定它们： <code>device=&#39;cuda:0&#39;</code> 、 <code>device=&#39;cuda:1&#39;</code> 等。</p><p>作为一种编码实践，用字符串常量指定我们的设备是非常脆弱的。在理想的情况下，无论您是在 CPU 还是 GPU 硬件上，您的代码都会稳定地执行。您可以通过创建一个可以传递给张量而不是字符串的设备句柄来做到这一点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    my_device = torch.device(<span class="string">&#x27;cuda&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    my_device = torch.device(<span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Device: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(my_device))</span><br><span class="line"></span><br><span class="line">x = torch.rand(<span class="number">2</span>, <span class="number">2</span>, device=my_device)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Device: cuda</span><br><span class="line">tensor([[<span class="number">0.0024</span>, <span class="number">0.6778</span>],</span><br><span class="line">        [<span class="number">0.2441</span>, <span class="number">0.6812</span>]], device=<span class="string">&#x27;cuda:0&#x27;</span>)</span><br></pre></td></tr></table></figure><p>如果一台设备上有一个现有张量，则可以使用 <code>to()</code> 方法将其移动到另一台设备。以下代码行在 CPU 上创建一个张量，并将其移动到您在上一个单元中获取的设备句柄。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y = torch.rand(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">y = y.to(my_device)</span><br></pre></td></tr></table></figure><p>重要的是要知道，为了进行涉及两个或多个张量的计算，所有张量必须位于同一设备上。无论您是否有可用的 GPU 设备，以下代码都会引发运行时错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = torch.rand(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">y = torch.rand(<span class="number">2</span>, <span class="number">2</span>, device=<span class="string">&#x27;gpu&#x27;</span>)</span><br><span class="line">z = x + y  <span class="comment"># exception will be thrown</span></span><br></pre></td></tr></table></figure><h2 id="Manipulating-Tensor-Shapes"><a href="#Manipulating-Tensor-Shapes" class="headerlink" title="Manipulating Tensor Shapes"></a>Manipulating Tensor Shapes</h2><p>有时，您需要更改张量的形状。下面，我们将讨论一些常见情况以及如何处理它们。</p><h3 id="Changing-the-Number-of-Dimensions"><a href="#Changing-the-Number-of-Dimensions" class="headerlink" title="Changing the Number of Dimensions"></a>Changing the Number of Dimensions</h3><p>您可能需要更改维度数的一种情况是将单个输入实例传递给模型。 PyTorch 模型通常需要批量输入。</p><p>例如，假设有一个模型适用于 3 x 226 x 226 图像 - 具有 3 个颜色通道的 226 像素正方形。当您加载并转换它时，您将获得形状 <code>(3, 226, 226)</code> 的张量。不过，您的模型需要输入形状 <code>(N, 3, 226, 226)</code> ，其中 <code>N</code> 是批次中的图像数量。那么如何制作一批呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = torch.rand(<span class="number">3</span>, <span class="number">226</span>, <span class="number">226</span>)</span><br><span class="line">b = a.unsqueeze(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a.shape)</span><br><span class="line"><span class="built_in">print</span>(b.shape)</span><br></pre></td></tr></table></figure><p><code>unsqueeze()</code> 方法添加范围为 1 的维度。 <code>unsqueeze(0)</code> 将其添加为新的第 0 维 - 现在您拥有一批 1 维！</p><p>那么如果这不挤压呢？我们所说的挤压是什么意思？我们利用了这样一个事实：范围为 1 的任何维度都不会改变张量中的元素数量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c = torch.rand(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensor([[[[[0.2347]]]]])</span><br></pre></td></tr></table></figure><p>继续上面的示例，假设模型的输出是每个输入的 20 元素向量。然后，您会期望输出具有形状 <code>(N, 20)</code> ，其中 <code>N</code> 是输入批次中的实例数。这意味着对于我们的单输入批次，我们将获得形状 <code>(1, 20)</code> 的输出。</p><p>如果您想使用该输出进行一些非批量计算（只需要 20 个元素向量）怎么办？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = torch.rand(<span class="number">1</span>, <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(a.shape)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">b = a.squeeze(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(b.shape)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line">c = torch.rand(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(c.shape)</span><br><span class="line"></span><br><span class="line">d = c.squeeze(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(d.shape)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">torch.Size([1, 20])</span><br><span class="line">tensor([[0.1899, 0.4067, 0.1519, 0.1506, 0.9585, 0.7756, 0.8973, 0.4929, 0.2367,</span><br><span class="line">         0.8194, 0.4509, 0.2690, 0.8381, 0.8207, 0.6818, 0.5057, 0.9335, 0.9769,</span><br><span class="line">         0.2792, 0.3277]])</span><br><span class="line">torch.Size([20])</span><br><span class="line">tensor([0.1899, 0.4067, 0.1519, 0.1506, 0.9585, 0.7756, 0.8973, 0.4929, 0.2367,</span><br><span class="line">        0.8194, 0.4509, 0.2690, 0.8381, 0.8207, 0.6818, 0.5057, 0.9335, 0.9769,</span><br><span class="line">        0.2792, 0.3277])</span><br><span class="line">torch.Size([2, 2])</span><br><span class="line">torch.Size([2, 2])</span><br></pre></td></tr></table></figure><p>您可以从形状中看到我们的二维张量现在是一维的，如果您仔细观察上面单元格的输出，您会发现打印 <code>a</code> 显示了一组“额外”的方括号 <code>[]</code> 由于有额外的维度。</p><p>您只能 <code>squeeze()</code> 范围为 1 的维度。请参阅上面我们尝试在 <code>c</code> 中压缩大小为 2 的维度，并返回与我们开始时相同的形状。对 <code>squeeze()</code> 和 <code>unsqueeze()</code> 的调用只能作用于范围 1 的维度，因为否则会改变张量中的元素数量。</p><p>您可能使用 <code>unsqueeze()</code> 的另一个地方是简化广播。回想一下上面的例子，我们有以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a =     torch.ones(<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">c = a * torch.rand(   <span class="number">3</span>, <span class="number">1</span>) <span class="comment"># 3rd dim = 1, 2nd dim identical to a</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><p>其最终效果是在维度 0 和 2 上广播操作，导致随机 3 x 1 张量按元素乘以 <code>a</code> 中的每个 3 元素列。</p><p>如果随机向量只是三元素向量怎么办？我们将失去进行广播的能力，因为最终尺寸将不符合广播规则。 <code>unsqueeze()</code> 来救援：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = torch.ones(<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">b = torch.rand(   <span class="number">3</span>)     <span class="comment"># trying to multiply a * b will give a runtime error</span></span><br><span class="line">c = b.unsqueeze(<span class="number">1</span>)       <span class="comment"># change to a 2-dimensional tensor, adding new dim at the end</span></span><br><span class="line"><span class="built_in">print</span>(c.shape)</span><br><span class="line"><span class="built_in">print</span>(a * c)             <span class="comment"># broadcasting works again!</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">torch.Size([<span class="number">3</span>, <span class="number">1</span>])</span><br><span class="line">tensor([[[<span class="number">0.1891</span>, <span class="number">0.1891</span>],</span><br><span class="line">         [<span class="number">0.3952</span>, <span class="number">0.3952</span>],</span><br><span class="line">         [<span class="number">0.9176</span>, <span class="number">0.9176</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="number">0.1891</span>, <span class="number">0.1891</span>],</span><br><span class="line">         [<span class="number">0.3952</span>, <span class="number">0.3952</span>],</span><br><span class="line">         [<span class="number">0.9176</span>, <span class="number">0.9176</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="number">0.1891</span>, <span class="number">0.1891</span>],</span><br><span class="line">         [<span class="number">0.3952</span>, <span class="number">0.3952</span>],</span><br><span class="line">         [<span class="number">0.9176</span>, <span class="number">0.9176</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="number">0.1891</span>, <span class="number">0.1891</span>],</span><br><span class="line">         [<span class="number">0.3952</span>, <span class="number">0.3952</span>],</span><br><span class="line">         [<span class="number">0.9176</span>, <span class="number">0.9176</span>]]])</span><br></pre></td></tr></table></figure><p><code>squeeze()</code> 和 <code>unsqueeze()</code> 方法也有就地版本 <code>squeeze_()</code> 和 <code>unsqueeze_()</code> ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">batch_me = torch.rand(<span class="number">3</span>, <span class="number">226</span>, <span class="number">226</span>)</span><br><span class="line"><span class="built_in">print</span>(batch_me.shape)</span><br><span class="line">batch_me.unsqueeze_(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(batch_me.shape)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">torch.Size([3, 226, 226])</span><br><span class="line">torch.Size([1, 3, 226, 226])</span><br></pre></td></tr></table></figure><p>有时您会想要更彻底地改变张量的形状，同时仍然保留元素的数量及其内容。发生这种情况的一种情况是在模型的卷积层和模型的线性层之间的接口处 - 这在图像分类模型中很常见。卷积核将产生形状特征 x 宽度 x 高度的输出张量，但下面的线性层需要一维输入。 <code>reshape()</code> 将为您执行此操作，前提是您请求的维度产生与输入张量相同数量的元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">output3d = torch.rand(<span class="number">6</span>, <span class="number">20</span>, <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(output3d.shape)</span><br><span class="line"></span><br><span class="line">input1d = output3d.reshape(<span class="number">6</span> * <span class="number">20</span> * <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(input1d.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># can also call it as a method on the torch module:</span></span><br><span class="line"><span class="built_in">print</span>(torch.reshape(output3d, (<span class="number">6</span> * <span class="number">20</span> * <span class="number">20</span>,)).shape)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">torch.Size([6, 20, 20])</span><br><span class="line">torch.Size([2400])</span><br><span class="line">torch.Size([2400])</span><br></pre></td></tr></table></figure><blockquote><p>上面单元格最后一行中的 <code>(6 * 20 * 20,)</code> 参数是因为 PyTorch 在指定张量形状时需要一个元组 - 但是当形状是方法的第一个参数时，它让我们作弊并只使用一个系列整数。在这里，我们必须添加括号和逗号来让方法相信这确实是一个单元素元组。</p></blockquote><p>如果可以， <code>reshape()</code> 将返回要更改的张量的视图 - 即查看同一底层内存区域的单独张量对象。这很重要：这意味着对源张量所做的任何更改都将反映在该张量的视图中，除非您 <code>clone()</code> 它。</p><p>在某些情况下， <code>reshape()</code> 必须返回携带数据副本的张量，这超出了本介绍的范围。有关更多信息，请参阅文档。</p><h2 id="NumPy-Bridge"><a href="#NumPy-Bridge" class="headerlink" title="NumPy Bridge"></a>NumPy Bridge</h2><p>在上面关于广播的部分中，提到 PyTorch 的广播语义与 NumPy 兼容 - 但 PyTorch 和 NumPy 之间的亲缘关系比这更深。</p><p>如果您现有的 ML 或科学代码的数据存储在 NumPy ndarray 中，您可能希望将相同的数据表示为 PyTorch 张量，无论是利用 PyTorch 的 GPU 加速还是利用其构建 ML 模型的高效抽象。在 ndarrays 和 PyTorch 张量之间切换很容易：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">numpy_array = np.ones((<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(numpy_array)</span><br><span class="line"></span><br><span class="line">pytorch_tensor = torch.from_numpy(numpy_array)</span><br><span class="line"><span class="built_in">print</span>(pytorch_tensor)</span><br></pre></td></tr></table></figure><p>PyTorch 创建一个与 NumPy 数组形状相同并包含相同数据的张量，甚至保留 NumPy 的默认 64 位浮点数据类型。</p><p>转换也可以很容易地以另一种方式进行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pytorch_rand = torch.rand(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(pytorch_rand)</span><br><span class="line"></span><br><span class="line">numpy_rand = pytorch_rand.numpy()</span><br><span class="line"><span class="built_in">print</span>(numpy_rand)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tensor([[0.8716, 0.2459, 0.3499],</span><br><span class="line">        [0.2853, 0.9091, 0.5695]])</span><br><span class="line">[[0.87163675 0.2458961  0.34993553]</span><br><span class="line"> [0.2853077  0.90905803 0.5695162 ]]</span><br></pre></td></tr></table></figure><p>重要的是要知道这些转换后的对象使用与其源对象相同的底层内存，这意味着对一个对象的更改会反映在另一个对象中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">numpy_array[1, 1] = 23</span><br><span class="line">print(pytorch_tensor)</span><br><span class="line"></span><br><span class="line">pytorch_rand[1, 1] = 17</span><br><span class="line">print(numpy_rand)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>如何创建张量，随机数种子，张量的类型</li><li>张量的计算，张量计算的限制<ul><li>张量的广播算法，为什么需要，限制条件是什么</li></ul></li><li>张量的原地运算符</li><li>如何复制张量，张量的引用和复制，张量复制的自动求导问题。</li><li>如何使用GPU加速，优雅健壮的GPU代码书写方式，多GPU如何使用，不同GPU之间张量不可运算。</li><li>如何拓展张量维度，如何减小张量维度，限制是什么？如何通过改变张量让张量传播算法合法。</li><li>reshape作用和使用场景</li><li>pytorch和numpy之间的关系，cpu上数据共通？如何互相转化。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>08-pytorch-introduction to pytorch</title>
      <link href="/2023/11/13/08-pytorch-introduction-to-pytorch/"/>
      <url>/2023/11/13/08-pytorch-introduction-to-pytorch/</url>
      
        <content type="html"><![CDATA[<h2 id="PyTorch-Tensors"><a href="#PyTorch-Tensors" class="headerlink" title="PyTorch Tensors"></a>PyTorch Tensors</h2><p>首先，我们将导入 pytorch。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br></pre></td></tr></table></figure><p>让我们看看一些基本的张量操作。首先，介绍几种创建张量的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">z = torch.zeros(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line"><span class="built_in">print</span>(z.dtype)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tensor([[0., 0., 0.],</span><br><span class="line">        [0., 0., 0.],</span><br><span class="line">        [0., 0., 0.],</span><br><span class="line">        [0., 0., 0.],</span><br><span class="line">        [0., 0., 0.]])</span><br><span class="line">torch.float32</span><br></pre></td></tr></table></figure><p>上面，我们创建了一个用零填充的 5x3 矩阵，并查询其数据类型，发现零是 32 位浮点数，这是默认的。</p><p>如果您想要整数怎么办？您始终可以覆盖默认值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i = torch.ones((<span class="number">5</span>, <span class="number">3</span>), dtype=torch.int16)</span><br><span class="line"><span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>您可以看到，当我们更改默认值时，张量会在打印时有用地报告这一点。</p><p>随机初始化学习权重是很常见的，通常使用 PRNG 的特定种子来实现结果的可重复性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">torch.manual_seed(<span class="number">1729</span>)</span><br><span class="line">r1 = torch.rand(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;A random tensor:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r1)</span><br><span class="line"></span><br><span class="line">r2 = torch.rand(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nA different random tensor:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r2) <span class="comment"># new values</span></span><br><span class="line"></span><br><span class="line">torch.manual_seed(<span class="number">1729</span>)</span><br><span class="line">r3 = torch.rand(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nShould match r1:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r3) <span class="comment"># repeats values of r1 because of re-seed</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">A random tensor:</span><br><span class="line">tensor([[<span class="number">0.3126</span>, <span class="number">0.3791</span>],</span><br><span class="line">        [<span class="number">0.3087</span>, <span class="number">0.0736</span>]])</span><br><span class="line"></span><br><span class="line">A different random tensor:</span><br><span class="line">tensor([[<span class="number">0.4216</span>, <span class="number">0.0691</span>],</span><br><span class="line">        [<span class="number">0.2332</span>, <span class="number">0.4047</span>]])</span><br><span class="line"></span><br><span class="line">Should <span class="keyword">match</span> r1:</span><br><span class="line">tensor([[<span class="number">0.3126</span>, <span class="number">0.3791</span>],</span><br><span class="line">        [<span class="number">0.3087</span>, <span class="number">0.0736</span>]])</span><br></pre></td></tr></table></figure><p>PyTorch 张量直观地执行算术运算。相似形状的张量可以相加、相乘等。标量的运算分布在张量上：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ones = torch.ones(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(ones)</span><br><span class="line"></span><br><span class="line">twos = torch.ones(<span class="number">2</span>, <span class="number">3</span>) * <span class="number">2</span> <span class="comment"># every element is multiplied by 2</span></span><br><span class="line"><span class="built_in">print</span>(twos)</span><br><span class="line"></span><br><span class="line">threes = ones + twos       <span class="comment"># addition allowed because shapes are similar</span></span><br><span class="line"><span class="built_in">print</span>(threes)              <span class="comment"># tensors are added element-wise</span></span><br><span class="line"><span class="built_in">print</span>(threes.shape)        <span class="comment"># this has the same dimensions as input tensors</span></span><br><span class="line"></span><br><span class="line">r1 = torch.rand(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">r2 = torch.rand(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># uncomment this line to get a runtime error</span></span><br><span class="line"><span class="comment"># r3 = r1 + r2</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tensor([[1., 1., 1.],</span><br><span class="line">        [1., 1., 1.]])</span><br><span class="line">tensor([[2., 2., 2.],</span><br><span class="line">        [2., 2., 2.]])</span><br><span class="line">tensor([[3., 3., 3.],</span><br><span class="line">        [3., 3., 3.]])</span><br><span class="line">torch.Size([2, 3])</span><br></pre></td></tr></table></figure><p>以下是可用数学运算的一小部分示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">r = (torch.rand(<span class="number">2</span>, <span class="number">2</span>) - <span class="number">0.5</span>) * <span class="number">2</span> <span class="comment"># values between -1 and 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;A random matrix, r:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Common mathematical operations are supported:</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nAbsolute value of r:&#x27;</span>)<span class="comment"># 绝对值</span></span><br><span class="line"><span class="built_in">print</span>(torch.<span class="built_in">abs</span>(r))</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...as are trigonometric functions:</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nInverse sine of r:&#x27;</span>)<span class="comment"># sin计算</span></span><br><span class="line"><span class="built_in">print</span>(torch.asin(r))</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...and linear algebra operations like determinant and singular value decomposition</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nDeterminant of r:&#x27;</span>)<span class="comment"># 行列式</span></span><br><span class="line"><span class="built_in">print</span>(torch.det(r))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nSingular value decomposition of r:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(torch.svd(r)) <span class="comment"># 矩阵的奇异值分解</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ...and statistical and aggregate operations:</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nAverage and standard deviation of r:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(torch.std_mean(r)) <span class="comment"># 平均值和标准差</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nMaximum value of r:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(torch.<span class="built_in">max</span>(r)) <span class="comment"># 最大值</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">A random matrix, r:</span><br><span class="line">tensor([[ 0.9956, -0.2232],</span><br><span class="line">        [ 0.3858, -0.6593]])</span><br><span class="line"></span><br><span class="line">Absolute value of r:</span><br><span class="line">tensor([[0.9956, 0.2232],</span><br><span class="line">        [0.3858, 0.6593]])</span><br><span class="line"></span><br><span class="line">Inverse sine of r:</span><br><span class="line">tensor([[ 1.4775, -0.2251],</span><br><span class="line">        [ 0.3961, -0.7199]])</span><br><span class="line"></span><br><span class="line">Determinant of r:</span><br><span class="line">tensor(-0.5703)</span><br><span class="line"></span><br><span class="line">Singular value decomposition of r:</span><br><span class="line">torch.return_types.svd(</span><br><span class="line">U=tensor([[-0.8353, -0.5497],</span><br><span class="line">        [-0.5497,  0.8353]]),</span><br><span class="line">S=tensor([1.1793, 0.4836]),</span><br><span class="line">V=tensor([[-0.8851, -0.4654],</span><br><span class="line">        [ 0.4654, -0.8851]]))</span><br><span class="line"></span><br><span class="line">Average and standard deviation of r:</span><br><span class="line">(tensor(0.7217), tensor(0.1247))</span><br><span class="line"></span><br><span class="line">Maximum value of r:</span><br><span class="line">tensor(0.9956)</span><br></pre></td></tr></table></figure><h2 id="PyTorch-Models"><a href="#PyTorch-Models" class="headerlink" title="PyTorch Models"></a>PyTorch Models</h2><p>我们来谈谈如何在 PyTorch 中表达模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch                     <span class="comment"># for all things PyTorch</span></span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn            <span class="comment"># for torch.nn.Module, the parent object for PyTorch models</span></span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F  <span class="comment"># for the activation function</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/11/13/yZ8xSDdnarG9upw.png" alt="image-20231113104802766"></p><p>上图是 LeNet-5 的图，它是最早的卷积神经网络之一，也是深度学习爆炸式增长的驱动因素之一。它旨在读取手写数字的小图像（MNIST 数据集），并正确分类图像中表示的数字。</p><p>以下是其工作原理的精简版：</p><ul><li>C1 层是一个卷积层，这意味着它会扫描输入图像以查找在训练期<strong>间学到的特征。</strong>它输出一张地图，显示它在图像中看到的每个学习特征的位置。该“激活图”在 S2 层中进行下采样。</li><li>C3 层是另一个卷积层，这次扫描 C1 的激活图<strong>以查找特征组合</strong>。它还提供了一个描述这些特征组合的空间位置的激活图，该激活图在 S4 层中进行下采样。</li><li>最后，最后的全连接层 F5、F6 和 OUTPUT 是一个分类器，它采用最终的激活图，并将其分类为代表 10 个数字的 10 个容器之一。</li></ul><p>我们如何用代码表达这个简单的神经网络？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LeNet</span>(nn.Module):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(LeNet, self).__init__()</span><br><span class="line">        <span class="comment"># 1 input image channel (black &amp; white), 6 output channels, 5x5 square convolution</span></span><br><span class="line">        <span class="comment"># kernel</span></span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">1</span>, <span class="number">6</span>, <span class="number">5</span>)</span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="number">6</span>, <span class="number">16</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="comment"># an affine operation: y = Wx + b</span></span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">16</span> * <span class="number">5</span> * <span class="number">5</span>, <span class="number">120</span>)  <span class="comment"># 5*5 from image dimension</span></span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">120</span>, <span class="number">84</span>)</span><br><span class="line">        self.fc3 = nn.Linear(<span class="number">84</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="comment"># Max pooling over a (2, 2) window</span></span><br><span class="line">        x = F.max_pool2d(F.relu(self.conv1(x)), (<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">        <span class="comment"># If the size is a square you can only specify a single number</span></span><br><span class="line">        x = F.max_pool2d(F.relu(self.conv2(x)), <span class="number">2</span>)</span><br><span class="line">        x = x.view(-<span class="number">1</span>, self.num_flat_features(x))</span><br><span class="line">        x = F.relu(self.fc1(x))</span><br><span class="line">        x = F.relu(self.fc2(x))</span><br><span class="line">        x = self.fc3(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">num_flat_features</span>(<span class="params">self, x</span>):</span><br><span class="line">        size = x.size()[<span class="number">1</span>:]  <span class="comment"># all dimensions except the batch dimension</span></span><br><span class="line">        num_features = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> size:</span><br><span class="line">            num_features *= s</span><br><span class="line">        <span class="keyword">return</span> num_features</span><br></pre></td></tr></table></figure><p>这演示了典型 PyTorch 模型的结构：</p><ul><li>它继承自 <code>torch.nn.Module</code> - 模块可以嵌套 - 事实上，甚至 <code>Conv2d</code> 和 <code>Linear</code> 层类也继承自 <code>torch.nn.Module</code> 。</li><li>模型将具有 <code>__init__()</code> 函数，在其中实例化其层，并加载它可能需要的任何数据工件（例如，NLP 模型可能加载词汇表）。</li><li>模型将具有 <code>forward()</code> 函数。这是实际计算发生的地方：输入通过网络层和各种函数传递以生成输出。</li><li>除此之外，您可以像任何其他 Python 类一样构建模型类，添加支持模型计算所需的任何属性和方法。</li></ul><p>让我们实例化该对象并通过它运行示例输入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">net = LeNet()</span><br><span class="line"><span class="built_in">print</span>(net)                         <span class="comment"># what does the object tell us about itself?</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.rand(<span class="number">1</span>, <span class="number">1</span>, <span class="number">32</span>, <span class="number">32</span>)   <span class="comment"># stand-in for a 32x32 black &amp; white image</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nImage batch shape:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">input</span>.shape)</span><br><span class="line"></span><br><span class="line">output = net(<span class="built_in">input</span>)                <span class="comment"># we don&#x27;t call forward() directly</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nRaw output:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br><span class="line"><span class="built_in">print</span>(output.shape)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">LeNet(</span><br><span class="line">  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))</span><br><span class="line">  (conv2): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))</span><br><span class="line">  (fc1): Linear(in_features=400, out_features=120, bias=True)</span><br><span class="line">  (fc2): Linear(in_features=120, out_features=84, bias=True)</span><br><span class="line">  (fc3): Linear(in_features=84, out_features=10, bias=True)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">Image batch shape:</span><br><span class="line">torch.Size([1, 1, 32, 32])</span><br><span class="line"></span><br><span class="line">Raw output:</span><br><span class="line">tensor([[ 0.0898,  0.0318,  0.1485,  0.0301, -0.0085, -0.1135, -0.0296,  0.0164,</span><br><span class="line">          0.0039,  0.0616]], grad_fn=&lt;AddmmBackward0&gt;)</span><br><span class="line">torch.Size([1, 10])</span><br></pre></td></tr></table></figure><p>上面发生了一些重要的事情：</p><p>首先，我们实例化 <code>LeNet</code> 类，然后打印 <code>net</code> 对象。 <code>torch.nn.Module</code> 的子类将报告它创建的图层及其形状和参数。如果您想了解模型处理的要点，这可以提供模型的便捷概述。</p><p>下面，我们创建一个虚拟输入，表示具有 1 个颜色通道的 32x32 图像。通常，您会加载图像图块并将其转换为这种形状的张量。</p><p>您可能已经注意到我们的张量有一个额外的维度 - 批量维度。 PyTorch 模型假设它们正在处理批量数据 - 例如，一批 16 个图像图块的形状为 <code>(16, 1, 32, 32)</code> 。由于我们只使用一张图像，因此我们创建了一批形状为 <code>(1, 1, 32, 32)</code> 的 1 图像。</p><p>我们通过像函数一样调用模型来请求模型进行推理： <code>net(input)</code> 。此调用的输出代表模型对输入代表特定数字的置信度。 （由于模型的这个实例还没有学到任何东西，所以我们不应该期望在输出中看到任何信号。）查看 <code>output</code> 的形状，我们可以看到它还有一个批次维度，其大小应始终与输入批次维度匹配。如果我们传入 16 个实例的输入批次， <code>output</code> 将具有 <code>(16, 10)</code> 的形状。</p><h2 id="Datasets-and-Dataloaders"><a href="#Datasets-and-Dataloaders" class="headerlink" title="Datasets and Dataloaders"></a>Datasets and Dataloaders</h2><p>下面，我们将演示如何使用 TorchVision 中可供下载的开放访问数据集之一、如何转换图像以供模型使用，以及如何使用 DataLoader 将批量数据提供给模型。</p><p>我们需要做的第一件事是将传入的图像转换为 PyTorch 张量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#%matplotlib inline</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"></span><br><span class="line">transform = transforms.Compose(</span><br><span class="line">    [transforms.ToTensor(),</span><br><span class="line">     transforms.Normalize((<span class="number">0.4914</span>, <span class="number">0.4822</span>, <span class="number">0.4465</span>), (<span class="number">0.2470</span>, <span class="number">0.2435</span>, <span class="number">0.2616</span>))])</span><br></pre></td></tr></table></figure><p>在这里，我们为输入指定两种转换：</p><ul><li><code>transforms.ToTensor()</code> 将 Pillow 加载的图像转换为 PyTorch 张量。</li><li><code>transforms.Normalize()</code> 调整张量的值，使其平均值为零，标准差为 1.0。大多数激活函数在 x &#x3D; 0 附近有最强的梯度，因此将数据集中在那里可以加快学习速度。传递给变换的值是数据集中图像的 rgb 值的平均值（第一个元组）和标准差（第二个元组）。您可以通过运行以下几行代码自行计算这些值：</li></ul><p>还有更多可用的变换，包括裁剪、居中、旋转和反射。</p><p>接下来，我们将创建 CIFAR10 数据集的实例。这是一组 32x32 彩色图像图块，代表 10 类物体：6 种动物（鸟、猫、鹿、狗、青蛙、马）和 4 种车辆（飞机、汽车、轮船、卡车）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">trainset = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">True</span>,</span><br><span class="line">                                        download=<span class="literal">True</span>, transform=transform)</span><br></pre></td></tr></table></figure><blockquote><p>When you run the cell above, it may take a little time for the dataset to download.</p></blockquote><p>这是在 PyTorch 中创建数据集对象的示例。可下载的数据集（如上面的 CIFAR-10）是 <code>torch.utils.data.Dataset</code> 的子类。 PyTorch 中的 <code>Dataset</code> 类包括 TorchVision、Torchtext 和 TorchAudio 中的可下载数据集，以及实用数据集类，例如 <code>torchvision.datasets.ImageFolder</code> ，它将读取标记图像的文件夹。您还可以创建自己的 <code>Dataset</code> 子类。</p><p>当我们实例化数据集时，我们需要告诉它一些事情：</p><ul><li>我们想要数据存放的文件系统路径。</li><li>我们是否使用这套数据集进行训练；大多数数据集将分为训练和测试子集。</li><li>如果我们还没有下载数据集，我们是否愿意下载。</li><li>我们想要应用于数据的转换。</li></ul><p>数据集准备好后，您可以将其提供给 <code>DataLoader</code> ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">trainloader = torch.utils.data.DataLoader(trainset, batch_size=<span class="number">4</span>,</span><br><span class="line">                                          shuffle=<span class="literal">True</span>, num_workers=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><code>Dataset</code> 子类包装对数据的访问，并专门针对其所服务的数据类型。 <code>DataLoader</code> 对数据一无所知，但会使用您指定的参数将 <code>Dataset</code> 提供的输入张量组织成批次。</p><p>在上面的示例中，我们要求 <code>DataLoader</code> 为我们提供来自 <code>trainset</code> 的 4 个图像批次，随机化它们的顺序 ( <code>shuffle=True</code> )，然后我们告诉它启动两个工作进程以从磁盘加载数据。</p><p>最好的做法是可视化 <code>DataLoader</code> 服务的批次：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">classes = (<span class="string">&#x27;plane&#x27;</span>, <span class="string">&#x27;car&#x27;</span>, <span class="string">&#x27;bird&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;deer&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;frog&#x27;</span>, <span class="string">&#x27;horse&#x27;</span>, <span class="string">&#x27;ship&#x27;</span>, <span class="string">&#x27;truck&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">imshow</span>(<span class="params">img</span>):</span><br><span class="line">    img = img / <span class="number">2</span> + <span class="number">0.5</span>     <span class="comment"># unnormalize</span></span><br><span class="line">    npimg = img.numpy()</span><br><span class="line">    plt.imshow(np.transpose(npimg, (<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># get some random training images</span></span><br><span class="line">dataiter = <span class="built_in">iter</span>(trainloader)</span><br><span class="line">images, labels = <span class="built_in">next</span>(dataiter)</span><br><span class="line"></span><br><span class="line"><span class="comment"># show images</span></span><br><span class="line">imshow(torchvision.utils.make_grid(images))</span><br><span class="line"><span class="comment"># print labels</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>.join(<span class="string">&#x27;%5s&#x27;</span> % classes[labels[j]] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ship   car horse  ship</span><br></pre></td></tr></table></figure><p>运行上面的单元格应该会向您显示一条由四个图像组成的条带，以及每个图像的正确标签。</p><h2 id="Training-Your-PyTorch-Model"><a href="#Training-Your-PyTorch-Model" class="headerlink" title="Training Your PyTorch Model"></a>Training Your PyTorch Model</h2><p>让我们将所有部分放在一起，并训练一个模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#%matplotlib inline</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><p>首先，我们需要训练和测试数据集。如果尚未下载，请运行下面的单元格以确保数据集已下载。 （可能需要一分钟。）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">transform = transforms.Compose(</span><br><span class="line">    [transforms.ToTensor(),</span><br><span class="line">     transforms.Normalize((<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>), (<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>))])</span><br><span class="line"></span><br><span class="line">trainset = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">True</span>,</span><br><span class="line">                                        download=<span class="literal">True</span>, transform=transform)</span><br><span class="line">trainloader = torch.utils.data.DataLoader(trainset, batch_size=<span class="number">4</span>,</span><br><span class="line">                                          shuffle=<span class="literal">True</span>, num_workers=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">testset = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">False</span>,</span><br><span class="line">                                       download=<span class="literal">True</span>, transform=transform)</span><br><span class="line">testloader = torch.utils.data.DataLoader(testset, batch_size=<span class="number">4</span>,</span><br><span class="line">                                         shuffle=<span class="literal">False</span>, num_workers=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">classes = (<span class="string">&#x27;plane&#x27;</span>, <span class="string">&#x27;car&#x27;</span>, <span class="string">&#x27;bird&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;deer&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;frog&#x27;</span>, <span class="string">&#x27;horse&#x27;</span>, <span class="string">&#x27;ship&#x27;</span>, <span class="string">&#x27;truck&#x27;</span>)</span><br></pre></td></tr></table></figure><p>我们将对 <code>DataLoader</code> 的输出进行检查：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># functions to show an image</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">imshow</span>(<span class="params">img</span>):</span><br><span class="line">    img = img / <span class="number">2</span> + <span class="number">0.5</span>     <span class="comment"># unnormalize</span></span><br><span class="line">    npimg = img.numpy()</span><br><span class="line">    plt.imshow(np.transpose(npimg, (<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># get some random training images</span></span><br><span class="line">dataiter = <span class="built_in">iter</span>(trainloader)</span><br><span class="line">images, labels = <span class="built_in">next</span>(dataiter)</span><br><span class="line"></span><br><span class="line"><span class="comment"># show images</span></span><br><span class="line">imshow(torchvision.utils.make_grid(images))</span><br><span class="line"><span class="comment"># print labels</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>.join(<span class="string">&#x27;%5s&#x27;</span> % classes[labels[j]] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)))</span><br></pre></td></tr></table></figure><p>这是我们要训练的模型。如果它看起来很熟悉，那是因为它是 LeNet 的一个变体（在本视频前面讨论过），适用于 3 色图像。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Net</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Net, self).__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>)</span><br><span class="line">        self.pool = nn.MaxPool2d(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="number">6</span>, <span class="number">16</span>, <span class="number">5</span>)</span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">16</span> * <span class="number">5</span> * <span class="number">5</span>, <span class="number">120</span>)</span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">120</span>, <span class="number">84</span>)</span><br><span class="line">        self.fc3 = nn.Linear(<span class="number">84</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.pool(F.relu(self.conv1(x)))</span><br><span class="line">        x = self.pool(F.relu(self.conv2(x)))</span><br><span class="line">        x = x.view(-<span class="number">1</span>, <span class="number">16</span> * <span class="number">5</span> * <span class="number">5</span>)</span><br><span class="line">        x = F.relu(self.fc1(x))</span><br><span class="line">        x = F.relu(self.fc2(x))</span><br><span class="line">        x = self.fc3(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">net = Net()</span><br></pre></td></tr></table></figure><p>我们需要的最后一个成分是损失函数和优化器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">criterion = nn.CrossEntropyLoss()</span><br><span class="line">optimizer = optim.SGD(net.parameters(), lr=<span class="number">0.001</span>, momentum=<span class="number">0.9</span>)</span><br></pre></td></tr></table></figure><p>正如本视频前面所讨论的，损失函数是衡量模型预测与理想输出的距离的指标。交叉熵损失是像我们这样的分类模型的典型损失函数。</p><p>优化器是驱动学习的动力。在这里，我们创建了一个实现随机梯度下降的优化器，这是更简单的优化算法之一。除了算法的参数，如学习率 ( <code>lr</code> ) 和动量，我们还传入 <code>net.parameters()</code> ，它是模型中所有学习权重的集合 - 这就是优化器进行调整。</p><p>最后，所有这些都被组装到训练循环中。继续运行此单元，因为执行可能需要几分钟：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):  <span class="comment"># loop over the dataset multiple times</span></span><br><span class="line"></span><br><span class="line">    running_loss = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> i, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(trainloader, <span class="number">0</span>):</span><br><span class="line">        <span class="comment"># get the inputs</span></span><br><span class="line">        inputs, labels = data</span><br><span class="line"></span><br><span class="line">        <span class="comment"># zero the parameter gradients</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># forward + backward + optimize</span></span><br><span class="line">        outputs = net(inputs)</span><br><span class="line">        loss = criterion(outputs, labels)</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print statistics</span></span><br><span class="line">        running_loss += loss.item()</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2000</span> == <span class="number">1999</span>:    <span class="comment"># print every 2000 mini-batches</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[%d, %5d] loss: %.3f&#x27;</span> %</span><br><span class="line">                  (epoch + <span class="number">1</span>, i + <span class="number">1</span>, running_loss / <span class="number">2000</span>))</span><br><span class="line">            running_loss = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Finished Training&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在这里，我们只进行 2 个训练周期（第 1 行）——即对训练数据集进行两次遍历。每个通道都有一个内部循环，用于迭代训练数据（第 4 行），提供批量转换后的输入图像及其正确标签。</p><p>将梯度归零（第 9 行）是重要的一步。梯度在一批中累积；如果我们不为每个批次重置它们，它们将不断累积，这将提供不正确的梯度值，使学习变得不可能。</p><p>在第 12 行中，我们询问模型对此批次的预测。在下面的第 (13) 行中，我们计算损失 - <code>outputs</code> （模型预测）和 <code>labels</code> （正确输出）之间的差异。</p><p>在第 14 行中，我们执行 <code>backward()</code> 遍，并计算指导学习的梯度。</p><p>在第 15 行中，优化器执行一个学习步骤 - 它使用 <code>backward()</code> 调用中的梯度将学习权重推向它认为会减少损失的方向。</p><p>循环的其余部分对纪元数、已完成的训练实例数以及训练循环中收集的损失进行一些简单的报告。</p><p>当您运行上面的单元格时，您应该看到如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,  <span class="number">2000</span>] loss: <span class="number">2.235</span></span><br><span class="line">[<span class="number">1</span>,  <span class="number">4000</span>] loss: <span class="number">1.940</span></span><br><span class="line">[<span class="number">1</span>,  <span class="number">6000</span>] loss: <span class="number">1.713</span></span><br><span class="line">[<span class="number">1</span>,  <span class="number">8000</span>] loss: <span class="number">1.573</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">10000</span>] loss: <span class="number">1.507</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">12000</span>] loss: <span class="number">1.442</span></span><br><span class="line">[<span class="number">2</span>,  <span class="number">2000</span>] loss: <span class="number">1.378</span></span><br><span class="line">[<span class="number">2</span>,  <span class="number">4000</span>] loss: <span class="number">1.364</span></span><br><span class="line">[<span class="number">2</span>,  <span class="number">6000</span>] loss: <span class="number">1.349</span></span><br><span class="line">[<span class="number">2</span>,  <span class="number">8000</span>] loss: <span class="number">1.319</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">10000</span>] loss: <span class="number">1.284</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">12000</span>] loss: <span class="number">1.267</span></span><br><span class="line">Finished Training</span><br></pre></td></tr></table></figure><p>请注意，损失是单调下降的，表明我们的模型正在继续提高其在训练数据集上的性能。</p><p>作为最后一步，我们应该检查模型是否确实在进行一般学习，而不是简单地“记住”数据集。这称为过度拟合，通常表明数据集太小（没有足够的示例用于一般学习），或者模型的学习参数多于正确建模数据集所需的参数。</p><p>这就是数据集被分为训练和测试子集的原因 - 为了测试模型的通用性，我们要求它对尚未训练的数据进行预测：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">correct = <span class="number">0</span></span><br><span class="line">total = <span class="number">0</span></span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> testloader:</span><br><span class="line">        images, labels = data</span><br><span class="line">        outputs = net(images)</span><br><span class="line">        _, predicted = torch.<span class="built_in">max</span>(outputs.data, <span class="number">1</span>)</span><br><span class="line">        total += labels.size(<span class="number">0</span>)</span><br><span class="line">        correct += (predicted == labels).<span class="built_in">sum</span>().item()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Accuracy of the network on the 10000 test images: %d %%&#x27;</span> % (</span><br><span class="line">    <span class="number">100</span> * correct / total))</span><br></pre></td></tr></table></figure><p>如果您继续跟进，您应该会发现该模型此时的准确率大约为 50%。这并不完全是最先进的，但它比我们期望的随机输出 10% 的准确度要好得多。这表明模型中确实发生了一些一般性学习。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>tensor的创建，类型的修改，通过随机数种子固定初始随机数，tensor计算</li><li>LeNet-5的图卷积层1，卷积层3的作用？如何搭建这个网络？<ul><li>C1 层是一个卷积层，显示它在图像中看到的<strong>每个学习特征的位置</strong></li><li>C3 层是另一个卷积层，个描述这些<strong>特征组合</strong>的空间位置的激活图</li></ul></li><li>如何输入网络，如何获得网络输出。什么叫做推力。</li><li>如何加载模型，如何转化数据类型，使其可以供网络使用。</li><li>如何变化图像</li><li>如何可视化显示数据集，dataset，dataloader的配置和使用</li><li>如何训练网络，损失函数和优化器的作用，如何判断训练效果，如何判断是否是一般学习（区别过拟合情况）</li><li>过拟合可能出现的情况是？<ul><li>这称为过度拟合，通常表明数据集太小（没有足够的示例用于一般学习），或者模型的学习参数多于正确建模数据集所需的参数。</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LootParams相关解析</title>
      <link href="/2023/11/12/Minecraft%E6%BA%90%E7%A0%81-03-LootParams%E7%9B%B8%E5%85%B3%E8%A7%A3%E6%9E%90/"/>
      <url>/2023/11/12/Minecraft%E6%BA%90%E7%A0%81-03-LootParams%E7%9B%B8%E5%85%B3%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="LootParams类"><a href="#LootParams类" class="headerlink" title="LootParams类"></a>LootParams类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.minecraft.world.level.storage.loot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Maps;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Sets;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.resources.ResourceLocation;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.server.level.ServerLevel;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.item.ItemStack;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.storage.loot.parameters.LootContextParam;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.storage.loot.parameters.LootContextParamSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LootParams</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> ServerLevel level; <span class="comment">// 服务器世界对象</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;LootContextParam&lt;?&gt;, Object&gt; params; <span class="comment">// ,固定参数map</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;ResourceLocation, LootParams.DynamicDrop&gt; dynamicDrops; <span class="comment">//动态掉落map</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">float</span> luck; <span class="comment">//,幸运值</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">LootParams</span><span class="params">(</span></span><br><span class="line"><span class="params">      ServerLevel p_287766_, Map&lt;LootContextParam&lt;?&gt;, Object&gt; p_287705_, Map&lt;ResourceLocation, LootParams.DynamicDrop&gt; p_287642_, <span class="type">float</span> p_287671_</span></span><br><span class="line"><span class="params">   )</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.level = p_287766_;</span><br><span class="line">      <span class="built_in">this</span>.params = p_287705_;</span><br><span class="line">      <span class="built_in">this</span>.dynamicDrops = p_287642_;</span><br><span class="line">      <span class="built_in">this</span>.luck = p_287671_;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> ServerLevel <span class="title function_">getLevel</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.level;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//判断固定参数map是否包含指定参数</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasParam</span><span class="params">(LootContextParam&lt;?&gt; p_287749_)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.params.containsKey(p_287749_);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//从固定参数map获取指定参数,如果不存在抛出异常</span></span><br><span class="line">   <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getParameter</span><span class="params">(LootContextParam&lt;T&gt; p_287670_)</span> &#123;</span><br><span class="line">      <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> (T)<span class="built_in">this</span>.params.get(p_287670_);</span><br><span class="line">      <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>(p_287670_.getName().toString());</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> t;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//,从固定参数map获取指定参数,如果不存在返回null</span></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getOptionalParameter</span><span class="params">(LootContextParam&lt;T&gt; p_287644_)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (T)<span class="built_in">this</span>.params.get(p_287644_);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//从固定参数map获取指定参数,如果不存在返回null</span></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getParamOrNull</span><span class="params">(LootContextParam&lt;T&gt; p_287769_)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (T)<span class="built_in">this</span>.params.get(p_287769_);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//addDynamicDrops方法,向dynamicDrops动态掉落map中添加指定资源位置的动态掉落</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addDynamicDrops</span><span class="params">(ResourceLocation p_287768_, Consumer&lt;ItemStack&gt; p_287711_)</span> &#123;</span><br><span class="line">      LootParams.<span class="type">DynamicDrop</span> <span class="variable">lootparams$dynamicdrop</span> <span class="operator">=</span> <span class="built_in">this</span>.dynamicDrops.get(p_287768_);</span><br><span class="line">      <span class="keyword">if</span> (lootparams$dynamicdrop != <span class="literal">null</span>) &#123;</span><br><span class="line">         lootparams$dynamicdrop.add(p_287711_);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//返回luck幸运值属性</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getLuck</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.luck;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//内部静态类Builder</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">final</span> ServerLevel level;<span class="comment">//服务器世界对象</span></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;LootContextParam&lt;?&gt;, Object&gt; params = Maps.newIdentityHashMap();<span class="comment">//固定参数map,初始化为空map</span></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;ResourceLocation, LootParams.DynamicDrop&gt; dynamicDrops = Maps.newHashMap();<span class="comment">//动态掉落map,初始化为空map</span></span><br><span class="line">      <span class="keyword">private</span> <span class="type">float</span> luck;<span class="comment">//幸运值</span></span><br><span class="line"><span class="comment">//类构造函数,参数为服务器世界对象,初始化level属性</span></span><br><span class="line">      <span class="keyword">public</span> <span class="title function_">Builder</span><span class="params">(ServerLevel p_287594_)</span> &#123;</span><br><span class="line">         <span class="built_in">this</span>.level = p_287594_;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//方法,返回level属性</span></span><br><span class="line">      <span class="keyword">public</span> ServerLevel <span class="title function_">getLevel</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">this</span>.level;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//withParameter方法,向固定参数map中put指定参数</span></span><br><span class="line">      <span class="keyword">public</span> &lt;T&gt; LootParams.Builder <span class="title function_">withParameter</span><span class="params">(LootContextParam&lt;T&gt; p_287706_, T p_287606_)</span> &#123;</span><br><span class="line">         <span class="built_in">this</span>.params.put(p_287706_, p_287606_);</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//可选地向固定参数map中put指定参数,如果值为空则remove</span></span><br><span class="line">      <span class="keyword">public</span> &lt;T&gt; LootParams.Builder <span class="title function_">withOptionalParameter</span><span class="params">(LootContextParam&lt;T&gt; p_287680_, <span class="meta">@Nullable</span> T p_287630_)</span> &#123;</span><br><span class="line">         <span class="keyword">if</span> (p_287630_ == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.params.remove(p_287680_);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.params.put(p_287680_, p_287630_);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//getParameter方法,从固定参数map获取指定参数,如果不存在抛出异常</span></span><br><span class="line">      <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getParameter</span><span class="params">(LootContextParam&lt;T&gt; p_287646_)</span> &#123;</span><br><span class="line">         <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> (T)<span class="built_in">this</span>.params.get(p_287646_);</span><br><span class="line">         <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>(p_287646_.getName().toString());</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//getOptionalParameter方法,从固定参数map获取指定参数,如果不存在返回null</span></span><br><span class="line"></span><br><span class="line">      <span class="meta">@Nullable</span></span><br><span class="line">      <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getOptionalParameter</span><span class="params">(LootContextParam&lt;T&gt; p_287759_)</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> (T)<span class="built_in">this</span>.params.get(p_287759_);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//withDynamicDrop方法,向dynamicDrops动态掉落map中put指定资源位置的动态掉落,不允许重复</span></span><br><span class="line">      <span class="keyword">public</span> LootParams.Builder <span class="title function_">withDynamicDrop</span><span class="params">(ResourceLocation p_287734_, LootParams.DynamicDrop p_287724_)</span> &#123;</span><br><span class="line">         LootParams.<span class="type">DynamicDrop</span> <span class="variable">lootparams$dynamicdrop</span> <span class="operator">=</span> <span class="built_in">this</span>.dynamicDrops.put(p_287734_, p_287724_);</span><br><span class="line">         <span class="keyword">if</span> (lootparams$dynamicdrop != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Duplicated dynamic drop &#x27;&quot;</span> + <span class="built_in">this</span>.dynamicDrops + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//设置luck幸运值属性</span></span><br><span class="line">      <span class="keyword">public</span> LootParams.Builder <span class="title function_">withLuck</span><span class="params">(<span class="type">float</span> p_287703_)</span> &#123;</span><br><span class="line">         <span class="built_in">this</span>.luck = p_287703_;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">// create方法,通过LootContextParamSet验证参数,然后构造LootParams返回</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//create方法接受一个LootContextParamSet类型的参数，首先计算出params映射中的键与p_287701_的getAllowed方法返回的集合的差集，如果这个差集不为空，则抛出IllegalArgumentException异常，然后计算出p_287701_的getRequired方法返回的集合与params映射中的键的差集，如果这个差集不为空，则抛出IllegalArgumentException异常，否则返回一个新的LootParams对象</span></span><br><span class="line">      <span class="keyword">public</span> LootParams <span class="title function_">create</span><span class="params">(LootContextParamSet p_287701_)</span> &#123;</span><br><span class="line">         Set&lt;LootContextParam&lt;?&gt;&gt; set = Sets.difference(<span class="built_in">this</span>.params.keySet(), p_287701_.getAllowed());</span><br><span class="line">         <span class="keyword">if</span> (<span class="literal">false</span> &amp;&amp; !set.isEmpty()) &#123; <span class="comment">// Forge: Allow mods to pass custom loot parameters (not part of the vanilla loot table) to the loot context.</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Parameters not allowed in this parameter set: &quot;</span> + set);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Set&lt;LootContextParam&lt;?&gt;&gt; set1 = Sets.difference(p_287701_.getRequired(), <span class="built_in">this</span>.params.keySet());</span><br><span class="line">            <span class="keyword">if</span> (!set1.isEmpty()) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Missing required parameters: &quot;</span> + set1);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LootParams</span>(<span class="built_in">this</span>.level, <span class="built_in">this</span>.params, <span class="built_in">this</span>.dynamicDrops, <span class="built_in">this</span>.luck);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//这个方法接受一个Consumer&lt;ItemStack&gt;类型的参数。</span></span><br><span class="line">   <span class="meta">@FunctionalInterface</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DynamicDrop</span> &#123;</span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Consumer&lt;ItemStack&gt; p_287584_)</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="LootContextParam-类"><a href="#LootContextParam-类" class="headerlink" title="LootContextParam 类"></a>LootContextParam 类</h1><p>主要目的是定义一个可以存储资源位置的参数类，这个类可以被用于表示游戏中的各种上下文参数，例如掉落物的位置，玩家的位置等等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.minecraft.world.level.storage.loot.parameters;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.minecraft.resources.ResourceLocation;</span><br><span class="line"><span class="comment">//主要目的是定义一个可以存储资源位置的参数类，这个类可以被用于表示游戏中的各种上下文参数，例如掉落物的位置，玩家的位置等等</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LootContextParam</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">// 定义了一个私有的、不可变的ResourceLocation类型的成员变量name。这个变量在这个类的构造函数中被初始化，并且在类的其他方法中可以被访问。</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> ResourceLocation name;</span><br><span class="line"><span class="comment">//LootContextParam类的构造函数，它接受一个ResourceLocation类型的参数p_81283_，并将其赋值给成员变量name。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">LootContextParam</span><span class="params">(ResourceLocation p_81283_)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = p_81283_;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//一个公共的方法getName，它没有参数，返回值为ResourceLocation类型。这个方法返回成员变量name的值。</span></span><br><span class="line">   <span class="keyword">public</span> ResourceLocation <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//一个覆盖了Object类的toString方法的方法。这个方法返回一个字符串，这个字符串是&quot;&lt;parameter &quot;和this.name的值的组合。这个方法的目的是提供一个表示这个对象的字符串，当我们试图将这个对象转换为字符串时，就会调用这个方法。</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&lt;parameter &quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot;&gt;&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="LootContextParams类"><a href="#LootContextParams类" class="headerlink" title="LootContextParams类"></a>LootContextParams类</h1><p>定义了一个名为<code>LootContextParams</code>的类，这个类用于创建各种类型的掉落物上下文参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.minecraft.world.level.storage.loot.parameters;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.minecraft.resources.ResourceLocation;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.damagesource.DamageSource;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.entity.Entity;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.entity.player.Player;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.item.ItemStack;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.entity.BlockEntity;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.state.BlockState;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.phys.Vec3;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LootContextParams</span> &#123;</span><br><span class="line">    <span class="comment">//定义了一个公共的、静态的、不可变的LootContextParam&lt;Entity&gt;类型的成员变量THIS_ENTITY，它的值是通过调用create方法并传入字符串&quot;this_entity&quot;得到的。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> LootContextParam&lt;Entity&gt; THIS_ENTITY = create(<span class="string">&quot;this_entity&quot;</span>);</span><br><span class="line">    <span class="comment">//定义了一个公共的、静态的、不可变的LootContextParam&lt;Player&gt;类型的成员变量LAST_DAMAGE_PLAYER，它的值是通过调用create方法并传入字符串&quot;last_damage_player&quot;得到的。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> LootContextParam&lt;Player&gt; LAST_DAMAGE_PLAYER = create(<span class="string">&quot;last_damage_player&quot;</span>);</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> LootContextParam&lt;DamageSource&gt; DAMAGE_SOURCE = create(<span class="string">&quot;damage_source&quot;</span>);</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> LootContextParam&lt;Entity&gt; KILLER_ENTITY = create(<span class="string">&quot;killer_entity&quot;</span>);</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> LootContextParam&lt;Entity&gt; DIRECT_KILLER_ENTITY = create(<span class="string">&quot;direct_killer_entity&quot;</span>);</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> LootContextParam&lt;Vec3&gt; ORIGIN = create(<span class="string">&quot;origin&quot;</span>);</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> LootContextParam&lt;BlockState&gt; BLOCK_STATE = create(<span class="string">&quot;block_state&quot;</span>);</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> LootContextParam&lt;BlockEntity&gt; BLOCK_ENTITY = create(<span class="string">&quot;block_entity&quot;</span>);</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> LootContextParam&lt;ItemStack&gt; TOOL = create(<span class="string">&quot;tool&quot;</span>);</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> LootContextParam&lt;Float&gt; EXPLOSION_RADIUS = create(<span class="string">&quot;explosion_radius&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; LootContextParam&lt;T&gt; <span class="title function_">create</span><span class="params">(String p_81467_)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LootContextParam</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">ResourceLocation</span>(p_81467_));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="block类部分代码"><a href="#block类部分代码" class="headerlink" title="block类部分代码"></a>block类部分代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dropResources</span><span class="params">(BlockState p_49951_, Level p_49952_, BlockPos p_49953_)</span> &#123;</span><br><span class="line">       <span class="comment">//检查p_49952_是否是ServerLevel类的实例</span></span><br><span class="line">      <span class="keyword">if</span> (p_49952_ <span class="keyword">instanceof</span> ServerLevel) &#123;</span><br><span class="line">          <span class="comment">//先调用getDrops方法并将p_49951_，(ServerLevel)p_49952_，p_49953_，以及null作为参数传入，然后对返回的列表进行遍历，对于列表中的每一个元素，调用popResource方法并将p_49952_，p_49953_，以及元素作为参数传入。popResource方法的目的是在世界中掉落一个物品。</span></span><br><span class="line">         getDrops(p_49951_, (ServerLevel)p_49952_, p_49953_, <span class="literal">null</span>).forEach(p_152406_ -&gt; popResource(p_49952_, p_49953_, p_152406_));</span><br><span class="line">          <span class="comment">//用了p_49951_的spawnAfterBreak方法，并将(ServerLevel)p_49952_，p_49953_，一个空的ItemStack，以及true作为参数传入。这个方法的目的是在方块被挖掘后生成一些实体，例如掉落的物品或者生成的实体。</span></span><br><span class="line">         p_49951_.spawnAfterBreak((ServerLevel)p_49952_, p_49953_, ItemStack.EMPTY, <span class="literal">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dropResources</span><span class="params">(BlockState p_49893_, LevelAccessor p_49894_, BlockPos p_49895_, <span class="meta">@Nullable</span> BlockEntity p_49896_)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (p_49894_ <span class="keyword">instanceof</span> ServerLevel) &#123;</span><br><span class="line">         getDrops(p_49893_, (ServerLevel)p_49894_, p_49895_, p_49896_).forEach(p_49859_ -&gt; popResource((ServerLevel)p_49894_, p_49895_, p_49859_));</span><br><span class="line">         p_49893_.spawnAfterBreak((ServerLevel)p_49894_, p_49895_, ItemStack.EMPTY, <span class="literal">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dropResources</span><span class="params">(</span></span><br><span class="line"><span class="params">      BlockState p_49882_, Level p_49883_, BlockPos p_49884_, <span class="meta">@Nullable</span> BlockEntity p_49885_, <span class="meta">@Nullable</span> Entity p_49886_, ItemStack p_49887_</span></span><br><span class="line"><span class="params">   )</span> &#123;</span><br><span class="line">       <span class="comment">// 掉落经验</span></span><br><span class="line">      dropResources(p_49882_, p_49883_, p_49884_, p_49885_, p_49886_, p_49887_, <span class="literal">true</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dropResources</span><span class="params">(BlockState p_49882_, Level p_49883_, BlockPos p_49884_, <span class="meta">@Nullable</span> BlockEntity p_49885_, <span class="meta">@Nullable</span> Entity p_49886_, ItemStack p_49887_, <span class="type">boolean</span> dropXp)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (p_49883_ <span class="keyword">instanceof</span> ServerLevel) &#123;</span><br><span class="line">         getDrops(p_49882_, (ServerLevel)p_49883_, p_49884_, p_49885_, p_49886_, p_49887_).forEach(p_49944_ -&gt; popResource(p_49883_, p_49884_, p_49944_));</span><br><span class="line">         p_49882_.spawnAfterBreak((ServerLevel)p_49883_, p_49884_, p_49887_, dropXp);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 这个方法是在玩家挖掘方块时被调用的</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playerDestroy</span><span class="params">(Level p_49827_, Player p_49828_, BlockPos p_49829_, BlockState p_49830_, <span class="meta">@Nullable</span> BlockEntity p_49831_, ItemStack p_49832_)</span> &#123;</span><br><span class="line">       <span class="comment">//调用了Player的awardStat方法，并将Stats.BLOCK_MINED.get(this)作为参数传入。这个方法的目的是奖励玩家挖掘方块的行为</span></span><br><span class="line">      p_49828_.awardStat(Stats.BLOCK_MINED.get(<span class="built_in">this</span>));</span><br><span class="line">       <span class="comment">//调用了Player的causeFoodExhaustion方法，并将0.005F作为参数传入。这个方法的目的是使玩家因为挖掘方块而感到饥饿，0.005F是饥饿的程度。</span></span><br><span class="line">      p_49828_.causeFoodExhaustion(<span class="number">0.005F</span>);</span><br><span class="line">      <span class="comment">//Forge: Don&#x27;t drop xp as part of the resources as it is handled by the patches in ServerPlayerGameMode#destroyBlock</span></span><br><span class="line">       <span class="comment">//这个方法的目的是在玩家挖掘方块时掉落资源，false表示不掉落经验值。注释中提到的Forge是一个用于修改和扩展Minecraft的模组，它在ServerPlayerGameMode#destroyBlock方法中处理了经验值的掉落。</span></span><br><span class="line">      dropResources(p_49830_, p_49827_, p_49829_, p_49831_, p_49828_, p_49832_, <span class="literal">false</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义了一个公共的、静态的方法getDrops，它接受四个参数：一个BlockState类型的参数p_49870_，一个ServerLevel类型的参数p_49871_，一个BlockPos类型的参数p_49872_，以及一个可以为null的BlockEntity类型的参数p_49873_。这个方法返回一个ItemStack类型的列表。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> List&lt;ItemStack&gt; <span class="title function_">getDrops</span><span class="params">(BlockState p_49870_, ServerLevel p_49871_, BlockPos p_49872_, <span class="meta">@Nullable</span> BlockEntity p_49873_)</span> &#123;</span><br><span class="line">      LootParams.<span class="type">Builder</span> <span class="variable">lootparams$builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LootParams</span>.Builder(p_49871_)</span><br><span class="line">         .withParameter(LootContextParams.ORIGIN, Vec3.atCenterOf(p_49872_))</span><br><span class="line">         .withParameter(LootContextParams.TOOL, ItemStack.EMPTY)</span><br><span class="line">         .withOptionalParameter(LootContextParams.BLOCK_ENTITY, p_49873_);</span><br><span class="line">      <span class="comment">//调用了blockstate的getDrops方法，并将lootparams$builder作为参数传入，然后返回这个方法的结果。</span></span><br><span class="line">      <span class="keyword">return</span> p_49870_.getDrops(lootparams$builder);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//定义了一个公共的、静态的方法getDrops，它接受六个参数：一个BlockState类型的参数p_49875_，一个ServerLevel类型的参数p_49876_，一个BlockPos类型的参数p_49877_，一个可以为null的BlockEntity类型的参数p_49878_，一个可以为null的Entity类型的参数p_49879_，以及一个ItemStack类型的参数p_49880_。这个方法返回一个ItemStack类型的列表。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> List&lt;ItemStack&gt; <span class="title function_">getDrops</span><span class="params">(</span></span><br><span class="line"><span class="params">      BlockState p_49875_, ServerLevel p_49876_, BlockPos p_49877_, <span class="meta">@Nullable</span> BlockEntity p_49878_, <span class="meta">@Nullable</span> Entity p_49879_, ItemStack p_49880_</span></span><br><span class="line"><span class="params">   )</span> &#123;</span><br><span class="line">      LootParams.<span class="type">Builder</span> <span class="variable">lootparams$builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LootParams</span>.Builder(p_49876_)</span><br><span class="line">         .withParameter(LootContextParams.ORIGIN, Vec3.atCenterOf(p_49877_))</span><br><span class="line">         .withParameter(LootContextParams.TOOL, p_49880_)</span><br><span class="line">         .withOptionalParameter(LootContextParams.THIS_ENTITY, p_49879_)</span><br><span class="line">         .withOptionalParameter(LootContextParams.BLOCK_ENTITY, p_49878_);</span><br><span class="line">       <span class="comment">//调用了blockstate的getDrops方法，并将lootparams$builder作为参数传入，然后返回这个方法的结果。</span></span><br><span class="line">      <span class="keyword">return</span> p_49875_.getDrops(lootparams$builder);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="blockstate部分代码"><a href="#blockstate部分代码" class="headerlink" title="blockstate部分代码"></a>blockstate部分代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">      <span class="keyword">public</span> List&lt;ItemStack&gt; <span class="title function_">getDrops</span><span class="params">(LootParams.Builder p_287688_)</span> &#123;</span><br><span class="line">          <span class="comment">//调用了this.getBlock()的getDrops方法，并将this.asState()和p_287688_作为参数传入，然后返回这个方法的结果。这个方法的目的是获取方块的掉落物</span></span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">this</span>.getBlock().getDrops(<span class="built_in">this</span>.asState(), p_287688_);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义了一个公共的、已被弃用的方法getDrops，它接受两个参数：一个BlockState类型的参数p_287732_和一个LootParams.Builder类型的参数p_287596_，并返回一个ItemStack类型的列表</span></span><br><span class="line">   <span class="meta">@Deprecated</span></span><br><span class="line">   <span class="keyword">public</span> List&lt;ItemStack&gt; <span class="title function_">getDrops</span><span class="params">(BlockState p_287732_, LootParams.Builder p_287596_)</span> &#123;</span><br><span class="line">       <span class="comment">//调用了this的getLootTable方法，并将返回的结果赋值给ResourceLocation类型的变量resourcelocation。这个方法的目的是获取方块的掉落物表。</span></span><br><span class="line">      <span class="type">ResourceLocation</span> <span class="variable">resourcelocation</span> <span class="operator">=</span> <span class="built_in">this</span>.getLootTable();</span><br><span class="line">       <span class="comment">//检查resourcelocation是否等于BuiltInLootTables.EMPTY。如果等于，则返回一个空的列表</span></span><br><span class="line">      <span class="keyword">if</span> (resourcelocation == BuiltInLootTables.EMPTY) &#123;</span><br><span class="line">         <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//调用了p_287596_的withParameter方法，并将LootContextParams.BLOCK_STATE和p_287732_作为参数传入，然后调用create方法并将LootContextParamSets.BLOCK作为参数传入，最后将返回的结果赋值给LootParams类型的变量lootparams。这个方法的目的是创建一个新的LootParams对象，并设置其参数。</span></span><br><span class="line">         <span class="type">LootParams</span> <span class="variable">lootparams</span> <span class="operator">=</span> p_287596_.withParameter(LootContextParams.BLOCK_STATE, p_287732_).create(LootContextParamSets.BLOCK);</span><br><span class="line">          <span class="comment">//调用了lootparams的getLevel方法，并将返回的结果赋值给ServerLevel类型的变量serverlevel。这个方法的目的是获取LootParams对象的世界。</span></span><br><span class="line">         <span class="type">ServerLevel</span> <span class="variable">serverlevel</span> <span class="operator">=</span> lootparams.getLevel();</span><br><span class="line">          <span class="comment">//调用了serverlevel.getServer()的getLootData方法，然后调用getLootTable方法并将resourcelocation作为参数传入，最后将返回的结果赋值给LootTable类型的变量</span></span><br><span class="line">         <span class="type">LootTable</span> <span class="variable">loottable</span> <span class="operator">=</span> serverlevel.getServer().getLootData().getLootTable(resourcelocation);</span><br><span class="line">          <span class="comment">//码调用了loottable的getRandomItems方法，并将lootparams作为参数传入，然后返回这个方法的结果。这个方法的目的是获取随机的掉落物。</span></span><br><span class="line">         <span class="keyword">return</span> loottable.getRandomItems(lootparams);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="ServerPlayerGameMode类部分代码"><a href="#ServerPlayerGameMode类部分代码" class="headerlink" title="ServerPlayerGameMode类部分代码"></a>ServerPlayerGameMode类部分代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个方法是在玩家挖掘方块时被调用的</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">destroyBlock</span><span class="params">(BlockPos p_9281_)</span> &#123;</span><br><span class="line">       <span class="comment">//调用了this.level的getBlockState方法，并将p_9281_作为参数传入，然后将返回的结果赋值给BlockState类型的变量blockstate。这个方法的目的是获取指定位置的方块状态。</span></span><br><span class="line">      <span class="type">BlockState</span> <span class="variable">blockstate</span> <span class="operator">=</span> <span class="built_in">this</span>.level.getBlockState(p_9281_);</span><br><span class="line">       <span class="comment">//调用了net.neoforged.neoforge.common.CommonHooks.onBlockBreakEvent方法，并将level，gameModeForPlayer，player，p_9281_作为参数传入，然后将返回的结果赋值给整型变量exp。这个方法的目的是处理玩家挖掘方块时的事件。</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">exp</span> <span class="operator">=</span> net.neoforged.neoforge.common.CommonHooks.onBlockBreakEvent(level, gameModeForPlayer, player, p_9281_);</span><br><span class="line">       <span class="comment">//检查exp是否等于-1。如果等于，则返回false。</span></span><br><span class="line">      <span class="keyword">if</span> (exp == -<span class="number">1</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//调用了this.level的getBlockEntity方法，并将p_9281_作为参数传入，然后将返回的结果赋值给BlockEntity类型的变量blockentity。这个方法的目的是获取指定位置的方块实体。</span></span><br><span class="line">         <span class="type">BlockEntity</span> <span class="variable">blockentity</span> <span class="operator">=</span> <span class="built_in">this</span>.level.getBlockEntity(p_9281_);</span><br><span class="line">          <span class="comment">//调用了blockstate的getBlock方法，并将返回的结果赋值给Block类型的变量block。这个方法的目的是获取方块状态对应的方块。</span></span><br><span class="line">         <span class="type">Block</span> <span class="variable">block</span> <span class="operator">=</span> blockstate.getBlock();</span><br><span class="line">          <span class="comment">//检查block是否是GameMasterBlock类的实例，以及this.player是否可以使用GameMasterBlock。如果block是GameMasterBlock类的实例，但this.player不能使用GameMasterBlock，则调用this.level的sendBlockUpdated方法，并返回false。</span></span><br><span class="line">         <span class="keyword">if</span> (block <span class="keyword">instanceof</span> GameMasterBlock &amp;&amp; !<span class="built_in">this</span>.player.canUseGameMasterBlocks()) &#123;</span><br><span class="line">            <span class="built_in">this</span>.level.sendBlockUpdated(p_9281_, blockstate, blockstate, <span class="number">3</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">             <span class="comment">//调用了player.getMainHandItem()的onBlockStartBreak方法，并将p_9281_和player作为参数传入。如果该方法返回true，则返回false。</span></span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (player.getMainHandItem().onBlockStartBreak(p_9281_, player)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">             <span class="comment">//</span></span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.player.blockActionRestricted(<span class="built_in">this</span>.level, p_9281_, <span class="built_in">this</span>.gameModeForPlayer)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="comment">//查this是否是创造模式。如果是，则调用removeBlock方法并将p_9281_和false作为参数传入，然后返回true。</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.isCreative()) &#123;</span><br><span class="line">               removeBlock(p_9281_, <span class="literal">false</span>);</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//调用了this.player的getMainHandItem方法，并将返回的结果赋值给ItemStack类型的变量itemstack。这个方法的目的是获取玩家主手中的物品。</span></span><br><span class="line">               <span class="type">ItemStack</span> <span class="variable">itemstack</span> <span class="operator">=</span> <span class="built_in">this</span>.player.getMainHandItem();</span><br><span class="line">               <span class="type">ItemStack</span> <span class="variable">itemstack1</span> <span class="operator">=</span> itemstack.copy();</span><br><span class="line">                <span class="comment">//调用了blockstate的canHarvestBlock方法，并将this.level，p_9281_，和this.player作为参数传入，然后将返回的结果赋值给布尔类型的变量flag1。这个方法的目的是检查玩家是否可以采集这个方块。</span></span><br><span class="line">               <span class="type">boolean</span> <span class="variable">flag1</span> <span class="operator">=</span> blockstate.canHarvestBlock(<span class="built_in">this</span>.level, p_9281_, <span class="built_in">this</span>.player); <span class="comment">// previously player.hasCorrectToolForDrops(blockstate)</span></span><br><span class="line">                <span class="comment">//调用了itemstack的mineBlock方法，并将this.level，blockstate，p_9281_，和this.player作为参数传入。这个方法的目的是在挖掘方块时使用物品。</span></span><br><span class="line">               itemstack.mineBlock(<span class="built_in">this</span>.level, blockstate, p_9281_, <span class="built_in">this</span>.player);</span><br><span class="line">               <span class="keyword">if</span> (itemstack.isEmpty() &amp;&amp; !itemstack1.isEmpty())</span><br><span class="line">                   <span class="comment">//用net.neoforged.neoforge.event.EventHooks.onPlayerDestroyItem方法，并将this.player，itemstack1，和InteractionHand.MAIN_HAND作为参数传入。这个方法的目的是在玩家销毁物品时触发事件。</span></span><br><span class="line">                  net.neoforged.neoforge.event.EventHooks.onPlayerDestroyItem(<span class="built_in">this</span>.player, itemstack1, InteractionHand.MAIN_HAND);</span><br><span class="line">                <span class="comment">//调用了removeBlock方法并将p_9281_和flag1作为参数传入，然后将返回的结果赋值给布尔类型的变量flag。这个方法的目的是移除一个方块。</span></span><br><span class="line">               <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> removeBlock(p_9281_, flag1);</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (flag &amp;&amp; flag1) &#123;</span><br><span class="line">                  block.playerDestroy(<span class="built_in">this</span>.level, <span class="built_in">this</span>.player, p_9281_, blockstate, blockentity, itemstack1);</span><br><span class="line">               &#125;</span><br><span class="line"><span class="comment">//检查flag和flag1是否都为true。如果是，则调用block的playerDestroy方法，并将this.level，this.player，p_9281_，blockstate，blockentity，和itemstack1作为参数传入。这个方法的目的是处理玩家挖掘方块时的行为。</span></span><br><span class="line">               <span class="keyword">if</span> (flag &amp;&amp; exp &gt; <span class="number">0</span>)</span><br><span class="line">                  blockstate.getBlock().popExperience(level, p_9281_, exp);</span><br><span class="line"></span><br><span class="line">               <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 我的世界 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pickaxe代码简介</title>
      <link href="/2023/11/12/Minecraft%E6%BA%90%E7%A0%81-02-pickaxeitem,drigoutitem,item%E7%9B%B8%E5%85%B3%E4%BB%A3%E7%A0%81%E7%AE%80%E4%BB%8B/"/>
      <url>/2023/11/12/Minecraft%E6%BA%90%E7%A0%81-02-pickaxeitem,drigoutitem,item%E7%9B%B8%E5%85%B3%E4%BB%A3%E7%A0%81%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="PickaxeItem类"><a href="#PickaxeItem类" class="headerlink" title="PickaxeItem类"></a>PickaxeItem类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义了一个名为PickaxeItem的类，这个类继承自DiggerItem。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PickaxeItem</span> <span class="keyword">extends</span> <span class="title class_">DiggerItem</span> &#123;</span><br><span class="line">    <span class="comment">//它接受四个参数：一个Tier对象，一个整数，一个浮点数和一个Item.Properties对象。这个构造函数用于初始化PickaxeItem对象。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">PickaxeItem</span><span class="params">(Tier p_42961_, <span class="type">int</span> p_42962_, <span class="type">float</span> p_42963_, Item.Properties p_42964_)</span> &#123;</span><br><span class="line">       <span class="comment">//码调用了父类DiggerItem的构造函数，传入了整数的浮点数形式，浮点数，Tier对象，BlockTags.MINEABLE_WITH_PICKAXE和Item.Properties对象。</span></span><br><span class="line">      <span class="built_in">super</span>((<span class="type">float</span>)p_42962_, p_42963_, p_42961_, BlockTags.MINEABLE_WITH_PICKAXE, p_42964_);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//义了一个名为canPerformAction的公共方法，它接受两个参数：一个ItemStack对象和一个net.neoforged.neoforge.common.ToolAction对象。这个方法用于检查这个工具是否可以执行给定的动作。</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPerformAction</span><span class="params">(ItemStack stack, net.neoforged.neoforge.common.ToolAction toolAction)</span> &#123;</span><br><span class="line">       <span class="comment">//行代码检查ToolActions.DEFAULT_PICKAXE_ACTIONS是否包含toolAction。如果包含，则返回true；否则，返回false。这表示如果toolAction是钻石工具的默认动作之一，那么这个工具就可以执行这个动作。</span></span><br><span class="line">      <span class="keyword">return</span> net.neoforged.neoforge.common.ToolActions.DEFAULT_PICKAXE_ACTIONS.contains(toolAction);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="DiggerItem类"><a href="#DiggerItem类" class="headerlink" title="DiggerItem类"></a>DiggerItem类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.minecraft.world.item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.ImmutableMultimap;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Multimap;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.ImmutableMultimap.Builder;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.core.BlockPos;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.tags.BlockTags;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.tags.TagKey;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.entity.EquipmentSlot;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.entity.LivingEntity;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.entity.ai.attributes.Attribute;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.entity.ai.attributes.AttributeModifier;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.entity.ai.attributes.Attributes;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.Level;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.Block;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.state.BlockState;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类继承自TieredItem</span></span><br><span class="line"><span class="comment">// 实现了Vanishable接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DiggerItem</span> <span class="keyword">extends</span> <span class="title class_">TieredItem</span> <span class="keyword">implements</span> <span class="title class_">Vanishable</span> &#123;</span><br><span class="line">   <span class="comment">// 存储与此工具相关的方块类型</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> TagKey&lt;Block&gt; blocks;</span><br><span class="line">    <span class="comment">// 存储此工具的速度</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">float</span> speed;</span><br><span class="line">    <span class="comment">//存储此工具的基础攻击伤害</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">float</span> attackDamageBaseline;</span><br><span class="line">    <span class="comment">//存储此工具的默认属性修改器</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> Multimap&lt;Attribute, AttributeModifier&gt; defaultModifiers;</span><br><span class="line"><span class="comment">// 两个浮点数，一个Tier对象，一个TagKey&lt;Block&gt;对象和一个Item.Properties对象。这个构造函数用于初始化DiggerItem对象。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">DiggerItem</span><span class="params">(<span class="type">float</span> p_204108_, <span class="type">float</span> p_204109_, Tier p_204110_, TagKey&lt;Block&gt; p_204111_, Item.Properties p_204112_)</span> &#123;</span><br><span class="line">       <span class="comment">// 用了父类TieredItem的构造函数，传入了Tier对象和Item.Properties对象。</span></span><br><span class="line">      <span class="built_in">super</span>(p_204110_, p_204112_);</span><br><span class="line">       <span class="comment">// 将传入的TagKey&lt;Block&gt;对象赋值给blocks字段。</span></span><br><span class="line">      <span class="built_in">this</span>.blocks = p_204111_;</span><br><span class="line">       <span class="comment">// 行代码调用Tier对象的getSpeed方法，并将返回的结果赋值给speed字段。</span></span><br><span class="line">      <span class="built_in">this</span>.speed = p_204110_.getSpeed();</span><br><span class="line">       <span class="comment">// 传入的浮点数与Tier对象的getAttackDamageBonus方法返回的结果相加，并将结果赋值给attackDamageBaseline字段。</span></span><br><span class="line">      <span class="built_in">this</span>.attackDamageBaseline = p_204108_ + p_204110_.getAttackDamageBonus();</span><br><span class="line">       <span class="comment">// Multimap.Builder对象，这是一个用于构建Multimap的建造者对象。Multimap`是一种特殊的映射，它允许每个键映射到多个值</span></span><br><span class="line">       <span class="comment">//它被用来存储属性修改器。</span></span><br><span class="line">      Builder&lt;Attribute, AttributeModifier&gt; builder = ImmutableMultimap.builder();</span><br><span class="line">      builder.put(</span><br><span class="line">          <span class="comment">//行代码向Multimap中添加了一个新的属性修改器。这个属性修改器修改的是攻击伤害属性，它的值是attackDamageBaseline字段的值，操作类型是加法。</span></span><br><span class="line">         Attributes.ATTACK_DAMAGE,</span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">AttributeModifier</span>(BASE_ATTACK_DAMAGE_UUID, <span class="string">&quot;Tool modifier&quot;</span>, (<span class="type">double</span>)<span class="built_in">this</span>.attackDamageBaseline, AttributeModifier.Operation.ADDITION)</span><br><span class="line">      );</span><br><span class="line">       <span class="comment">//行代码向Multimap中添加了一个新的属性修改器。这个属性修改器修改的是攻击速度属性，它的值是传入的浮点数，操作类型是加法。</span></span><br><span class="line">      builder.put(</span><br><span class="line">         Attributes.ATTACK_SPEED, <span class="keyword">new</span> <span class="title class_">AttributeModifier</span>(BASE_ATTACK_SPEED_UUID, <span class="string">&quot;Tool modifier&quot;</span>, (<span class="type">double</span>)p_204109_, AttributeModifier.Operation.ADDITION)</span><br><span class="line">      );</span><br><span class="line">       <span class="comment">//码调用builder.build()方法来构建Multimap，并将结果赋值给defaultModifiers字段。</span></span><br><span class="line">      <span class="built_in">this</span>.defaultModifiers = builder.build();</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//它接受两个参数：一个ItemStack对象和一个BlockState对象。这个方法用于获取破坏速度。</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getDestroySpeed</span><span class="params">(ItemStack p_41004_, BlockState p_41005_)</span> &#123;</span><br><span class="line">       <span class="comment">//检查BlockState对象是否与blocks字段相匹配。如果匹配，则返回speed字段的值；否则，返回1.0F。</span></span><br><span class="line">      <span class="keyword">return</span> p_41005_.is(<span class="built_in">this</span>.blocks) ? <span class="built_in">this</span>.speed : <span class="number">1.0F</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//它接受三个参数：一个ItemStack对象，两个LivingEntity对象。这个方法用于攻击敌人。</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hurtEnemy</span><span class="params">(ItemStack p_40994_, LivingEntity p_40995_, LivingEntity p_40996_)</span> &#123;</span><br><span class="line">       <span class="comment">//行代码调用ItemStack对象的hurtAndBreak方法来损坏物品。如果物品被损坏，它会广播一个破坏事件。</span></span><br><span class="line">      p_40994_.hurtAndBreak(<span class="number">2</span>, p_40996_, p_41007_ -&gt; p_41007_.broadcastBreakEvent(EquipmentSlot.MAINHAND));</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//它接受五个参数：一个ItemStack对象，一个Level对象，一个BlockState对象，一个BlockPos对象和一个LivingEntity对象。这个方法用于破坏方块。</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">mineBlock</span><span class="params">(ItemStack p_40998_, Level p_40999_, BlockState p_41000_, BlockPos p_41001_, LivingEntity p_41002_)</span> &#123;</span><br><span class="line">       <span class="comment">//检查Level对象是否为客户端，以及BlockState对象的破坏速度是否不为0.0F。如果这两个条件都满足，则执行下一行代码。</span></span><br><span class="line">      <span class="keyword">if</span> (!p_40999_.isClientSide &amp;&amp; p_41000_.getDestroySpeed(p_40999_, p_41001_) != <span class="number">0.0F</span>) &#123;</span><br><span class="line">          <span class="comment">//调用ItemStack对象的hurtAndBreak方法来损坏物品。如果物品被损坏，它会广播一个破坏事件。</span></span><br><span class="line">         p_40998_.hurtAndBreak(<span class="number">1</span>, p_41002_, p_40992_ -&gt; p_40992_.broadcastBreakEvent(EquipmentSlot.MAINHAND));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//这行代码定义了一个名为getDefaultAttributeModifiers的公共方法，它接受一个EquipmentSlot对象作为参数。这个方法用于获取默认属性修改器。</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Multimap&lt;Attribute, AttributeModifier&gt; <span class="title function_">getDefaultAttributeModifiers</span><span class="params">(EquipmentSlot p_40990_)</span> &#123;</span><br><span class="line">       <span class="comment">//这行代码检查EquipmentSlot对象是否为主手槽。如果是，则返回defaultModifiers字段的值；否则，调用父类的getDefaultAttributeModifiers方法。</span></span><br><span class="line">      <span class="keyword">return</span> p_40990_ == EquipmentSlot.MAINHAND ? <span class="built_in">this</span>.defaultModifiers : <span class="built_in">super</span>.getDefaultAttributeModifiers(p_40990_);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//为getAttackDamage的公共方法，这个方法用于获取攻击伤害</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getAttackDamage</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.attackDamageBaseline;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//代码定义了一个名为isCorrectToolForDrops的公共方法，它接受一个BlockState对象作为参数。这个方法用于检查这个工具是否适合破坏给定的方块。</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="meta">@Deprecated</span> <span class="comment">// FORGE: Use stack sensitive variant below</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCorrectToolForDrops</span><span class="params">(BlockState p_150816_)</span> &#123;</span><br><span class="line">       <span class="comment">//行代码检查工具的等级是否已经排序。如果已经排序，则执行下一行代码。</span></span><br><span class="line">      <span class="keyword">if</span> (net.neoforged.neoforge.common.TierSortingRegistry.isTierSorted(getTier())) &#123;</span><br><span class="line">          <span class="comment">//代码检查工具的等级是否适合破坏给定的方块，以及方块是否与blocks字段相匹配满足，则返回true；否则，返回false。</span></span><br><span class="line">         <span class="keyword">return</span> net.neoforged.neoforge.common.TierSortingRegistry.isCorrectTierForDrops(getTier(), p_150816_) &amp;&amp; p_150816_.is(<span class="built_in">this</span>.blocks);</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="comment">//这行代码调用getTier方法获取工具的等级，并将结果赋值给i。</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="built_in">this</span>.getTier().getLevel();</span><br><span class="line">       <span class="comment">//这行代码检查i是否小于3，以及BlockState对象是否属于需要钻石工具的方块标签。如果这两个条件都满足，则执行下一行代码。</span></span><br><span class="line">      <span class="keyword">if</span> (i &lt; <span class="number">3</span> &amp;&amp; p_150816_.is(BlockTags.NEEDS_DIAMOND_TOOL)) &#123;</span><br><span class="line">          <span class="comment">//这个工具不适合破坏这个方块。</span></span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">          <span class="comment">//这行代码检查i是否小于2，以及BlockState对象是否属于需要铁工具的方块标签。如果这两个条件都满足，则执行下一行代码。</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &lt; <span class="number">2</span> &amp;&amp; p_150816_.is(BlockTags.NEEDS_IRON_TOOL)) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//这行代码检查i是否小于1，以及BlockState对象是否属于需要石头工具的方块标签。如果这两个条件都满足，则返回false；否则，检查BlockState对象是否与blocks字段相匹配，并返回结果。</span></span><br><span class="line">         <span class="keyword">return</span> i &lt; <span class="number">1</span> &amp;&amp; p_150816_.is(BlockTags.NEEDS_STONE_TOOL) ? <span class="literal">false</span> : p_150816_.is(<span class="built_in">this</span>.blocks);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// FORGE START</span></span><br><span class="line">    <span class="comment">//这行代码定义了一个名为isCorrectToolForDrops的公共方法，它接受两个参数：一个ItemStack对象和一个BlockState对象。这个方法用于检查这个工具是否适合破坏给定的方块。</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCorrectToolForDrops</span><span class="params">(ItemStack stack, BlockState state)</span> &#123;</span><br><span class="line">       <span class="comment">//这行代码检查BlockState对象是否与blocks字段相匹配，以及工具的等级是否适合破坏这个方块。如果这两个条件都满足，则返回true；否则，返回false。</span></span><br><span class="line">      <span class="keyword">return</span> state.is(blocks) &amp;&amp; net.neoforged.neoforge.common.TierSortingRegistry.isCorrectTierForDrops(getTier(), state);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="TieredItem类"><a href="#TieredItem类" class="headerlink" title="TieredItem类"></a>TieredItem类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码定义了一个名为TieredItem的公共类，这个类继承自Item类。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TieredItem</span> <span class="keyword">extends</span> <span class="title class_">Item</span> &#123;</span><br><span class="line">    <span class="comment">//行代码定义了一个名为tier的私有常量字段，它的类型是Tier。这个字段可能用于存储此物品的挖掘等级。</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> Tier tier;</span><br><span class="line"><span class="comment">//这行代码定义了一个名为TieredItem的公共构造函数，它接受两个参数：一个Tier对象和一个Item.Properties对象。这个构造函数用于初始化TieredItem对象。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">TieredItem</span><span class="params">(Tier p_43308_, Item.Properties p_43309_)</span> &#123;</span><br><span class="line">       <span class="comment">//代码调用了父类Item的构造函数，传入了一个新的Item.Properties对象，这个对象的默认耐久度被设置为工具的使用次数。</span></span><br><span class="line">      <span class="built_in">super</span>(p_43309_.defaultDurability(p_43308_.getUses()));</span><br><span class="line">       <span class="comment">//行代码将传入的Tier对象赋值给tier字段。</span></span><br><span class="line">      <span class="built_in">this</span>.tier = p_43308_;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//定义了一个名为getTier的公共方法，这个方法用于获取物品的等级。</span></span><br><span class="line">   <span class="keyword">public</span> Tier <span class="title function_">getTier</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//行代码返回tier字段的值，表示物品的等级。</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.tier;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//这行代码定义了一个名为getEnchantmentValue的公共方法，这个方法用于获取物品的附魔值。</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getEnchantmentValue</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//这行代码调用Tier对象的getEnchantmentValue方法，并将返回的结果作为附魔值返回。</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.tier.getEnchantmentValue();</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//定义了一个名为isValidRepairItem的公共方法，它接受两个ItemStack对象作为参数。这个方法用于检查一个物品是否可以修复另一个物品。</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidRepairItem</span><span class="params">(ItemStack p_43311_, ItemStack p_43312_)</span> &#123;</span><br><span class="line">       <span class="comment">//这行代码检查Tier对象的修复材料是否与传入的ItemStack对象匹配，如果匹配，则返回true；否则，调用父类的isValidRepairItem方法。如果父类的方法也返回true，那么这个方法就会返回true；否则，返回false。</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.tier.getRepairIngredient().test(p_43312_) || <span class="built_in">super</span>.isValidRepairItem(p_43311_, p_43312_);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Item-类"><a href="#Item-类" class="headerlink" title="Item 类"></a>Item 类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义了一个名为Item的类，这个类实现了FeatureElement，ItemLike和IItemExtension接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Item</span> <span class="keyword">implements</span> <span class="title class_">FeatureElement</span>, ItemLike, net.neoforged.neoforge.common.extensions.IItemExtension &#123;</span><br><span class="line">    <span class="comment">//行代码定义了一个名为LOGGER的私有静态最终字段，它的类型是Logger。这个字段用于记录日志。</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LogUtils.getLogger();</span><br><span class="line">    <span class="comment">//代码定义了一个名为BY_BLOCK的公共静态最终字段，它的类型是Map&lt;Block, Item&gt;。这个字段用于将方块映射到对应的物品。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Block, Item&gt; BY_BLOCK = net.neoforged.neoforge.registries.GameData.getBlockItemMap();</span><br><span class="line">    <span class="comment">//定义了一个名为BASE_ATTACK_DAMAGE_UUID的受保护的静态最终字段，它的类型是UUID。这个字段用于存储基础攻击伤害的UUID。</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">UUID</span> <span class="variable">BASE_ATTACK_DAMAGE_UUID</span> <span class="operator">=</span> UUID.fromString(<span class="string">&quot;CB3F55D3-645C-4F38-A497-9C13A33DB5CF&quot;</span>);</span><br><span class="line">    <span class="comment">//定义了一个名为BASE_ATTACK_SPEED_UUID的受保护的静态最终字段，它的类型是UUID。这个字段用于存储基础攻击速度的UUID。</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">UUID</span> <span class="variable">BASE_ATTACK_SPEED_UUID</span> <span class="operator">=</span> UUID.fromString(<span class="string">&quot;FA233E1C-4180-4865-B01B-BCCE9785ACA3&quot;</span>);</span><br><span class="line">    <span class="comment">//代码定义了一个名为MAX_STACK_SIZE的公共静态最终字段，它的类型是int。这个字段用于存储物品的最大堆叠大小。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_STACK_SIZE</span> <span class="operator">=</span> <span class="number">64</span>;</span><br><span class="line">    <span class="comment">//定义了一个名为EAT_DURATION的公共静态最终字段，它的类型是int。这个字段用于存储吃东西的持续时间</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">EAT_DURATION</span> <span class="operator">=</span> <span class="number">32</span>;</span><br><span class="line">    <span class="comment">//定义了一个名为MAX_BAR_WIDTH的公共静态最终字段，它的类型是int。这个字段用于存储物品耐久条的最大宽度。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_BAR_WIDTH</span> <span class="operator">=</span> <span class="number">13</span>;</span><br><span class="line">    <span class="comment">//定义了一个私有的最终的Holder.Reference&lt;Item&gt;对象，它被命名为builtInRegistryHolder。这个对象是通过调用BuiltInRegistries.ITEM.createIntrusiveHolder(this)方法创建的，这个方法返回一个Holder.Reference&lt;Item&gt;对象，这个对象包含了当前的Item对象</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> Holder.Reference&lt;Item&gt; builtInRegistryHolder = BuiltInRegistries.ITEM.createIntrusiveHolder(<span class="built_in">this</span>);</span><br><span class="line">    <span class="comment">//定义了一个私有的最终的Rarity对象，它被命名为rarity。这个对象代表了物品的稀有度。</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> Rarity rarity;</span><br><span class="line">    <span class="comment">//定义了一个私有的最终的整数，它被命名为maxStackSize。这个整数代表了物品的最大堆叠数量。</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> maxStackSize;</span><br><span class="line">    <span class="comment">//定义了一个私有的最终的整数，它被命名为maxDamage。这个整数代表了物品的最大耐久度。</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> maxDamage;</span><br><span class="line">    <span class="comment">//这行代码定义了一个私有的最终的布尔值，它被命名为isFireResistant。这个布尔值表示了物品是否对火有抵抗力。</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">boolean</span> isFireResistant;</span><br><span class="line">    <span class="comment">//定义了一个私有的最终的Item对象，它被命名为craftingRemainingItem。这个对象代表了在制作过程中保留的物品。这个对象可能为null。</span></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> Item craftingRemainingItem;</span><br><span class="line">    <span class="comment">// 定义了一个私有的String对象，它被命名为descriptionId。这个字符串代表了物品的描述ID。这个对象可能为null。</span></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="keyword">private</span> String descriptionId;</span><br><span class="line">    <span class="comment">// 定义了一个私有的最终的FoodProperties对象，它被命名为foodProperties。这个对象代表了物品的食物属性。这个对象可能为null。</span></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> FoodProperties foodProperties;</span><br><span class="line">    <span class="comment">//代码定义了一个私有的最终的FeatureFlagSet对象，它被命名为requiredFeatures。这个对象代表了物品所需的特性标志集。</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> FeatureFlagSet requiredFeatures;</span><br><span class="line"><span class="comment">//它的名字是getId，它接受一个Item对象作为参数，参数的名字是p_41394_。这个方法返回一个整数。：</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">(Item p_41394_)</span> &#123;</span><br><span class="line">       <span class="comment">//它检查p_41394_是否为null。如果p_41394_为null，那么这个表达式就返回0。否则，它调用BuiltInRegistries.ITEM.getId(p_41394_)方法，并返回这个方法的结果。BuiltInRegistries.ITEM.getId(p_41394_)方法返回的是p_41394_在ITEM注册表中的ID。</span></span><br><span class="line">      <span class="keyword">return</span> p_41394_ == <span class="literal">null</span> ? <span class="number">0</span> : BuiltInRegistries.ITEM.getId(p_41394_);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//码定义了一个公共的静态方法，它的名字是byId，它接受一个整数作为参数，参数的名字是p_41446_。这个方法返回一个Item对象。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> Item <span class="title function_">byId</span><span class="params">(<span class="type">int</span> p_41446_)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> BuiltInRegistries.ITEM.byId(p_41446_);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//它的名字是byBlock，它接受一个Block对象作为参数，参数的名字是p_41440_。这个方法返回一个Item对象。这个方法被@Deprecated注解标记，表示这个方法已经被弃用，不建议再使用。</span></span><br><span class="line">   <span class="meta">@Deprecated</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> Item <span class="title function_">byBlock</span><span class="params">(Block p_41440_)</span> &#123;</span><br><span class="line">       <span class="comment">//这行代码从BY_BLOCK这个Map中获取键为p_41440_的值，如果这个Map中不存在键为p_41440_的值，那么就返回Items.AIR。</span></span><br><span class="line">      <span class="keyword">return</span> BY_BLOCK.getOrDefault(p_41440_, Items.AIR);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">//它接受一个Item.Properties对象作为参数，参数的名字是p_41383_。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Item</span><span class="params">(Item.Properties p_41383_)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.rarity = p_41383_.rarity;</span><br><span class="line">      <span class="built_in">this</span>.craftingRemainingItem = p_41383_.craftingRemainingItem;</span><br><span class="line">      <span class="built_in">this</span>.maxDamage = p_41383_.maxDamage;</span><br><span class="line">      <span class="built_in">this</span>.maxStackSize = p_41383_.maxStackSize;</span><br><span class="line">      <span class="built_in">this</span>.foodProperties = p_41383_.foodProperties;</span><br><span class="line">      <span class="built_in">this</span>.isFireResistant = p_41383_.isFireResistant;</span><br><span class="line">      <span class="built_in">this</span>.requiredFeatures = p_41383_.requiredFeatures;</span><br><span class="line">       <span class="comment">//查SharedConstants.IS_RUNNING_IN_IDE是否为true。如果为true，那么它获取this对象的类名，并检查这个类名是否以&quot;Item&quot;结尾。如果不是，那么它记录一个错误。</span></span><br><span class="line">      <span class="keyword">if</span> (SharedConstants.IS_RUNNING_IN_IDE) &#123;</span><br><span class="line">         <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getSimpleName();</span><br><span class="line">         <span class="keyword">if</span> (!s.endsWith(<span class="string">&quot;Item&quot;</span>)) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">&quot;Item classes should end with Item and &#123;&#125; doesn&#x27;t.&quot;</span>, s);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.canRepair = p_41383_.canRepair;</span><br><span class="line">      initClient();</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//定义了一个公共的方法，这个方法被@Deprecated注解标记，表示这个方法已经被弃用，不建议再使用。这个方法的名字是builtInRegistryHolder，没有参数，返回一个Holder.Reference&lt;Item&gt;对象。</span></span><br><span class="line">   <span class="meta">@Deprecated</span></span><br><span class="line">   <span class="keyword">public</span> Holder.Reference&lt;Item&gt; <span class="title function_">builtInRegistryHolder</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.builtInRegistryHolder;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//定义了一个公共的方法，这个方法的名字是onUseTick，接受四个参数：一个Level对象，一个LivingEntity对象，一个ItemStack对象和一个整数。这个方法没有返回值。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onUseTick</span><span class="params">(Level p_41428_, LivingEntity p_41429_, ItemStack p_41430_, <span class="type">int</span> p_41431_)</span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//定义了一个公共的方法，这个方法的名字是onDestroyed，接受一个ItemEntity对象作为参数。这个方法被@Deprecated注解标记，表示这个方法已经被弃用，不建议再使用。这个方法没有返回值。</span></span><br><span class="line">   <span class="comment">/** <span class="doctag">@deprecated</span> Forge: &#123;<span class="doctag">@link</span> IItemExtension#onDestroyed(ItemEntity, DamageSource) Use damage source sensitive version&#125; */</span></span><br><span class="line">   <span class="meta">@Deprecated</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onDestroyed</span><span class="params">(ItemEntity p_150887_)</span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//定义了一个公共的方法，这个方法的名字是verifyTagAfterLoad，接受一个CompoundTag对象作为参数。这个方法没有返回值。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">verifyTagAfterLoad</span><span class="params">(CompoundTag p_150898_)</span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//定义了一个公共的方法，这个方法的名字是canAttackBlock，接受四个参数：一个BlockState对象，一个Level对象，一个BlockPos对象和一个Player对象。这个方法返回一个布尔值。</span></span><br><span class="line">    <span class="comment">//检查一个物品是否可以攻击一个方块。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canAttackBlock</span><span class="params">(BlockState p_41441_, Level p_41442_, BlockPos p_41443_, Player p_41444_)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//这个方法的名字是asItem，没有参数，返回一个Item对象。这个方法被@Override注解标记，表示这个方法覆盖了父类或者接口中的方法。</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Item <span class="title function_">asItem</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//定义了一个公共的方法，这个方法的名字是useOn，接受一个UseOnContext对象作为参数。这个方法返回一个InteractionResult对象。</span></span><br><span class="line">   <span class="keyword">public</span> InteractionResult <span class="title function_">useOn</span><span class="params">(UseOnContext p_41427_)</span> &#123;</span><br><span class="line">       <span class="comment">//行代码返回InteractionResult.PASS，表示物品使用操作被跳过。</span></span><br><span class="line">       <span class="comment">//一些物品可能会被使用在方块上（例如放置物品），而其他物品可能不会。但在这个例子中，由于方法直接返回了InteractionResult.PASS，所以我们可以说这个物品不能被使用在任何方块上。</span></span><br><span class="line">      <span class="keyword">return</span> InteractionResult.PASS;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//定义了一个公共的方法，这个方法的名字是getDestroySpeed，接受两个参数：一个ItemStack对象和一个BlockState对象。这个方法返回一个浮点数。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getDestroySpeed</span><span class="params">(ItemStack p_41425_, BlockState p_41426_)</span> &#123;</span><br><span class="line">       <span class="comment">//行代码返回1.0F，表示物品的销毁速度是1.0。</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">1.0F</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//定义了一个公共的方法，这个方法的名字是use，接受三个参数：一个Level对象，一个Player对象和一个InteractionHand对象。这个方法返回一个InteractionResultHolder&lt;ItemStack&gt;对象。</span></span><br><span class="line">   <span class="keyword">public</span> InteractionResultHolder&lt;ItemStack&gt; <span class="title function_">use</span><span class="params">(Level p_41432_, Player p_41433_, InteractionHand p_41434_)</span> &#123;</span><br><span class="line">       <span class="comment">//代码获取玩家手中的物品，并将其赋值给itemstack。</span></span><br><span class="line">      <span class="type">ItemStack</span> <span class="variable">itemstack</span> <span class="operator">=</span> p_41433_.getItemInHand(p_41434_);</span><br><span class="line">       <span class="comment">//代码检查itemstack是否是可食用的。</span></span><br><span class="line">      <span class="keyword">if</span> (itemstack.isEdible()) &#123;</span><br><span class="line">          <span class="comment">//码检查玩家是否可以吃itemstack。</span></span><br><span class="line">         <span class="keyword">if</span> (p_41433_.canEat(itemstack.getFoodProperties(p_41433_).canAlwaysEat())) &#123;</span><br><span class="line">             <span class="comment">//两行代码表示玩家开始使用物品，并返回一个表示物品被消耗的InteractionResultHolder对象。</span></span><br><span class="line">            p_41433_.startUsingItem(p_41434_);</span><br><span class="line">            <span class="keyword">return</span> InteractionResultHolder.consume(itemstack);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="comment">// 返回一个表示操作失败的InteractionResultHolder对象，这个对象包含了itemstack。</span></span><br><span class="line">            <span class="keyword">return</span> InteractionResultHolder.fail(itemstack);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 表示如果itemstack不是可食用的，那么返回一个表示操作被跳过的InteractionResultHolder对象，这个对象包含了玩家手中的物品。</span></span><br><span class="line">         <span class="keyword">return</span> InteractionResultHolder.pass(p_41433_.getItemInHand(p_41434_));</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//这个方法的名字是finishUsingItem，接受三个参数：一个ItemStack对象，一个Level对象和一个LivingEntity对象。</span></span><br><span class="line">   <span class="keyword">public</span> ItemStack <span class="title function_">finishUsingItem</span><span class="params">(ItemStack p_41409_, Level p_41410_, LivingEntity p_41411_)</span> &#123;</span><br><span class="line">       <span class="comment">//一个条件表达式，它检查当前的物品是否是可食用的。如果是，那么它让p_41411_（一个LivingEntity对象）在p_41410_（一个Level对象）中吃p_41409_（一个ItemStack对象），并返回吃完后的物品。如果不是，那么它直接返回p_41409_。</span></span><br><span class="line">       <span class="comment">//如果物品是可食用的，那么这个方法会让生物吃这个物品；如果物品不是可食用的，那么这个方法会直接返回这个物品。</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.isEdible() ? p_41411_.eat(p_41410_, p_41409_) : p_41409_;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//定义了一个公共的最终方法，这个方法的名字是getMaxStackSize，没有参数，返回一个整数。这个方法被@Deprecated注解标记，表示这个方法已经被弃用，不建议再使用。注释也提示应该使用物品堆叠对象敏感的版本。</span></span><br><span class="line">   <span class="meta">@Deprecated</span> <span class="comment">// Use ItemStack sensitive version.</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getMaxStackSize</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//这行代码返回this.maxStackSize，表示物品的最大堆叠数量。</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.maxStackSize;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//这个方法的名字是getMaxDamage，没有参数，返回一个整数。这个方法被@Deprecated注解标记，表示这个方法已经被弃用，不建议再使用。注释也提示应该使用物品堆叠对象敏感的版本。</span></span><br><span class="line">   <span class="meta">@Deprecated</span> <span class="comment">// Use ItemStack sensitive version.</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getMaxDamage</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//代码返回this.maxDamage，表示物品的最大耐久度。</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.maxDamage;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//定义了一个公共的方法，这个方法的名字是canBeDepleted，没有参数，返回一个布尔值。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canBeDepleted</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="comment">//表示物品是否可以耗尽。如果物品的最大耐久度大于0，那么这个物品就可以耗尽；否则，这个物品就不能耗尽</span></span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">this</span>.maxDamage &gt; <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//定义了一个公共的方法，这个方法的名字是isBarVisible，接受一个ItemStack对象作为参数。这个方法返回一个布尔值。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBarVisible</span><span class="params">(ItemStack p_150899_)</span> &#123;</span><br><span class="line">       <span class="comment">//代码返回p_150899_.isDamaged()，表示物品的耐久条是否可见。如果物品已经损坏，那么这个物品的耐久条就会显示出来；否则，这个物品的耐久条就不会显示出来。</span></span><br><span class="line">      <span class="keyword">return</span> p_150899_.isDamaged();</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//这个方法的名字是getBarWidth，接受一个ItemStack对象作为参数。这个方法返回一个整数。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getBarWidth</span><span class="params">(ItemStack p_150900_)</span> &#123;</span><br><span class="line">       <span class="comment">//这行代码计算并返回物品的耐久条的宽度。这个宽度是通过物品的损坏值和最大耐久度计算得出的。</span></span><br><span class="line">      <span class="keyword">return</span> Math.round(<span class="number">13.0F</span> - (<span class="type">float</span>)p_150900_.getDamageValue() * <span class="number">13.0F</span> / (<span class="type">float</span>)<span class="built_in">this</span>.getMaxDamage(p_150900_));</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//定义了一个公共的方法，这个方法的名字是getBarColor，接受一个ItemStack对象作为参数。这个方法返回一个整数。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getBarColor</span><span class="params">(ItemStack p_150901_)</span> &#123;</span><br><span class="line">       <span class="comment">//代码首先获取物品的最大耐久度，然后计算物品的损坏程度，最后将损坏程度转换为RGB颜色。</span></span><br><span class="line">      <span class="type">float</span> <span class="variable">stackMaxDamage</span> <span class="operator">=</span> <span class="built_in">this</span>.getMaxDamage(p_150901_);</span><br><span class="line">       <span class="comment">//这个方法的作用是获取物品的耐久条的颜色。例如，一些物品的耐久条颜色会随着物品的损坏程度变化而变化，而其他物品的耐久条颜色可能是固定的。</span></span><br><span class="line">      <span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> Math.max(<span class="number">0.0F</span>, (stackMaxDamage - (<span class="type">float</span>)p_150901_.getDamageValue()) / stackMaxDamage);</span><br><span class="line">      <span class="keyword">return</span> Mth.hsvToRgb(f / <span class="number">3.0F</span>, <span class="number">1.0F</span>, <span class="number">1.0F</span>);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//这个方法的名字是overrideStackedOnOther，接受四个参数：一个ItemStack对象，一个Slot对象，一个ClickAction对象和一个Player对象。这个方法返回一个布尔值</span></span><br><span class="line">    <span class="comment">//方法的作用是覆盖物品在其他物品上的堆叠行为</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">overrideStackedOnOther</span><span class="params">(ItemStack p_150888_, Slot p_150889_, ClickAction p_150890_, Player p_150891_)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//定义了一个公共的方法，这个方法的名字是overrideOtherStackedOnMe，接受六个参数：两个ItemStack对象，一个Slot对象，一个ClickAction对象，一个Player对象和一个SlotAccess对象。这个方法返回一个布尔值。</span></span><br><span class="line">    <span class="comment">//这行代码返回false，表示默认情况下，这个物品不会覆盖其他物品堆叠在自己上的行为。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">overrideOtherStackedOnMe</span><span class="params">(</span></span><br><span class="line"><span class="params">      ItemStack p_150892_, ItemStack p_150893_, Slot p_150894_, ClickAction p_150895_, Player p_150896_, SlotAccess p_150897_</span></span><br><span class="line"><span class="params">   )</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//，这个方法的名字是hurtEnemy，接受三个参数：一个ItemStack对象，一个LivingEntity对象和一个LivingEntity对象。这个方法返回一个布尔值。</span></span><br><span class="line">    <span class="comment">//行代码返回false，表示默认情况下，这个物品不会对敌人造成伤害。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hurtEnemy</span><span class="params">(ItemStack p_41395_, LivingEntity p_41396_, LivingEntity p_41397_)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 这个方法的名字是mineBlock，接受五个参数：一个ItemStack对象，一个Level对象，一个BlockState对象，一个BlockPos对象和一个LivingEntity对象。这个方法返回一个布尔值。</span></span><br><span class="line">    <span class="comment">//行代码返回false，表示默认情况下，这个物品不能破坏方块。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">mineBlock</span><span class="params">(ItemStack p_41416_, Level p_41417_, BlockState p_41418_, BlockPos p_41419_, LivingEntity p_41420_)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//代码定义了一个公共的方法，这个方法的名字是isCorrectToolForDrops，接受一个BlockState对象作为参数。这个方法返回一个布尔值。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCorrectToolForDrops</span><span class="params">(BlockState p_41450_)</span> &#123;</span><br><span class="line">       <span class="comment">//返回false，表示默认情况下，这个物品不是破坏方块后获得掉落物的正确工具。</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//代码定义了一个公共的方法，这个方法的名字是interactLivingEntity，接受四个参数：一个ItemStack对象，一个Player对象，一个LivingEntity对象和一个InteractionHand对象。这个方法返回一个InteractionResult对象。</span></span><br><span class="line">   <span class="keyword">public</span> InteractionResult <span class="title function_">interactLivingEntity</span><span class="params">(ItemStack p_41398_, Player p_41399_, LivingEntity p_41400_, InteractionHand p_41401_)</span> &#123;</span><br><span class="line">       <span class="comment">//代码返回InteractionResult.PASS，表示物品与生物的交互操作被跳过。</span></span><br><span class="line">      <span class="keyword">return</span> InteractionResult.PASS;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//代码定义了一个公共的方法，这个方法的名字是getDescription，没有参数，返回一个Component对象。</span></span><br><span class="line">   <span class="keyword">public</span> Component <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> Component.translatable(<span class="built_in">this</span>.getDescriptionId());</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//这段代码定义了一个toString方法，这个方法返回物品的注册表键的字符串表示。</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> BuiltInRegistries.ITEM.getKey(<span class="built_in">this</span>).toString();</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//定义了一个getOrCreateDescriptionId方法，这个方法首先检查descriptionId是否为null。如果descriptionId为null，那么它就使用Util.makeDescriptionId方法创建一个新的描述ID，并将其赋值给descriptionId。然后，这个方法返回descriptionId。</span></span><br><span class="line">   <span class="keyword">protected</span> String <span class="title function_">getOrCreateDescriptionId</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.descriptionId == <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="built_in">this</span>.descriptionId = Util.makeDescriptionId(<span class="string">&quot;item&quot;</span>, BuiltInRegistries.ITEM.getKey(<span class="built_in">this</span>));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.descriptionId;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//定义了一个getDescriptionId方法，这个方法调用getOrCreateDescriptionId方法并返回结果。</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getDescriptionId</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.getOrCreateDescriptionId();</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//段代码定义了一个getDescriptionId方法，这个方法接受一个ItemStack对象作为参数，但实际上并没有使用这个参数，而是简单地调用另一个getDescriptionId方法并返回结果。</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getDescriptionId</span><span class="params">(ItemStack p_41455_)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.getDescriptionId();</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">//段代码定义了一个shouldOverrideMultiplayerNbt方法，这个方法返回true，表示在多人游戏中，这个物品应该覆盖NBT（Named Binary Tag）数据。</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">shouldOverrideMultiplayerNbt</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 定义了一个公共的最终方法，这个方法的名字是getCraftingRemainingItem，没有参数，返回一个Item对象。这个方法被@Deprecated注解标记，表示这个方法已经被弃用，不建议再使用。注释也提示应该使用物品堆叠对象敏感的版本。</span></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="meta">@Deprecated</span> <span class="comment">// Use ItemStack sensitive version.</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> Item <span class="title function_">getCraftingRemainingItem</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">// 获得合成后保留物品</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.craftingRemainingItem;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//定义了一个公共的方法，这个方法的名字是hasCraftingRemainingItem，没有参数，返回一个布尔值。这个方法被@Deprecated注解标记，表示这个方法已经被弃用，不建议再使用。注释也提示应该使用物品堆叠对象敏感的版本。</span></span><br><span class="line">   <span class="meta">@Deprecated</span> <span class="comment">// Use ItemStack sensitive version.</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasCraftingRemainingItem</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">// 是否具有合成保留物品</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.craftingRemainingItem != <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> <span class="comment">// 这个方法的名字是inventoryTick，接受五个参数：一个ItemStack对象，一个Level对象，一个Entity对象，一个整数和一个布尔值。这个方法没有返回值。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inventoryTick</span><span class="params">(ItemStack p_41404_, Level p_41405_, Entity p_41406_, <span class="type">int</span> p_41407_, <span class="type">boolean</span> p_41408_)</span> &#123;</span><br><span class="line">       <span class="comment">// 背包中每tick回调</span></span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 这个方法的名字是onCraftedBy，接受三个参数：一个ItemStack对象，一个Level对象和一个Player对象。这个方法没有返回值</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCraftedBy</span><span class="params">(ItemStack p_41447_, Level p_41448_, Player p_41449_)</span> &#123;</span><br><span class="line">       <span class="comment">//方法的作用是处理物品被玩家制作后的行为</span></span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//代码定义了一个公共的方法，这个方法的名字是isComplex，没有参数，返回一个布尔值。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isComplex</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//代码定义了一个公共的方法，这个方法的名字是getUseAnimation，接受一个ItemStack对象作为参数，返回一个UseAnim对象。</span></span><br><span class="line">   <span class="keyword">public</span> UseAnim <span class="title function_">getUseAnimation</span><span class="params">(ItemStack p_41452_)</span> &#123;</span><br><span class="line">       <span class="comment">//代码返回p_41452_.getItem().isEdible() ? UseAnim.EAT : UseAnim.NONE，表示物品使用的动画。如果物品是可食用的，那么这个物品的使用动画是UseAnim.EAT；否则，这个物品的使用动画是UseAnim.NONE。</span></span><br><span class="line">      <span class="keyword">return</span> p_41452_.getItem().isEdible() ? UseAnim.EAT : UseAnim.NONE;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//定义了一个公共的方法，这个方法的名字是getUseDuration，接受一个ItemStack对象作为参数，返回一个整数。</span></span><br><span class="line">    <span class="comment">//返回使用的持续时间</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getUseDuration</span><span class="params">(ItemStack p_41454_)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (p_41454_.getItem().isEdible()) &#123;</span><br><span class="line">         <span class="keyword">return</span> p_41454_.getFoodProperties(<span class="literal">null</span>).isFastFood() ? <span class="number">16</span> : <span class="number">32</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//代码定义了一个公共的方法，这个方法的名字是releaseUsing，接受四个参数：一个ItemStack对象，一个Level对象，一个LivingEntity对象和一个整数。这个方法没有返回值。</span></span><br><span class="line">    <span class="comment">//方法的作用是处理物品停止使用后的行为。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">releaseUsing</span><span class="params">(ItemStack p_41412_, Level p_41413_, LivingEntity p_41414_, <span class="type">int</span> p_41415_)</span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//这个方法的名字是appendHoverText，接受四个参数：一个ItemStack对象，一个可能为null的Level对象，一个Component对象的列表和一个TooltipFlag对象。这个方法没有返回值。</span></span><br><span class="line">    <span class="comment">//这个方法的作用是添加物品的悬停文本</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">appendHoverText</span><span class="params">(ItemStack p_41421_, <span class="meta">@Nullable</span> Level p_41422_, List&lt;Component&gt; p_41423_, TooltipFlag p_41424_)</span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//这行代码定义了一个公共的方法，这个方法的名字是getTooltipImage，接受一个ItemStack对象作为参数，返回一个Optional&lt;TooltipComponent&gt;对象。</span></span><br><span class="line">   <span class="keyword">public</span> Optional&lt;TooltipComponent&gt; <span class="title function_">getTooltipImage</span><span class="params">(ItemStack p_150902_)</span> &#123;</span><br><span class="line">       <span class="comment">//代码返回Optional.empty()，表示物品的工具提示图片是空的。</span></span><br><span class="line">      <span class="keyword">return</span> Optional.empty();</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//这行代码定义了一个公共的方法，这个方法的名字是getName，接受一个ItemStack对象作为参数，返回一个Component对象。</span></span><br><span class="line">   <span class="keyword">public</span> Component <span class="title function_">getName</span><span class="params">(ItemStack p_41458_)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> Component.translatable(<span class="built_in">this</span>.getDescriptionId(p_41458_));</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//定义了一个公共的方法，这个方法的名字是isFoil，接受一个ItemStack对象作为参数，返回一个布尔值。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFoil</span><span class="params">(ItemStack p_41453_)</span> &#123;</span><br><span class="line">       <span class="comment">//表示物品是否有附魔效果。如果物品有附魔效果，那么这个物品就是镀金的；否则，这个物品就不是镀金的</span></span><br><span class="line">      <span class="keyword">return</span> p_41453_.isEnchanted();</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//定义了一个公共的方法，这个方法的名字是getRarity，接受一个ItemStack对象作为参数，返回一个Rarity对象。</span></span><br><span class="line">   <span class="keyword">public</span> Rarity <span class="title function_">getRarity</span><span class="params">(ItemStack p_41461_)</span> &#123;</span><br><span class="line">       <span class="comment">//首先检查物品是否有附魔效果。如果物品没有附魔效果，那么这个方法返回物品的稀有度；如果物品有附魔效果，那么这个方法根据物品的稀有度返回新的稀有度。</span></span><br><span class="line">      <span class="keyword">if</span> (!p_41461_.isEnchanted()) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">this</span>.rarity;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">switch</span>(<span class="built_in">this</span>.rarity) &#123;</span><br><span class="line">            <span class="keyword">case</span> COMMON:</span><br><span class="line">            <span class="keyword">case</span> UNCOMMON:</span><br><span class="line">               <span class="keyword">return</span> Rarity.RARE;</span><br><span class="line">            <span class="keyword">case</span> RARE:</span><br><span class="line">               <span class="keyword">return</span> Rarity.EPIC;</span><br><span class="line">            <span class="keyword">case</span> EPIC:</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">               <span class="keyword">return</span> <span class="built_in">this</span>.rarity;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//定义了一个公共的方法，这个方法的名字是isEnchantable，接受一个ItemStack对象作为参数，返回一个布尔值。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnchantable</span><span class="params">(ItemStack p_41456_)</span> &#123;</span><br><span class="line">       <span class="comment">//表示物品是否可以附魔。如果物品的最大堆叠数是1且物品是可损坏的，那么这个物品就可以附魔；否则，这个物品就不可以附魔</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.getMaxStackSize(p_41456_) == <span class="number">1</span> &amp;&amp; <span class="built_in">this</span>.isDamageable(p_41456_);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//这个方法的名字是getPlayerPOVHitResult，接受三个参数：一个Level对象，一个Player对象和一个ClipContext.Fluid对象，返回一个BlockHitResult对象。</span></span><br><span class="line">    <span class="comment">//个方法的作用是获取玩家的视角点击结果。</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">static</span> BlockHitResult <span class="title function_">getPlayerPOVHitResult</span><span class="params">(Level p_41436_, Player p_41437_, ClipContext.Fluid p_41438_)</span> &#123;</span><br><span class="line">       <span class="comment">//这个方法获取了玩家的视角旋转角度和位置</span></span><br><span class="line">      <span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> p_41437_.getXRot();</span><br><span class="line">      <span class="type">float</span> <span class="variable">f1</span> <span class="operator">=</span> p_41437_.getYRot();</span><br><span class="line">      <span class="type">Vec3</span> <span class="variable">vec3</span> <span class="operator">=</span> p_41437_.getEyePosition();</span><br><span class="line">       <span class="comment">//然后计算出了玩家的视角方向向量,这个向量用于确定玩家正在看向哪个方向</span></span><br><span class="line">      <span class="type">float</span> <span class="variable">f2</span> <span class="operator">=</span> Mth.cos(-f1 * (<span class="type">float</span>) (Math.PI / <span class="number">180.0</span>) - (<span class="type">float</span>) Math.PI);</span><br><span class="line">      <span class="type">float</span> <span class="variable">f3</span> <span class="operator">=</span> Mth.sin(-f1 * (<span class="type">float</span>) (Math.PI / <span class="number">180.0</span>) - (<span class="type">float</span>) Math.PI);</span><br><span class="line">      <span class="type">float</span> <span class="variable">f4</span> <span class="operator">=</span> -Mth.cos(-f * (<span class="type">float</span>) (Math.PI / <span class="number">180.0</span>));</span><br><span class="line">      <span class="type">float</span> <span class="variable">f5</span> <span class="operator">=</span> Mth.sin(-f * (<span class="type">float</span>) (Math.PI / <span class="number">180.0</span>));</span><br><span class="line">      <span class="type">float</span> <span class="variable">f6</span> <span class="operator">=</span> f3 * f4;</span><br><span class="line">      <span class="type">float</span> <span class="variable">f7</span> <span class="operator">=</span> f2 * f4;</span><br><span class="line">      <span class="type">double</span> <span class="variable">d0</span> <span class="operator">=</span> p_41437_.getBlockReach();</span><br><span class="line">      <span class="type">Vec3</span> <span class="variable">vec31</span> <span class="operator">=</span> vec3.add((<span class="type">double</span>)f6 * d0, (<span class="type">double</span>)f5 * d0, (<span class="type">double</span>)f7 * d0);</span><br><span class="line">       <span class="comment">//这个方法返回了玩家的视角点击结果。这个结果可以用于判断玩家的视角点击到的方块和位置，以及玩家是否点击到了方块。</span></span><br><span class="line">       <span class="comment">//这个结果是一个BlockHitResult对象，表示玩家的视角点击到的方块和位置。</span></span><br><span class="line">      <span class="keyword">return</span> p_41436_.clip(<span class="keyword">new</span> <span class="title class_">ClipContext</span>(vec3, vec31, ClipContext.Block.OUTLINE, p_41438_, p_41437_));</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//定义了一个公共的方法，这个方法的名字是getEnchantmentValue，没有参数，返回一个整数。这个方法被@Deprecated注解标记，表示这个方法已经被弃用，不建议再使用。</span></span><br><span class="line">   <span class="comment">/** Forge: Use ItemStack sensitive version. */</span></span><br><span class="line">   <span class="meta">@Deprecated</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getEnchantmentValue</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//这个方法的作用是获取这个物品的附魔值</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//定义了一个公共的方法，这个方法的名字是isValidRepairItem，接受两个ItemStack对象作为参数，返回一个布尔值</span></span><br><span class="line">    <span class="comment">//这个物品不是有效的修理物品。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidRepairItem</span><span class="params">(ItemStack p_41402_, ItemStack p_41403_)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//这个方法的名字是getDefaultAttributeModifiers，接受一个EquipmentSlot对象作为参数，返回一个Multimap&lt;Attribute, AttributeModifier&gt;对象。这个方法被@Deprecated注解标记，表示这个方法已经被弃用，不建议再使用。</span></span><br><span class="line">   <span class="meta">@Deprecated</span> <span class="comment">// Use ItemStack sensitive version.</span></span><br><span class="line">   <span class="keyword">public</span> Multimap&lt;Attribute, AttributeModifier&gt; <span class="title function_">getDefaultAttributeModifiers</span><span class="params">(EquipmentSlot p_41388_)</span> &#123;</span><br><span class="line">       <span class="comment">//代码返回一个不可变的多值映射，这个映射是空的。</span></span><br><span class="line">      <span class="keyword">return</span> ImmutableMultimap.of();</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//代码定义了一个受保护的最终的布尔变量，这个变量的名字是canRepair。</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">boolean</span> canRepair;</span><br><span class="line"><span class="comment">//定义了一个公共的方法，这个方法的名字是isRepairable，接受一个ItemStack对象作为参数，返回一个布尔值。</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isRepairable</span><span class="params">(ItemStack stack)</span> &#123;</span><br><span class="line">       <span class="comment">//果这个物品可以修理且是可损坏的，那么这个物品就可以修理；否则，这个物品就不可以修理。</span></span><br><span class="line">      <span class="keyword">return</span> canRepair &amp;&amp; isDamageable(stack);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//定义了一个公共的方法，这个方法的名字是useOnRelease，接受一个ItemStack对象作为参数，返回一个布尔值。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">useOnRelease</span><span class="params">(ItemStack p_41464_)</span> &#123;</span><br><span class="line">       <span class="comment">//表示这个物品是否在释放时使用。如果这个物品是一个十字弓，那么这个物品就在释放时使用；否则，这个物品就不在释放时使用。</span></span><br><span class="line">      <span class="keyword">return</span> p_41464_.getItem() == Items.CROSSBOW;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//定义了一个公共的方法，这个方法的名字是getDefaultInstance，没有参数，返回一个ItemStack对象。</span></span><br><span class="line">   <span class="keyword">public</span> ItemStack <span class="title function_">getDefaultInstance</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ItemStack</span>(<span class="built_in">this</span>);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//这行代码定义了一个公共的方法，这个方法的名字是isEdible，没有参数，返回一个布尔值。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEdible</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//表示这个物品是否可以食用。如果这个物品有食物属性，那么这个物品就可以食用；否则，这个物品就不可以食用。</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.foodProperties != <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//码定义了一个公共的方法，这个方法的名字是getFoodProperties，没有参数，返回一个FoodProperties对象。这个方法被@Deprecated和@Nullable注解标记，表示这个方法已经被弃用，不建议再使用，且可能返回null。</span></span><br><span class="line">   <span class="comment">// Use IForgeItem#getFoodProperties(ItemStack, LivingEntity) in favour of this.</span></span><br><span class="line">   <span class="meta">@Deprecated</span></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="keyword">public</span> FoodProperties <span class="title function_">getFoodProperties</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//行代码返回this.foodProperties，表示这个物品的食物属性。</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.foodProperties;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//定义了一个公共的方法，这个方法的名字是getDrinkingSound，没有参数，返回一个SoundEvent对象。</span></span><br><span class="line">   <span class="keyword">public</span> SoundEvent <span class="title function_">getDrinkingSound</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//返回SoundEvents.GENERIC_DRINK，表示这个物品的饮用声音。</span></span><br><span class="line">      <span class="keyword">return</span> SoundEvents.GENERIC_DRINK;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> SoundEvent <span class="title function_">getEatingSound</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> SoundEvents.GENERIC_EAT;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//定义了一个公共的方法，这个方法的名字是isFireResistant，没有参数，返回一个布尔值。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFireResistant</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.isFireResistant;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//这个方法的名字是canBeHurtBy，接受一个DamageSource对象作为参数，返回一个布尔值</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canBeHurtBy</span><span class="params">(DamageSource p_41387_)</span> &#123;</span><br><span class="line">       <span class="comment">//如果这个物品不对火有抵抗力，或者伤害源不是火伤害，那么这个物品就可以被伤害；否则，这个物品就不可以被伤害</span></span><br><span class="line">      <span class="keyword">return</span> !<span class="built_in">this</span>.isFireResistant || !p_41387_.is(DamageTypeTags.IS_FIRE);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//表示这个物品可以放入容器中。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canFitInsideContainerItems</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//这个方法的名字是requiredFeatures，没有参数，返回一个FeatureFlagSet对象。</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> FeatureFlagSet <span class="title function_">requiredFeatures</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//示这个物品需要的特性标志集。</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.requiredFeatures;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// FORGE START</span></span><br><span class="line">    <span class="comment">//代码定义了一个私有的对象变量，这个变量的名字是renderProperties。</span></span><br><span class="line">   <span class="keyword">private</span> Object renderProperties;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">      DO NOT CALL, IT WILL DISAPPEAR IN THE FUTURE</span></span><br><span class="line"><span class="comment">      Call RenderProperties.get instead</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">//这行代码定义了一个公共的方法，这个方法的名字是getRenderPropertiesInternal，没有参数，返回一个Object对象。</span></span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">getRenderPropertiesInternal</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//代码返回renderProperties，表示这个物品的渲染属性。</span></span><br><span class="line">      <span class="keyword">return</span> renderProperties;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//代码定义了一个私有的方法，这个方法的名字是initClient，没有参数。</span></span><br><span class="line">    <span class="comment">//方法的作用是初始化客户端</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initClient</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">// Minecraft instance isn&#x27;t available in datagen, so don&#x27;t call initializeClient if in datagen</span></span><br><span class="line">      <span class="keyword">if</span> (net.neoforged.fml.loading.FMLEnvironment.dist == net.neoforged.api.distmarker.Dist.CLIENT &amp;&amp; !net.neoforged.fml.loading.FMLLoader.getLaunchHandler().isData()) &#123;</span><br><span class="line">         initializeClient(properties -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (properties == <span class="built_in">this</span>)</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Don&#x27;t extend IItemRenderProperties in your item, use an anonymous class instead.&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.renderProperties = properties;</span><br><span class="line">         &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//这个方法的名字是initializeClient，接受一个java.util.function.Consumer&lt;net.neoforged.neoforge.client.extensions.common.IClientItemExtensions&gt;对象作为参数。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initializeClient</span><span class="params">(java.util.function.Consumer&lt;net.neoforged.neoforge.client.extensions.common.IClientItemExtensions&gt; consumer)</span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// END FORGE</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Properties</span> &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">maxStackSize</span> <span class="operator">=</span> <span class="number">64</span>; <span class="comment">//物品的最大堆叠数量</span></span><br><span class="line">      <span class="type">int</span> maxDamage; <span class="comment">// 最大耐久度</span></span><br><span class="line">      <span class="meta">@Nullable</span></span><br><span class="line">      Item craftingRemainingItem; <span class="comment">// 制作时是否保留物品</span></span><br><span class="line">      <span class="type">Rarity</span> <span class="variable">rarity</span> <span class="operator">=</span> Rarity.COMMON; <span class="comment">//物品的稀有度</span></span><br><span class="line">      <span class="meta">@Nullable</span></span><br><span class="line">      FoodProperties foodProperties; <span class="comment">//物品的食物属性</span></span><br><span class="line">      <span class="type">boolean</span> isFireResistant; <span class="comment">//物品是否对火有抵抗力</span></span><br><span class="line">       <span class="comment">//物品需要的特性标志集</span></span><br><span class="line">      <span class="type">FeatureFlagSet</span> <span class="variable">requiredFeatures</span> <span class="operator">=</span> FeatureFlags.VANILLA_SET;</span><br><span class="line">      <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">canRepair</span> <span class="operator">=</span> <span class="literal">true</span>;<span class="comment">//是否可以修理。</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> Item.Properties <span class="title function_">food</span><span class="params">(FoodProperties p_41490_)</span> &#123;</span><br><span class="line">          <span class="comment">//这个方法的作用是设置物品的食物属性。</span></span><br><span class="line">         <span class="built_in">this</span>.foodProperties = p_41490_;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//这两行代码检查了物品的最大耐久度是否大于0，如果是，那么抛出一个异常；否则，设置物品的最大堆叠数量，并返回Item.Properties对象。</span></span><br><span class="line">      <span class="keyword">public</span> Item.Properties <span class="title function_">stacksTo</span><span class="params">(<span class="type">int</span> p_41488_)</span> &#123;</span><br><span class="line">         <span class="keyword">if</span> (<span class="built_in">this</span>.maxDamage &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Unable to have damage AND stack.&quot;</span>);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.maxStackSize = p_41488_;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//行代码返回this.maxDamage == 0 ? this.durability(p_41500_) : this，表示如果物品的最大耐久度为0，那么设置物品的耐久度，并返回Item.Properties对象；否则，直接返回Item.Properties对象。</span></span><br><span class="line">      <span class="keyword">public</span> Item.Properties <span class="title function_">defaultDurability</span><span class="params">(<span class="type">int</span> p_41500_)</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">this</span>.maxDamage == <span class="number">0</span> ? <span class="built_in">this</span>.durability(p_41500_) : <span class="built_in">this</span>;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//两行代码设置了物品的最大耐久度和最大堆叠数量，并返回了Item.Properties对象。</span></span><br><span class="line">      <span class="keyword">public</span> Item.Properties <span class="title function_">durability</span><span class="params">(<span class="type">int</span> p_41504_)</span> &#123;</span><br><span class="line">         <span class="built_in">this</span>.maxDamage = p_41504_;</span><br><span class="line">         <span class="built_in">this</span>.maxStackSize = <span class="number">1</span>;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//这两行代码设置了物品在制作时剩余的物品，并返回了Item.Properties对象。</span></span><br><span class="line">      <span class="keyword">public</span> Item.Properties <span class="title function_">craftRemainder</span><span class="params">(Item p_41496_)</span> &#123;</span><br><span class="line">         <span class="built_in">this</span>.craftingRemainingItem = p_41496_;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//设置稀有度</span></span><br><span class="line">      <span class="keyword">public</span> Item.Properties <span class="title function_">rarity</span><span class="params">(Rarity p_41498_)</span> &#123;</span><br><span class="line">         <span class="built_in">this</span>.rarity = p_41498_;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">// 设置扛火</span></span><br><span class="line">      <span class="keyword">public</span> Item.Properties <span class="title function_">fireResistant</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="built_in">this</span>.isFireResistant = <span class="literal">true</span>;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">// 设置不可修复</span></span><br><span class="line">      <span class="keyword">public</span> Item.Properties <span class="title function_">setNoRepair</span><span class="params">()</span> &#123;</span><br><span class="line">         canRepair = <span class="literal">false</span>;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//这个方法的名字是requiredFeatures，接受一个FeatureFlag数组作为参数，返回Item.Properties对象。</span></span><br><span class="line">      <span class="keyword">public</span> Item.Properties <span class="title function_">requiredFeatures</span><span class="params">(FeatureFlag... p_250948_)</span> &#123;</span><br><span class="line">          <span class="comment">//设置了物品需要的特性标志集，并返回了Item.Properties对象。</span></span><br><span class="line">         <span class="built_in">this</span>.requiredFeatures = FeatureFlags.REGISTRY.subset(p_250948_);</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 我的世界 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>07-pytorch-save and load model</title>
      <link href="/2023/11/12/07-pytorch-save-and-load-model/"/>
      <url>/2023/11/12/07-pytorch-save-and-load-model/</url>
      
        <content type="html"><![CDATA[<h1 id="SAVE-AND-LOAD-THE-MODEL"><a href="#SAVE-AND-LOAD-THE-MODEL" class="headerlink" title="SAVE AND LOAD THE MODEL"></a>SAVE AND LOAD THE MODEL</h1><p>在本节中，我们将了解如何通过保存、加载和运行模型预测来持久保存模型状态。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision.models <span class="keyword">as</span> models</span><br></pre></td></tr></table></figure><h2 id="Saving-and-Loading-Model-Weights"><a href="#Saving-and-Loading-Model-Weights" class="headerlink" title="Saving and Loading Model Weights"></a>Saving and Loading Model Weights</h2><p>PyTorch 模型将学习到的参数存储在内部状态字典中，称为 <code>state_dict</code> 。这些可以通过 <code>torch.save</code> 方法保存：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = models.vgg16(weights=<span class="string">&#x27;IMAGENET1K_V1&#x27;</span>)</span><br><span class="line">torch.save(model.state_dict(), <span class="string">&#x27;model_weights.pth&#x27;</span>)</span><br></pre></td></tr></table></figure><p>要加载模型权重，您需要先创建同一模型的实例，然后使用 <code>load_state_dict()</code> 方法加载参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model = models.vgg16() <span class="comment"># we do not specify ``weights``, i.e. create untrained model</span></span><br><span class="line">model.load_state_dict(torch.load(<span class="string">&#x27;model_weights.pth&#x27;</span>))</span><br><span class="line">model.<span class="built_in">eval</span>()</span><br></pre></td></tr></table></figure><blockquote><p>请务必在推理之前调用 <code>model.eval()</code> 方法，将 dropout 和批量归一化层设置为评估模式。如果不这样做将会产生不一致的推理结果。</p></blockquote><h2 id="Saving-and-Loading-Models-with-Shapes"><a href="#Saving-and-Loading-Models-with-Shapes" class="headerlink" title="Saving and Loading Models with Shapes"></a>Saving and Loading Models with Shapes</h2><p>加载模型权重时，我们需要首先实例化模型类，因为该类定义了网络的结构。我们可能希望将此类的结构与模型一起保存，在这种情况下，我们可以将 <code>model</code> （而不是 <code>model.state_dict()</code> ）传递给保存函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.save(model, <span class="string">&#x27;model.pth&#x27;</span>)</span><br></pre></td></tr></table></figure><p>然后我们可以像这样加载模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model = torch.load(<span class="string">&#x27;model.pth&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>此方法在序列化模型时使用 Python pickle 模块，因此它依赖于加载模型时可用的实际类定义。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> save load model </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06-pytorch-optimizing model parameters</title>
      <link href="/2023/11/10/06-pytorch-optimizing-model-parameters/"/>
      <url>/2023/11/10/06-pytorch-optimizing-model-parameters/</url>
      
        <content type="html"><![CDATA[<h1 id="OPTIMIZING-MODEL-PARAMETERS"><a href="#OPTIMIZING-MODEL-PARAMETERS" class="headerlink" title="OPTIMIZING MODEL PARAMETERS"></a>OPTIMIZING MODEL PARAMETERS</h1><p>现在我们有了模型和数据，是时候通过优化数据上的参数来训练、验证和测试我们的模型了。训练模型是一个迭代过程；在每次迭代中，模型都会对输出进行猜测，计算其猜测的误差（损失），收集误差相对于其参数的导数（如我们在上一节中看到的），并使用梯度下降优化这些参数。有关此过程的更详细演练，请观看 3Blue1Brown 的有关反向传播的<br><a href="https://www.youtube.com/watch?v=tIeHLnjs5U8">视频</a></p><h2 id="Prerequisite-Code"><a href="#Prerequisite-Code" class="headerlink" title="Prerequisite Code"></a>Prerequisite Code</h2><p>我们加载前面有关数据集和数据加载器以及构建模型部分的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> torchvision.transforms <span class="keyword">import</span> ToTensor</span><br><span class="line"></span><br><span class="line">training_data = datasets.FashionMNIST(</span><br><span class="line">    root=<span class="string">&quot;data&quot;</span>,</span><br><span class="line">    train=<span class="literal">True</span>,</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">    transform=ToTensor()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">test_data = datasets.FashionMNIST(</span><br><span class="line">    root=<span class="string">&quot;data&quot;</span>,</span><br><span class="line">    train=<span class="literal">False</span>,</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">    transform=ToTensor()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">train_dataloader = DataLoader(training_data, batch_size=<span class="number">64</span>)</span><br><span class="line">test_dataloader = DataLoader(test_data, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NeuralNetwork</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.flatten = nn.Flatten()</span><br><span class="line">        self.linear_relu_stack = nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">28</span>*<span class="number">28</span>, <span class="number">512</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">512</span>, <span class="number">512</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">512</span>, <span class="number">10</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.flatten(x)</span><br><span class="line">        logits = self.linear_relu_stack(x)</span><br><span class="line">        <span class="keyword">return</span> logits</span><br><span class="line"></span><br><span class="line">model = NeuralNetwork()</span><br></pre></td></tr></table></figure><h2 id="Hyperparameters"><a href="#Hyperparameters" class="headerlink" title="Hyperparameters"></a>Hyperparameters</h2><p>超参数是可调整的参数，可让您控制模型优化过程。不同的超参数值会影响模型训练和收敛速度（阅读有关超参数调整的更多信息）</p><p>我们定义以下训练超参数：</p><ul><li>Number of Epochs - 迭代数据集的次数</li><li>Batch Size - 参数更新之前通过网络传播的数据样本数量</li><li>学习率 - 每个批次&#x2F;时期更新模型参数的量。较小的值会导致学习速度较慢，而较大的值可能会导致训练期间出现不可预测的行为。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">learning_rate = <span class="number">1e-3</span></span><br><span class="line">batch_size = <span class="number">64</span></span><br><span class="line">epochs = <span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="Optimization-Loop"><a href="#Optimization-Loop" class="headerlink" title="Optimization Loop"></a>Optimization Loop</h2><p>一旦我们设置了超参数，我们就可以使用优化循环来训练和优化我们的模型。优化循环的每次迭代称为一个时期epoch。</p><p>每个时期epoch由两个主要部分组成：</p><ul><li>The Train Loop:迭代训练数据集并尝试收敛到最佳参数。</li><li>The Validation&#x2F;Test Loop:迭代测试数据集以检查模型性能是否有所改善。</li></ul><p>让我们简单熟悉一下训练循环中使用的一些概念。向前跳转查看优化循环的完整实现。</p><h3 id="Loss-Function"><a href="#Loss-Function" class="headerlink" title="Loss Function"></a>Loss Function</h3><p>当提供一些训练数据时，我们未经训练的网络可能不会给出正确的答案。损失函数衡量的是得到的结果与目标值的不相似程度，它是我们在训练时想要最小化的损失函数。为了计算损失，我们使用给定数据样本的输入进行预测，并将其与真实数据标签值进行比较。</p><p>常见的损失函数包括用于回归任务的 nn.MSELoss（均方误差）和用于分类的 nn.NLLLoss（负对数似然）。 nn.CrossEntropyLoss 结合了 <code>nn.LogSoftmax</code> 和 <code>nn.NLLLoss</code> 。</p><p>我们将模型的输出 logits 传递给 <code>nn.CrossEntropyLoss</code> ，这将标准化 logits 并计算预测误差。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Initialize the loss function</span></span><br><span class="line">loss_fn = nn.CrossEntropyLoss()</span><br></pre></td></tr></table></figure><h3 id="Optimizer"><a href="#Optimizer" class="headerlink" title="Optimizer"></a>Optimizer</h3><p>优化是调整模型参数以减少每个训练步骤中模型误差的过程。优化算法定义了如何执行此过程（在本例中我们使用随机梯度下降）。所有优化逻辑都封装在 <code>optimizer</code> 对象中。这里，我们使用SGD优化器；此外，PyTorch 中还有许多不同的优化器，例如 ADAM 和 RMSProp，它们可以更好地处理不同类型的模型和数据。</p><p>我们通过注册需要训练的模型参数并传入学习率超参数来初始化优化器。</p><p>在训练循环中，优化分三个步骤进行：</p><ul><li>调用 <code>optimizer.zero_grad()</code> 重置模型参数的梯度。默认情况下渐变相加；为了防止重复计算，我们在每次迭代时明确地将它们归零。</li><li>通过调用 <code>loss.backward()</code> 反向传播预测损失。 PyTorch 存储损失的梯度。每个参数。</li><li>一旦我们有了梯度，我们就调用 optimizer.step() 通过向后传递中收集的梯度来调整参数。</li></ul><h2 id="Full-Implementation"><a href="#Full-Implementation" class="headerlink" title="Full Implementation"></a>Full Implementation</h2><p>我们定义了循环优化代码的 <code>train_loop</code> 和根据测试数据评估模型性能的 <code>test_loop</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">train_loop</span>(<span class="params">dataloader, model, loss_fn, optimizer</span>):</span><br><span class="line">    size = <span class="built_in">len</span>(dataloader.dataset)</span><br><span class="line">    <span class="comment"># Set the model to training mode - important for batch normalization and dropout layers</span></span><br><span class="line">    <span class="comment"># Unnecessary in this situation but added for best practices</span></span><br><span class="line">    model.train()</span><br><span class="line">    <span class="keyword">for</span> batch, (X, y) <span class="keyword">in</span> <span class="built_in">enumerate</span>(dataloader):</span><br><span class="line">        <span class="comment"># Compute prediction and loss</span></span><br><span class="line">        pred = model(X)</span><br><span class="line">        loss = loss_fn(pred, y)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Backpropagation</span></span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> batch % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            loss, current = loss.item(), (batch + <span class="number">1</span>) * <span class="built_in">len</span>(X)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;loss: <span class="subst">&#123;loss:&gt;7f&#125;</span>  [<span class="subst">&#123;current:&gt;5d&#125;</span>/<span class="subst">&#123;size:&gt;5d&#125;</span>]&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_loop</span>(<span class="params">dataloader, model, loss_fn</span>):</span><br><span class="line">    <span class="comment"># Set the model to evaluation mode - important for batch normalization and dropout layers</span></span><br><span class="line">    <span class="comment"># Unnecessary in this situation but added for best practices</span></span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    size = <span class="built_in">len</span>(dataloader.dataset)</span><br><span class="line">    num_batches = <span class="built_in">len</span>(dataloader)</span><br><span class="line">    test_loss, correct = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Evaluating the model with torch.no_grad() ensures that no gradients are computed during test mode</span></span><br><span class="line">    <span class="comment"># also serves to reduce unnecessary gradient computations and memory usage for tensors with requires_grad=True</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> X, y <span class="keyword">in</span> dataloader:</span><br><span class="line">            pred = model(X)</span><br><span class="line">            test_loss += loss_fn(pred, y).item()</span><br><span class="line">            correct += (pred.argmax(<span class="number">1</span>) == y).<span class="built_in">type</span>(torch.<span class="built_in">float</span>).<span class="built_in">sum</span>().item()</span><br><span class="line"></span><br><span class="line">    test_loss /= num_batches</span><br><span class="line">    correct /= size</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Test Error: \n Accuracy: <span class="subst">&#123;(<span class="number">100</span>*correct):&gt;<span class="number">0.1</span>f&#125;</span>%, Avg loss: <span class="subst">&#123;test_loss:&gt;8f&#125;</span> \n&quot;</span>)</span><br></pre></td></tr></table></figure><p>我们初始化损失函数和优化器，并将其传递给 <code>train_loop</code> 和 <code>test_loop</code> 。您可以随意增加纪元数来跟踪模型性能的改进。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">loss_fn = nn.CrossEntropyLoss()</span><br><span class="line">optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)</span><br><span class="line"></span><br><span class="line">epochs = <span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Epoch <span class="subst">&#123;t+<span class="number">1</span>&#125;</span>\n-------------------------------&quot;</span>)</span><br><span class="line">    train_loop(train_dataloader, model, loss_fn, optimizer)</span><br><span class="line">    test_loop(test_dataloader, model, loss_fn)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Done!&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> optimizing model parameters </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05_pytorch_AUTOMATIC_DIFFERENTIATION</title>
      <link href="/2023/11/10/05-pytorch-AUTOMATIC-DIFFERENTIATION/"/>
      <url>/2023/11/10/05-pytorch-AUTOMATIC-DIFFERENTIATION/</url>
      
        <content type="html"><![CDATA[<h1 id="AUTOMATIC-DIFFERENTIATION-WITH-TORCH-AUTOGRAD"><a href="#AUTOMATIC-DIFFERENTIATION-WITH-TORCH-AUTOGRAD" class="headerlink" title="AUTOMATIC DIFFERENTIATION WITH TORCH.AUTOGRAD"></a>AUTOMATIC DIFFERENTIATION WITH <code>TORCH.AUTOGRAD</code></h1><p>在训练神经网络时，最常用的算法是反向传播。在该算法中，根据损失函数相对于给定参数的梯度来调整参数（模型权重）。</p><p>为了计算这些梯度，PyTorch 有一个名为 <code>torch.autograd</code> 的内置微分引擎。它支持任何计算图的梯度自动计算。</p><p>考虑最简单的单层神经网络，具有输入 <code>x</code> 、参数 <code>w</code> 和 <code>b</code> 以及一些损失函数。它可以通过以下方式在 PyTorch 中定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">x = torch.ones(<span class="number">5</span>)  <span class="comment"># input tensor</span></span><br><span class="line">y = torch.zeros(<span class="number">3</span>)  <span class="comment"># expected output</span></span><br><span class="line">w = torch.randn(<span class="number">5</span>, <span class="number">3</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">b = torch.randn(<span class="number">3</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">z = torch.matmul(x, w)+b</span><br><span class="line">loss = torch.nn.functional.binary_cross_entropy_with_logits(z, y)</span><br></pre></td></tr></table></figure><h2 id="Tensors-Functions-and-Computational-graph"><a href="#Tensors-Functions-and-Computational-graph" class="headerlink" title="Tensors, Functions and Computational graph"></a>Tensors, Functions and Computational graph</h2><p>该代码定义了以下计算图：</p><p><img src="https://s2.loli.net/2023/11/10/sPfwv1i3QHr7kte.png" alt="img"></p><p>在这个网络中， <code>w</code> 和 <code>b</code> 是我们需要优化的参数。因此，我们需要能够计算损失函数相对于这些变量的梯度。为此，我们设置这些张量的 <code>requires_grad</code> 属性。</p><blockquote><p>您可以在创建张量时设置 <code>requires_grad</code> 的值，或者稍后使用 <code>x.requires_grad_(True)</code> 方法设置。</p></blockquote><p>我们应用于张量来构造计算图的函数实际上是类 <code>Function</code> 的对象。该对象知道如何向前计算函数，以及如何在向后传播步骤中计算其导数。对反向传播函数的引用存储在张量的 <code>grad_fn</code> 属性中。您可以在<a href="https://pytorch.org/docs/stable/autograd.html#function">文档</a>中找到 <code>Function</code> 的更多信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Gradient function for z = <span class="subst">&#123;z.grad_fn&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Gradient function for loss = <span class="subst">&#123;loss.grad_fn&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Computing-Gradients"><a href="#Computing-Gradients" class="headerlink" title="Computing Gradients"></a>Computing Gradients</h2><p>为了优化神经网络中参数的权重，我们需要计算损失函数相对于参数的导数，即，我们需要在&lt;的一些固定值下的 $$ \frac{loss}{w} 和 \frac{loss}{b} $$  b2&gt; 和 <code>y</code> 。为了计算这些导数，我们调用 <code>loss.backward()</code> ，然后从 <code>w.grad</code> 和 <code>b.grad</code> 检索值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loss.backward()</span><br><span class="line"><span class="built_in">print</span>(w.grad)</span><br><span class="line"><span class="built_in">print</span>(b.grad)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tensor([[<span class="number">0.3313</span>, <span class="number">0.0626</span>, <span class="number">0.2530</span>],</span><br><span class="line">        [<span class="number">0.3313</span>, <span class="number">0.0626</span>, <span class="number">0.2530</span>],</span><br><span class="line">        [<span class="number">0.3313</span>, <span class="number">0.0626</span>, <span class="number">0.2530</span>],</span><br><span class="line">        [<span class="number">0.3313</span>, <span class="number">0.0626</span>, <span class="number">0.2530</span>],</span><br><span class="line">        [<span class="number">0.3313</span>, <span class="number">0.0626</span>, <span class="number">0.2530</span>]])</span><br><span class="line">tensor([<span class="number">0.3313</span>, <span class="number">0.0626</span>, <span class="number">0.2530</span>])</span><br></pre></td></tr></table></figure><blockquote><ul><li>我们只能获取计算图的叶节点的 <code>grad</code> 属性，其中 <code>requires_grad</code> 属性设置为 <code>True</code> 。对于我们图中的所有其他节点，梯度将不可用。</li><li>出于性能原因，我们只能在给定图上使用 <code>backward</code> 执行一次梯度计算。如果我们需要在同一个图表上执行多个 <code>backward</code> 调用，则需要将 <code>retain_graph=True</code> 传递给 <code>backward</code> 调用。</li></ul></blockquote><h2 id="Disabling-Gradient-Tracking"><a href="#Disabling-Gradient-Tracking" class="headerlink" title="Disabling Gradient Tracking"></a>Disabling Gradient Tracking</h2><p>默认情况下，所有具有 <code>requires_grad=True</code> 的张量都会跟踪其计算历史并支持梯度计算。然而，在某些情况下，我们不需要这样做，例如，当我们训练了模型并且只想将其应用于某些输入数据时，即我们只想通过网络进行前向计算。我们可以通过用 <code>torch.no_grad()</code> 块包围我们的计算代码来停止跟踪计算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">z = torch.matmul(x, w)+b</span><br><span class="line"><span class="built_in">print</span>(z.requires_grad)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    z = torch.matmul(x, w)+b</span><br><span class="line"><span class="built_in">print</span>(z.requires_grad)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p>获得相同结果的另一种方法是在张量上使用 <code>detach()</code> 方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">z = torch.matmul(x, w)+b</span><br><span class="line">z_det = z.detach()</span><br><span class="line"><span class="built_in">print</span>(z_det.requires_grad)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">False</span><br></pre></td></tr></table></figure><p>您可能想要禁用梯度跟踪的原因有：</p><ul><li>将神经网络中的某些参数标记为冻结参数。</li><li>当您仅进行前向传递时加快计算速度，因为对不跟踪梯度的张量进行计算会更有效。</li></ul><h2 id="More-on-Computational-Graphs"><a href="#More-on-Computational-Graphs" class="headerlink" title="More on Computational Graphs"></a>More on Computational Graphs</h2><p>从概念上讲，autograd 在由 Function 对象组成的有向无环图 (DAG) 中保存数据（张量）和所有执行的操作（以及生成的新张量）的记录。在这个 DAG 中，叶子是输入张量，根是输出张量。通过从根到叶追踪该图，您可以使用链式法则自动计算梯度。</p><p>在前向传递中，autograd 同时执行两件事：</p><ul><li>运行请求的操作来计算结果张量</li><li>在 DAG 中维护操作的梯度函数.</li></ul><p>当在 DAG 根上调用 <code>.backward()</code> 时，向后传递开始。 <code>autograd</code> 然后：</p><ul><li>计算每个 <code>.grad_fn</code> 的梯度，</li><li>将它们累积到相应张量的 <code>.grad</code> 属性中</li><li>使用链式法则，一直传播到叶张量。</li></ul><p>DAG 在 PyTorch 中是动态的需要注意的重要一点是图是从头开始重新创建的；每次 <code>.backward()</code> 调用后，autograd 开始填充新图表。这正是允许您在模型中使用控制流语句的原因；如果需要，您可以在每次迭代时更改形状、大小和操作。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 自动求导 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04_pytorch_build_the_neural_network</title>
      <link href="/2023/11/10/04-pytorch-build-the-neural-network/"/>
      <url>/2023/11/10/04-pytorch-build-the-neural-network/</url>
      
        <content type="html"><![CDATA[<h1 id="BUILD-THE-NEURAL-NETWORK"><a href="#BUILD-THE-NEURAL-NETWORK" class="headerlink" title="BUILD THE NEURAL NETWORK"></a>BUILD THE NEURAL NETWORK</h1><p><strong>神经网络的构成是什么？</strong></p><p>神经网络由对数据执行操作的层&#x2F;模块组成。 </p><p><strong>层和模块在哪里？</strong></p><p>torch.nn 命名空间提供了构建您自己的神经网络所需的所有构建块。</p><p> PyTorch 中的每个模块都是 nn.Module 的子类。</p><p><strong>神经网络的的嵌套构成</strong></p><p>神经网络本身就是一个模块，由其他模块（层）组成。</p><p><strong>嵌套结构的好处</strong></p><p>这种嵌套结构允许轻松构建和管理复杂的架构。</p><p>在以下部分中，我们将构建一个神经网络来对 FashionMNIST 数据集中的图像进行分类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets, transforms</span><br></pre></td></tr></table></figure><h2 id="Get-Device-for-Training"><a href="#Get-Device-for-Training" class="headerlink" title="Get Device for Training"></a>Get Device for Training</h2><p>如果我们在具有GPU的设备上，可以使用GPU加速。</p><p><strong>如何使用GPU？</strong></p><p>我们希望能够在 GPU 或 MPS 等硬件加速器（如果可用）上训练我们的模型。让我们检查一下  <a href="https://pytorch.org/docs/stable/notes/cuda.html">torch.cuda</a> 或者 <a href="https://pytorch.org/docs/stable/notes/mps.html">torch.backends.mps</a>是否可用，否则我们使用 CPU。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">device = (</span><br><span class="line">    <span class="string">&quot;cuda&quot;</span></span><br><span class="line">    <span class="keyword">if</span> torch.cuda.is_available()</span><br><span class="line">    <span class="keyword">else</span> <span class="string">&quot;mps&quot;</span></span><br><span class="line">    <span class="keyword">if</span> torch.backends.mps.is_available()</span><br><span class="line">    <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Using <span class="subst">&#123;device&#125;</span> device&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Define-the-Class"><a href="#Define-the-Class" class="headerlink" title="Define the Class"></a>Define the Class</h2><p>依照我们之前的说法，神经网络本身就是一个module，所以我们需要继承nn.Module。</p><p>我们通过子类化 <code>nn.Module</code> 来定义神经网络，并初始化 <code>__init__</code> 中的神经网络层。每个 <code>nn.Module</code> 子类都实现 <code>forward</code> 方法中对输入数据的操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NeuralNetwork</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.flatten = nn.Flatten()</span><br><span class="line">        self.linear_relu_stack = nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">28</span>*<span class="number">28</span>, <span class="number">512</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">512</span>, <span class="number">512</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">512</span>, <span class="number">10</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.flatten(x)</span><br><span class="line">        logits = self.linear_relu_stack(x)</span><br><span class="line">        <span class="keyword">return</span> logits</span><br></pre></td></tr></table></figure><p>我们创建 <code>NeuralNetwork</code> 的实例，并将其移动到 <code>device</code> ，并打印其结构。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = NeuralNetwork().to(device)</span><br><span class="line"><span class="built_in">print</span>(model)</span><br></pre></td></tr></table></figure><p>为了使用该模型，我们将输入数据传递给它。这将执行模型的 <code>forward</code> 以及一些<a href="https://github.com/pytorch/pytorch/blob/270111b7b611d174967ed204776985cefca9c144/torch/nn/modules/module.py#L866">background operations</a>。不要直接调用 <code>model.forward()</code> ！</p><p>在输入上调用模型会返回一个二维张量，其中 dim&#x3D;0 对应于每个类的 10 个原始预测值的每个输出，dim&#x3D;1 对应于每个输出的各个值。我们通过将预测概率传递给 <code>nn.Softmax</code> 模块的实例来获取预测概率。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">X = torch.rand(<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, device=device)</span><br><span class="line">logits = model(X)</span><br><span class="line">pred_probab = nn.Softmax(dim=<span class="number">1</span>)(logits)</span><br><span class="line">y_pred = pred_probab.argmax(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Predicted class: <span class="subst">&#123;y_pred&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Model-Layers"><a href="#Model-Layers" class="headerlink" title="Model Layers"></a>Model Layers</h2><p>让我们分解 FashionMNIST 模型中的各个层。为了说明这一点，我们将采用 3 张大小为 28x28 的图像的小批量样本，看看当我们将其传递到网络时会发生什么。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">input_image = torch.rand(<span class="number">3</span>,<span class="number">28</span>,<span class="number">28</span>)</span><br><span class="line"><span class="built_in">print</span>(input_image.size())</span><br></pre></td></tr></table></figure><h3 id="nn-Flatten"><a href="#nn-Flatten" class="headerlink" title="nn.Flatten"></a>nn.Flatten</h3><p>我们初始化 <a href="https://pytorch.org/docs/stable/generated/torch.nn.Flatten.html">nn.Flatten</a>  层，将每个 2D 28x28 图像转换为 784 个像素值的连续数组（维持小批量维度（在 dim&#x3D;0 时））。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flatten = nn.Flatten()</span><br><span class="line">flat_image = flatten(input_image)</span><br><span class="line"><span class="built_in">print</span>(flat_image.size())</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.Size([3, 784])</span><br></pre></td></tr></table></figure><h3 id="nn-Linear"><a href="#nn-Linear" class="headerlink" title="nn.Linear"></a>nn.Linear</h3><p> <a href="https://pytorch.org/docs/stable/generated/torch.nn.Linear.html">linear layer</a>是一个使用其存储的权重和偏差对输入变量线性变换的模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">layer1 = nn.Linear(in_features=<span class="number">28</span>*<span class="number">28</span>, out_features=<span class="number">20</span>)</span><br><span class="line">hidden1 = layer1(flat_image)</span><br><span class="line"><span class="built_in">print</span>(hidden1.size())</span><br></pre></td></tr></table></figure><h3 id="nn-ReLU"><a href="#nn-ReLU" class="headerlink" title="nn.ReLU"></a>nn.ReLU</h3><p>非线性激活在模型的输入和输出之间创建复杂的映射。它们在线性变换后应用以引入非线性，帮助神经网络学习各种现象。</p><p>在此模型中，我们在线性层之间使用 nn.ReLU，但还有其他激活可以在模型中引入非线性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Before ReLU: <span class="subst">&#123;hidden1&#125;</span>\n\n&quot;</span>)</span><br><span class="line">hidden1 = nn.ReLU()(hidden1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;After ReLU: <span class="subst">&#123;hidden1&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Before ReLU: tensor([[ 0.4158, -0.0130, -0.1144,  0.3960,  0.1476, -0.0690, -0.0269,  0.2690,</span><br><span class="line">          0.1353,  0.1975,  0.4484,  0.0753,  0.4455,  0.5321, -0.1692,  0.4504,</span><br><span class="line">          0.2476, -0.1787, -0.2754,  0.2462],</span><br><span class="line">        [ 0.2326,  0.0623, -0.2984,  0.2878,  0.2767, -0.5434, -0.5051,  0.4339,</span><br><span class="line">          0.0302,  0.1634,  0.5649, -0.0055,  0.2025,  0.4473, -0.2333,  0.6611,</span><br><span class="line">          0.1883, -0.1250,  0.0820,  0.2778],</span><br><span class="line">        [ 0.3325,  0.2654,  0.1091,  0.0651,  0.3425, -0.3880, -0.0152,  0.2298,</span><br><span class="line">          0.3872,  0.0342,  0.8503,  0.0937,  0.1796,  0.5007, -0.1897,  0.4030,</span><br><span class="line">          0.1189, -0.3237,  0.2048,  0.4343]], grad_fn=&lt;AddmmBackward0&gt;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">After ReLU: tensor([[0.4158, 0.0000, 0.0000, 0.3960, 0.1476, 0.0000, 0.0000, 0.2690, 0.1353,</span><br><span class="line">         0.1975, 0.4484, 0.0753, 0.4455, 0.5321, 0.0000, 0.4504, 0.2476, 0.0000,</span><br><span class="line">         0.0000, 0.2462],</span><br><span class="line">        [0.2326, 0.0623, 0.0000, 0.2878, 0.2767, 0.0000, 0.0000, 0.4339, 0.0302,</span><br><span class="line">         0.1634, 0.5649, 0.0000, 0.2025, 0.4473, 0.0000, 0.6611, 0.1883, 0.0000,</span><br><span class="line">         0.0820, 0.2778],</span><br><span class="line">        [0.3325, 0.2654, 0.1091, 0.0651, 0.3425, 0.0000, 0.0000, 0.2298, 0.3872,</span><br><span class="line">         0.0342, 0.8503, 0.0937, 0.1796, 0.5007, 0.0000, 0.4030, 0.1189, 0.0000,</span><br><span class="line">         0.2048, 0.4343]], grad_fn=&lt;ReluBackward0&gt;)</span><br></pre></td></tr></table></figure><h3 id="nn-Sequential"><a href="#nn-Sequential" class="headerlink" title="nn.Sequential"></a>nn.Sequential</h3><p><a href="https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html">nn.Sequential</a>  是模块的有序容器。数据按照定义的相同顺序传递通过所有模块。您可以使用顺序容器来组合一个快速网络，例如 <code>seq_modules</code> .</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">seq_modules = nn.Sequential(</span><br><span class="line">    flatten,</span><br><span class="line">    layer1,</span><br><span class="line">    nn.ReLU(),</span><br><span class="line">    nn.Linear(<span class="number">20</span>, <span class="number">10</span>)</span><br><span class="line">)</span><br><span class="line">input_image = torch.rand(<span class="number">3</span>,<span class="number">28</span>,<span class="number">28</span>)</span><br><span class="line">logits = seq_modules(input_image)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="nn-Softmax"><a href="#nn-Softmax" class="headerlink" title="nn.Softmax"></a>nn.Softmax</h3><p>神经网络的最后一个线性层返回 logits - [-infty, infty] 中的原始值 - 被传递到 nn.Softmax 模块。 Logits 缩放为值 [0, 1]，表示模型对每个类别的预测概率。 <code>dim</code> 参数指示维度，沿该维度值的总和必须为 1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">softmax = nn.Softmax(dim=<span class="number">1</span>)</span><br><span class="line">pred_probab = softmax(logits)</span><br></pre></td></tr></table></figure><h2 id="Model-Parameters"><a href="#Model-Parameters" class="headerlink" title="Model Parameters"></a>Model Parameters</h2><p>神经网络内的许多层都是参数化的，即具有在训练期间优化的相关权重和偏差。子类化 <code>nn.Module</code> 自动跟踪模型对象内定义的所有字段，并使所有参数可使用模型的 <code>parameters()</code> 或 <code>named_parameters()</code> 方法访问。</p><p>在此示例中，我们迭代每个参数，并打印其大小及其值的预览。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Model structure: <span class="subst">&#123;model&#125;</span>\n\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name, param <span class="keyword">in</span> model.named_parameters():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Layer: <span class="subst">&#123;name&#125;</span> | Size: <span class="subst">&#123;param.size()&#125;</span> | Values : <span class="subst">&#123;param[:<span class="number">2</span>]&#125;</span> \n&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> neural network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03_pytorch_Transforms</title>
      <link href="/2023/11/10/03-pytorch-Transforms/"/>
      <url>/2023/11/10/03-pytorch-Transforms/</url>
      
        <content type="html"><![CDATA[<h1 id="TRANSFORMS"><a href="#TRANSFORMS" class="headerlink" title="TRANSFORMS"></a>TRANSFORMS</h1><p><strong>Transforms是什么？</strong></p><p>数据并不总是以训练机器学习算法所需的最终处理形式出现。我们使用转换来对数据执行一些操作并使其适合训练。</p><p><strong>应该如何转化？</strong></p><p>所有 TorchVision 数据集都有两个参数 - 用于修改功能的 <code>transform</code> 和用于修改标签的 <code>target_transform</code> - 接受包含转换逻辑的可调用对象。 <a href="https://pytorch.org/vision/stable/transforms.html">torchvision.transforms</a>  模块提供了几种开箱即用的常用转换。</p><p>例如:</p><p>FashionMNIST特征采用PIL图像格式，标签为整数。对于训练，我们需要将特征作为归一化张量，将标签作为单热编码张量。为了进行这些转换，我们使用 <code>ToTensor</code> 和 <code>Lambda</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> torchvision.transforms <span class="keyword">import</span> ToTensor, Lambda</span><br><span class="line"></span><br><span class="line">ds = datasets.FashionMNIST(</span><br><span class="line">    root=<span class="string">&quot;data&quot;</span>,</span><br><span class="line">    train=<span class="literal">True</span>,</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">    transform=ToTensor(),</span><br><span class="line">    target_transform=Lambda(<span class="keyword">lambda</span> y: torch.zeros(<span class="number">10</span>, dtype=torch.<span class="built_in">float</span>).scatter_(<span class="number">0</span>, torch.tensor(y), value=<span class="number">1</span>))</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz</span><br><span class="line">Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz to data/FashionMNIST/raw/train-images-idx3-ubyte.gz</span><br><span class="line"></span><br><span class="line">  0%|          | 0/26421880 [00:00&lt;?, ?it/s]</span><br><span class="line">  0%|          | 65536/26421880 [00:00&lt;01:12, 361134.05it/s]</span><br><span class="line">  1%|          | 229376/26421880 [00:00&lt;00:38, 678664.07it/s]</span><br><span class="line">  3%|2         | 753664/26421880 [00:00&lt;00:12, 2053982.29it/s]</span><br><span class="line">  5%|5         | 1409024/26421880 [00:00&lt;00:08, 2875069.78it/s]</span><br><span class="line"> 12%|#2        | 3244032/26421880 [00:00&lt;00:03, 6812170.26it/s]</span><br><span class="line"> 21%|##1       | 5570560/26421880 [00:00&lt;00:02, 9643810.01it/s]</span><br><span class="line"> 30%|##9       | 7897088/26421880 [00:01&lt;00:01, 12668660.86it/s]</span><br><span class="line"> 39%|###9      | 10354688/26421880 [00:01&lt;00:01, 13567884.70it/s]</span><br><span class="line"> 47%|####7     | 12517376/26421880 [00:01&lt;00:00, 15107192.72it/s]</span><br><span class="line"> 57%|#####7    | 15138816/26421880 [00:01&lt;00:00, 15464642.87it/s]</span><br><span class="line"> 65%|######4   | 17170432/26421880 [00:01&lt;00:00, 16205991.36it/s]</span><br><span class="line"> 75%|#######5  | 19922944/26421880 [00:01&lt;00:00, 16485428.61it/s]</span><br><span class="line"> 83%|########2 | 21823488/26421880 [00:01&lt;00:00, 16620077.17it/s]</span><br><span class="line"> 94%|#########3| 24739840/26421880 [00:02&lt;00:00, 17125086.87it/s]</span><br><span class="line">100%|##########| 26421880/26421880 [00:02&lt;00:00, 12608239.78it/s]</span><br><span class="line">Extracting data/FashionMNIST/raw/train-images-idx3-ubyte.gz to data/FashionMNIST/raw</span><br><span class="line"></span><br><span class="line">Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz</span><br><span class="line">Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz to data/FashionMNIST/raw/train-labels-idx1-ubyte.gz</span><br><span class="line"></span><br><span class="line">  0%|          | 0/29515 [00:00&lt;?, ?it/s]</span><br><span class="line">100%|##########| 29515/29515 [00:00&lt;00:00, 327666.12it/s]</span><br><span class="line">Extracting data/FashionMNIST/raw/train-labels-idx1-ubyte.gz to data/FashionMNIST/raw</span><br><span class="line"></span><br><span class="line">Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz</span><br><span class="line">Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz to data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz</span><br><span class="line"></span><br><span class="line">  0%|          | 0/4422102 [00:00&lt;?, ?it/s]</span><br><span class="line">  1%|1         | 65536/4422102 [00:00&lt;00:12, 360810.29it/s]</span><br><span class="line">  5%|5         | 229376/4422102 [00:00&lt;00:06, 676632.69it/s]</span><br><span class="line"> 19%|#8        | 819200/4422102 [00:00&lt;00:01, 2275103.44it/s]</span><br><span class="line"> 33%|###2      | 1441792/4422102 [00:00&lt;00:01, 2899610.49it/s]</span><br><span class="line"> 74%|#######4  | 3276800/4422102 [00:00&lt;00:00, 6877973.06it/s]</span><br><span class="line">100%|##########| 4422102/4422102 [00:00&lt;00:00, 5392190.04it/s]</span><br><span class="line">Extracting data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz to data/FashionMNIST/raw</span><br><span class="line"></span><br><span class="line">Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz</span><br><span class="line">Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz to data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz</span><br><span class="line"></span><br><span class="line">  0%|          | 0/5148 [00:00&lt;?, ?it/s]</span><br><span class="line">100%|##########| 5148/5148 [00:00&lt;00:00, 36597079.65it/s]</span><br><span class="line">Extracting data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz to data/FashionMNIST/raw</span><br></pre></td></tr></table></figure><h2 id="ToTensor"><a href="#ToTensor" class="headerlink" title="ToTensor()"></a>ToTensor()</h2><p>ToTensor 将 PIL 图像或 NumPy <code>ndarray</code> 转换为 <code>FloatTensor</code> 。并在 [0., 1.] 范围内缩放图像的像素强度值</p><h2 id="Lambda-Transforms"><a href="#Lambda-Transforms" class="headerlink" title="Lambda Transforms"></a>Lambda Transforms</h2><p>Lambda 转换应用任何用户定义的 lambda 函数。在这里，我们定义一个函数将整数转换为 one-hot 编码张量。它首先创建一个大小为 10 的零张量（数据集中的标签数量）并调用 scatter_ ，它在标签 <code>y</code> 给出的索引上分配 <code>value=1</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">target_transform = Lambda(<span class="keyword">lambda</span> y: torch.zeros(</span><br><span class="line">    <span class="number">10</span>, dtype=torch.<span class="built_in">float</span>).scatter_(dim=<span class="number">0</span>, index=torch.tensor(y), value=<span class="number">1</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> transforms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02_pytorch_datasets_DataLoaders</title>
      <link href="/2023/11/10/02-pytorch-datasets-DataLoaders/"/>
      <url>/2023/11/10/02-pytorch-datasets-DataLoaders/</url>
      
        <content type="html"><![CDATA[<h1 id="DATASETS-DATALOADERS"><a href="#DATASETS-DATALOADERS" class="headerlink" title="DATASETS &amp; DATALOADERS"></a>DATASETS &amp; DATALOADERS</h1><p><strong>DATASETS是什么？</strong></p><p>torch.utils.data.Dataset，</p><p><code>Dataset</code>允许您使用预加载的数据集以及您自己的数据</p><p><code>Dataset</code> 存储样本及其相应的标签</p><p><strong>DATALOADERS是什么？</strong></p><p>torch.utils.data.DataLoader</p><p><code>DataLoader</code> 在 <code>Dataset</code> 周围包装一个迭代，以便轻松访问样本。</p><p><strong>解决什么问题？</strong></p><p>用于处理数据样本的代码可能会变得混乱且难以维护</p><p>理想情况下，我们希望数据集代码与模型训练代码分离，以获得更好的可读性和模块化性</p><p><strong>PyTorch 提供了什么数据集，有什么用</strong></p><p>提供了许多预加载的数据集（例如 FashionMNIST）。</p><p>它们对 <code>torch.utils.data.Dataset</code> 进行子类化并实现特定于特定数据的函数</p><blockquote><p>给我们提示，如果要构建自己的数据集同样应该继承Dataset</p></blockquote><p>可以做什么：对您的模型进行原型设计和基准测试。</p><p>在哪里找到：<a href="https://pytorch.org/vision/stable/datasets.html">Image Datasets</a>, <a href="https://pytorch.org/text/stable/datasets.html">Text Datasets</a>, and <a href="https://pytorch.org/audio/stable/datasets.html">Audio Datasets</a></p><h2 id="Loading-a-Dataset-加载数据集"><a href="#Loading-a-Dataset-加载数据集" class="headerlink" title="Loading a Dataset 加载数据集"></a>Loading a Dataset 加载数据集</h2><p><strong>Fashion-MNIST是什么数据集？</strong></p><p> <a href="https://research.zalando.com/project/fashion_mnist/fashion_mnist/">Fashion-MNIST</a> 是 Zalando 文章图像的数据集，由 60,000 个训练示例和 10,000 个测试示例组成。每个示例包含一个 28×28 灰度图像和来自 10 个类别之一的关联标签。</p><p> <strong>如何加载<a href="https://pytorch.org/vision/stable/datasets.html#fashion-mnist">FashionMNIST Dataset</a> 数据集？</strong></p><ul><li><code>root</code> 是存储训练&#x2F;测试数据的路径，</li><li><code>train</code> 指定训练或测试数据集，</li><li>如果 <code>root</code> 上没有数据，则 <code>download=True</code> 会从 Internet 下载数据。</li><li>transform 和 target_transform 指定特征和标签转换</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> torchvision.transforms <span class="keyword">import</span> ToTensor</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">training_data = datasets.FashionMNIST(</span><br><span class="line">    root=<span class="string">&quot;data&quot;</span>,</span><br><span class="line">    train=<span class="literal">True</span>,</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">    transform=ToTensor()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">test_data = datasets.FashionMNIST(</span><br><span class="line">    root=<span class="string">&quot;data&quot;</span>,</span><br><span class="line">    train=<span class="literal">False</span>,</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">    transform=ToTensor()</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz</span><br><span class="line">Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz to data/FashionMNIST/raw/train-images-idx3-ubyte.gz</span><br><span class="line"></span><br><span class="line">  0%|          | 0/26421880 [00:00&lt;?, ?it/s]</span><br><span class="line">  0%|          | 65536/26421880 [00:00&lt;01:12, 365336.26it/s]</span><br><span class="line">  1%|          | 229376/26421880 [00:00&lt;00:38, 685596.52it/s]</span><br><span class="line">  3%|3         | 851968/26421880 [00:00&lt;00:10, 2415122.44it/s]</span><br><span class="line">  7%|7         | 1900544/26421880 [00:00&lt;00:06, 4075765.30it/s]</span><br><span class="line"> 18%|#8        | 4882432/26421880 [00:00&lt;00:01, 10855436.54it/s]</span><br><span class="line"> 25%|##4       | 6586368/26421880 [00:00&lt;00:01, 11527877.37it/s]</span><br><span class="line"> 31%|###1      | 8257536/26421880 [00:00&lt;00:01, 12111293.67it/s]</span><br><span class="line"> 43%|####2     | 11337728/26421880 [00:01&lt;00:00, 16825176.39it/s]</span><br><span class="line"> 50%|####9     | 13205504/26421880 [00:01&lt;00:00, 14645303.60it/s]</span><br><span class="line"> 62%|######1   | 16252928/26421880 [00:01&lt;00:00, 18391128.94it/s]</span><br><span class="line"> 69%|######9   | 18284544/26421880 [00:01&lt;00:00, 16056294.06it/s]</span><br><span class="line"> 80%|########  | 21266432/26421880 [00:01&lt;00:00, 19223679.44it/s]</span><br><span class="line"> 89%|########8 | 23396352/26421880 [00:01&lt;00:00, 16815978.59it/s]</span><br><span class="line"> 99%|#########9| 26279936/26421880 [00:01&lt;00:00, 19554902.51it/s]</span><br><span class="line">100%|##########| 26421880/26421880 [00:01&lt;00:00, 13595820.68it/s]</span><br><span class="line">Extracting data/FashionMNIST/raw/train-images-idx3-ubyte.gz to data/FashionMNIST/raw</span><br><span class="line"></span><br><span class="line">Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz</span><br><span class="line">Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz to data/FashionMNIST/raw/train-labels-idx1-ubyte.gz</span><br><span class="line"></span><br><span class="line">  0%|          | 0/29515 [00:00&lt;?, ?it/s]</span><br><span class="line">100%|##########| 29515/29515 [00:00&lt;00:00, 325785.44it/s]</span><br><span class="line">Extracting data/FashionMNIST/raw/train-labels-idx1-ubyte.gz to data/FashionMNIST/raw</span><br><span class="line"></span><br><span class="line">Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz</span><br><span class="line">Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz to data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz</span><br><span class="line"></span><br><span class="line">  0%|          | 0/4422102 [00:00&lt;?, ?it/s]</span><br><span class="line">  1%|1         | 65536/4422102 [00:00&lt;00:12, 362766.41it/s]</span><br><span class="line">  5%|5         | 229376/4422102 [00:00&lt;00:06, 682006.25it/s]</span><br><span class="line"> 20%|##        | 884736/4422102 [00:00&lt;00:01, 2511806.30it/s]</span><br><span class="line"> 44%|####3     | 1933312/4422102 [00:00&lt;00:00, 4114396.78it/s]</span><br><span class="line">100%|##########| 4422102/4422102 [00:00&lt;00:00, 6090778.97it/s]</span><br><span class="line">Extracting data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz to data/FashionMNIST/raw</span><br><span class="line"></span><br><span class="line">Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz</span><br><span class="line">Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz to data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz</span><br><span class="line"></span><br><span class="line">  0%|          | 0/5148 [00:00&lt;?, ?it/s]</span><br><span class="line">100%|##########| 5148/5148 [00:00&lt;00:00, 65830112.78it/s]</span><br><span class="line">Extracting data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz to data/FashionMNIST/raw</span><br></pre></td></tr></table></figure><h2 id="Iterating-and-Visualizing-the-Dataset"><a href="#Iterating-and-Visualizing-the-Dataset" class="headerlink" title="Iterating and Visualizing the Dataset"></a>Iterating and Visualizing the Dataset</h2><p>如何可视化查看数据集？</p><p>虽然我们可以切片的方式查看数据集，但是这样有些麻烦和不直观。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">training_data[index]</span><br></pre></td></tr></table></figure><p>我们使用 <code>matplotlib</code> 来可视化训练数据中的一些样本。</p><blockquote><p>给我们的一种可视化的方式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">labels_map = &#123;</span><br><span class="line">    <span class="number">0</span>: <span class="string">&quot;T-Shirt&quot;</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="string">&quot;Trouser&quot;</span>,</span><br><span class="line">    <span class="number">2</span>: <span class="string">&quot;Pullover&quot;</span>,</span><br><span class="line">    <span class="number">3</span>: <span class="string">&quot;Dress&quot;</span>,</span><br><span class="line">    <span class="number">4</span>: <span class="string">&quot;Coat&quot;</span>,</span><br><span class="line">    <span class="number">5</span>: <span class="string">&quot;Sandal&quot;</span>,</span><br><span class="line">    <span class="number">6</span>: <span class="string">&quot;Shirt&quot;</span>,</span><br><span class="line">    <span class="number">7</span>: <span class="string">&quot;Sneaker&quot;</span>,</span><br><span class="line">    <span class="number">8</span>: <span class="string">&quot;Bag&quot;</span>,</span><br><span class="line">    <span class="number">9</span>: <span class="string">&quot;Ankle Boot&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">figure = plt.figure(figsize=(<span class="number">8</span>, <span class="number">8</span>))</span><br><span class="line">cols, rows = <span class="number">3</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, cols * rows + <span class="number">1</span>):</span><br><span class="line">    sample_idx = torch.randint(<span class="built_in">len</span>(training_data), size=(<span class="number">1</span>,)).item()</span><br><span class="line">    img, label = training_data[sample_idx]</span><br><span class="line">    figure.add_subplot(rows, cols, i)</span><br><span class="line">    plt.title(labels_map[label])</span><br><span class="line">    plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line">    plt.imshow(img.squeeze(), cmap=<span class="string">&quot;gray&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/11/10/4yYK3lGWcBizCPD.png" alt="Ankle Boot, Shirt, Bag, Ankle Boot, Trouser, Sandal, Coat, Sandal, Pullover"></p><h2 id="Creating-a-Custom-Dataset-for-your-files"><a href="#Creating-a-Custom-Dataset-for-your-files" class="headerlink" title="Creating a Custom Dataset for your files"></a>Creating a Custom Dataset for your files</h2><p><strong>怎么自定义自己的数据集?</strong></p><p>自定义 Dataset 类必须实现三个函数,__init__、__len__ 和__getitem__.</p><p>可以参考FashionMNIST的实现，下面是例子：</p><p>图像存储在目录 <code>img_dir</code> 中，它们的标签单独存储在 CSV 文件 <code>annotations_file</code> 中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> torchvision.io <span class="keyword">import</span> read_image</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomImageDataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, annotations_file, img_dir, transform=<span class="literal">None</span>, target_transform=<span class="literal">None</span></span>):</span><br><span class="line">        self.img_labels = pd.read_csv(annotations_file)</span><br><span class="line">        self.img_dir = img_dir</span><br><span class="line">        self.transform = transform</span><br><span class="line">        self.target_transform = target_transform</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.img_labels)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, idx</span>):</span><br><span class="line">        img_path = os.path.join(self.img_dir, self.img_labels.iloc[idx, <span class="number">0</span>])</span><br><span class="line">        image = read_image(img_path)</span><br><span class="line">        label = self.img_labels.iloc[idx, <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> self.transform:</span><br><span class="line">            image = self.transform(image)</span><br><span class="line">        <span class="keyword">if</span> self.target_transform:</span><br><span class="line">            label = self.target_transform(label)</span><br><span class="line">        <span class="keyword">return</span> image, label</span><br></pre></td></tr></table></figure><h3 id="init"><a href="#init" class="headerlink" title="__init__"></a>__init__</h3><p><strong>在__init__方法中我需要做什么？</strong></p><p><strong>init</strong> 函数在实例化 Dataset 对象时运行一次。我们初始化包含图像、注释文件和两种转换的目录（下一节将更详细地介绍）。</p><p>labels.csv 文件如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tshirt1.jpg, 0</span><br><span class="line">tshirt2.jpg, 0</span><br><span class="line">......</span><br><span class="line">ankleboot999.jpg, 9</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, annotations_file, img_dir, transform=<span class="literal">None</span>, target_transform=<span class="literal">None</span></span>):</span><br><span class="line">    self.img_labels = pd.read_csv(annotations_file)</span><br><span class="line">    self.img_dir = img_dir</span><br><span class="line">    self.transform = transform</span><br><span class="line">    self.target_transform = target_transform</span><br></pre></td></tr></table></figure><h3 id="len"><a href="#len" class="headerlink" title="_len_"></a>_<em>len</em>_</h3><p><strong>__len__方法中我需要完成什么工作?</strong></p><p>_<em>len</em>_ 函数返回数据集中的样本数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def __len__(self):</span><br><span class="line">    return len(self.img_labels)</span><br></pre></td></tr></table></figure><h3 id="getitem"><a href="#getitem" class="headerlink" title="_getitem_"></a>_<em>getitem</em>_</h3><p>_<em>getitem</em>_ 函数加载并返回给定索引 <code>idx</code> 处的数据集的样本。</p><ol><li>基于索引，它识别图像在磁盘上的位置，</li><li>使用 <code>read_image</code> 将其转换为张量，</li><li>从 <code>self.img_labels</code> 中的 csv 数据中检索相应的标签，</li><li>对其调用转换函数（如果适用），</li><li>并返回元组中的张量图像和相应的标签。</li></ol><h2 id="Preparing-your-data-for-training-with-DataLoaders"><a href="#Preparing-your-data-for-training-with-DataLoaders" class="headerlink" title="Preparing your data for training with DataLoaders"></a>Preparing your data for training with DataLoaders</h2><p><strong>为什么使用DataLoaders ？DataSet不够用吗？</strong></p><p><code>Dataset</code> 检索数据集的特征并一次标记一个样本。在训练模型时，我们通常希望以“小批量”的方式传递样本，在每个时期重新整理数据以减少模型过度拟合，并使用 Python 的 <code>multiprocessing</code> 来加速数据检索。</p><p><strong>基于上述我们的需求，希望有一种可以通用的API帮我我们获得数据。</strong></p><p><code>DataLoader</code> 是一个可迭代对象，它通过一个简单的 API 为我们抽象了这种复杂性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line">train_dataloader = DataLoader(training_data, batch_size=<span class="number">64</span>, shuffle=<span class="literal">True</span>)</span><br><span class="line">test_dataloader = DataLoader(test_data, batch_size=<span class="number">64</span>, shuffle=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="Iterate-through-the-DataLoader"><a href="#Iterate-through-the-DataLoader" class="headerlink" title="Iterate through the DataLoader"></a>Iterate through the DataLoader</h2><p><strong>我们应该如何通过DataLoader获得数据和标签？</strong></p><p>我们已将该数据集加载到 <code>DataLoader</code> 中，并且可以根据需要迭代数据集。下面的每次迭代都会返回一批 <code>train_features</code> 和 <code>train_labels</code> （分别包含 <code>batch_size=64</code> 特征和标签）。因为我们指定了 <code>shuffle=True</code> ，所以在迭代所有批次后，数据会被打乱（为了更细粒度地控制数据加载顺序，请查看 Samplers）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Display image and label.</span></span><br><span class="line">train_features, train_labels = <span class="built_in">next</span>(<span class="built_in">iter</span>(train_dataloader))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Feature batch shape: <span class="subst">&#123;train_features.size()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Labels batch shape: <span class="subst">&#123;train_labels.size()&#125;</span>&quot;</span>)</span><br><span class="line">img = train_features[<span class="number">0</span>].squeeze()</span><br><span class="line">label = train_labels[<span class="number">0</span>]Feature batch shape: torch.Size([<span class="number">64</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>])</span><br><span class="line">Labels batch shape: torch.Size([<span class="number">64</span>])</span><br><span class="line">Label: <span class="number">5</span></span><br><span class="line">plt.imshow(img, cmap=<span class="string">&quot;gray&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Label: <span class="subst">&#123;label&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Feature batch shape: torch.Size([64, 1, 28, 28])</span><br><span class="line">Labels batch shape: torch.Size([64])</span><br><span class="line">Label: 5</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01_pytorch_tensors</title>
      <link href="/2023/11/10/01_pytorch_tensors/"/>
      <url>/2023/11/10/01_pytorch_tensors/</url>
      
        <content type="html"><![CDATA[<h1 id="Tensors"><a href="#Tensors" class="headerlink" title="Tensors"></a>Tensors</h1><h2 id="Tensors是什么"><a href="#Tensors是什么" class="headerlink" title="Tensors是什么"></a>Tensors是什么</h2><p>张量是一种特殊的数据结构，与数组和矩阵非常相似。</p><h2 id="Tensors什么作用"><a href="#Tensors什么作用" class="headerlink" title="Tensors什么作用"></a>Tensors什么作用</h2><p>张量对模型的输入和输出以及模型的参数进行编码</p><h2 id="Tensors-和-NumPy的ndarrays对比"><a href="#Tensors-和-NumPy的ndarrays对比" class="headerlink" title="Tensors 和 NumPy的ndarrays对比"></a>Tensors 和 <a href="https://numpy.org/">NumPy</a>的ndarrays对比</h2><p>不同：</p><ol><li>张量可以在 GPU 或其他硬件加速器上运行</li><li>张量还针对自动微分进行了优化</li></ol><h2 id="Tensors-和Numpy的ndarrays联系"><a href="#Tensors-和Numpy的ndarrays联系" class="headerlink" title="Tensors 和Numpy的ndarrays联系"></a>Tensors 和Numpy的ndarrays联系</h2><p>张量和 NumPy 数组通常可以共享相同的底层内存，从而无需复制数据。</p><h2 id="Initializing-a-Tensor"><a href="#Initializing-a-Tensor" class="headerlink" title="Initializing a Tensor"></a>Initializing a Tensor</h2><p>1.通过数据创建，类型可以自动推导</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = [[<span class="number">1</span>, <span class="number">2</span>],[<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">x_data = torch.tensor(data)</span><br></pre></td></tr></table></figure><p>2.通过numpy创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np_array = np.array(data)</span><br><span class="line">x_np = torch.from_numpy(np_array)</span><br></pre></td></tr></table></figure><p>3.从另一个Tensor创建,新Tensor保留参数Tensor的属性（<strong>形状、数据类型</strong>），除非显式覆盖。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x_ones = torch.ones_like(x_data) <span class="comment"># retains the properties of x_data</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Ones Tensor: \n <span class="subst">&#123;x_ones&#125;</span> \n&quot;</span>)</span><br><span class="line"><span class="comment"># 显示覆盖类型</span></span><br><span class="line">x_rand = torch.rand_like(x_data, dtype=torch.<span class="built_in">float</span>) <span class="comment"># overrides the datatype of x_data</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Random Tensor: \n <span class="subst">&#123;x_rand&#125;</span> \n&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Ones Tensor:</span><br><span class="line"> tensor([[1, 1],</span><br><span class="line">        [1, 1]])</span><br><span class="line"></span><br><span class="line">Random Tensor:</span><br><span class="line"> tensor([[0.8823, 0.9150],</span><br><span class="line">        [0.3829, 0.9593]])</span><br></pre></td></tr></table></figure><h2 id="With-random-or-constant-values"><a href="#With-random-or-constant-values" class="headerlink" title="With random or constant values:"></a><strong>With random or constant values:</strong></h2><p><code>shape</code> 是张量维度的元组。在下面的函数中，它确定输出张量的维数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">shape = (<span class="number">2</span>,<span class="number">3</span>,)</span><br><span class="line">rand_tensor = torch.rand(shape)</span><br><span class="line">ones_tensor = torch.ones(shape)</span><br><span class="line">zeros_tensor = torch.zeros(shape)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Random Tensor: \n <span class="subst">&#123;rand_tensor&#125;</span> \n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Ones Tensor: \n <span class="subst">&#123;ones_tensor&#125;</span> \n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Zeros Tensor: \n <span class="subst">&#123;zeros_tensor&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Random Tensor:</span><br><span class="line"> tensor([[0.3904, 0.6009, 0.2566],</span><br><span class="line">        [0.7936, 0.9408, 0.1332]])</span><br><span class="line"></span><br><span class="line">Ones Tensor:</span><br><span class="line"> tensor([[1., 1., 1.],</span><br><span class="line">        [1., 1., 1.]])</span><br><span class="line"></span><br><span class="line">Zeros Tensor:</span><br><span class="line"> tensor([[0., 0., 0.],</span><br><span class="line">        [0., 0., 0.]])</span><br></pre></td></tr></table></figure><h2 id="Attributes-of-a-Tensor"><a href="#Attributes-of-a-Tensor" class="headerlink" title="Attributes of a Tensor"></a>Attributes of a Tensor</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tensor = torch.rand(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Shape of tensor: <span class="subst">&#123;tensor.shape&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Datatype of tensor: <span class="subst">&#123;tensor.dtype&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Device tensor is stored on: <span class="subst">&#123;tensor.device&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Shape of tensor: torch.Size([3, 4])</span><br><span class="line">Datatype of tensor: torch.float32</span><br><span class="line">Device tensor is stored on: cpu</span><br></pre></td></tr></table></figure><h2 id="Operations-on-Tensors"><a href="#Operations-on-Tensors" class="headerlink" title="Operations on Tensors"></a>Operations on Tensors</h2><h3 id="有哪些运算"><a href="#有哪些运算" class="headerlink" title="有哪些运算"></a>有哪些运算</h3><p> 100 多种<a href="https://pytorch.org/docs/stable/torch.html">张量运算</a>，包括算术、线性代数、矩阵操作（转置、索引、切片）、采样等。</p><h3 id="和一般的计算库相比有哪些优点"><a href="#和一般的计算库相比有哪些优点" class="headerlink" title="和一般的计算库相比有哪些优点"></a>和一般的计算库相比有哪些优点</h3><p>这些操作中的每一个都可以在 GPU 上运行</p><blockquote><p>如果使用Colab如何使用GPU：</p><p>请通过转至运行时 &gt; 更改运行时类型 &gt; GPU 来分配 GPU</p></blockquote><h3 id="为什么我创建后在cpu上？"><a href="#为什么我创建后在cpu上？" class="headerlink" title="为什么我创建后在cpu上？"></a>为什么我创建后在cpu上？</h3><p>默认情况下，张量是在 CPU 上创建的。我们需要使用 <code>.to</code> 方法显式地将张量移动到 GPU</p><blockquote><p>请记住，跨设备复制大张量在时间和内存方面可能会很昂贵！</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># We move our tensor to the GPU if available</span></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    tensor = tensor.to(<span class="string">&quot;cuda&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="对tensor的切片索引修改"><a href="#对tensor的切片索引修改" class="headerlink" title="对tensor的切片索引修改"></a>对tensor的切片索引修改</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tensor = torch.ones(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;First row: <span class="subst">&#123;tensor[<span class="number">0</span>]&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;First column: <span class="subst">&#123;tensor[:, <span class="number">0</span>]&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Last column: <span class="subst">&#123;tensor[..., -<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line">tensor[:,<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(tensor)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">First row: tensor([1., 1., 1., 1.])</span><br><span class="line">First column: tensor([1., 1., 1., 1.])</span><br><span class="line">Last column: tensor([1., 1., 1., 1.])</span><br><span class="line">tensor([[1., 0., 1., 1.],</span><br><span class="line">        [1., 0., 1., 1.],</span><br><span class="line">        [1., 0., 1., 1.],</span><br><span class="line">        [1., 0., 1., 1.]])</span><br></pre></td></tr></table></figure><h3 id="tensor的拼接，维度扩大"><a href="#tensor的拼接，维度扩大" class="headerlink" title="tensor的拼接，维度扩大"></a>tensor的拼接，维度扩大</h3><p>连接张量 您可以使用 <code>torch.cat</code> 沿给定维度连接一系列张量。</p><p>另请参见 torch.stack，这是另一个与 <code>torch.cat</code> 略有不同的张量连接运算符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t1 = torch.cat([tensor, tensor, tensor], dim=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(t1)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tensor([[1., 0., 1., 1., 1., 0., 1., 1., 1., 0., 1., 1.],</span><br><span class="line">        [1., 0., 1., 1., 1., 0., 1., 1., 1., 0., 1., 1.],</span><br><span class="line">        [1., 0., 1., 1., 1., 0., 1., 1., 1., 0., 1., 1.],</span><br><span class="line">        [1., 0., 1., 1., 1., 0., 1., 1., 1., 0., 1., 1.]])</span><br></pre></td></tr></table></figure><h3 id="Arithmetic-operations"><a href="#Arithmetic-operations" class="headerlink" title="Arithmetic operations"></a><strong>Arithmetic operations</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This computes the matrix multiplication between two tensors. y1, y2, y3 will have the same value</span></span><br><span class="line"><span class="comment"># ``tensor.T`` returns the transpose of a tensor</span></span><br><span class="line">y1 = tensor @ tensor.T <span class="comment"># tensor 矩阵乘 tesnor的转置</span></span><br><span class="line">y2 = tensor.matmul(tensor.T) <span class="comment"># 同上</span></span><br><span class="line"></span><br><span class="line">y3 = torch.rand_like(y1)</span><br><span class="line">torch.matmul(tensor, tensor.T, out=y3) <span class="comment"># 矩阵乘，结果输出给y3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># This computes the element-wise product. z1, z2, z3 will have the same value</span></span><br><span class="line">z1 = tensor * tensor <span class="comment"># 计算元素的乘积，下同</span></span><br><span class="line">z2 = tensor.mul(tensor)</span><br><span class="line"></span><br><span class="line">z3 = torch.rand_like(tensor)</span><br><span class="line">torch.mul(tensor, tensor, out=z3)</span><br></pre></td></tr></table></figure><h3 id="如何将单一数值的tensor和python的数值类型进行转化"><a href="#如何将单一数值的tensor和python的数值类型进行转化" class="headerlink" title="如何将单一数值的tensor和python的数值类型进行转化"></a>如何将单一数值的tensor和python的数值类型进行转化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">agg = tensor.<span class="built_in">sum</span>()</span><br><span class="line">agg_item = agg.item()</span><br><span class="line"><span class="built_in">print</span>(agg_item, <span class="built_in">type</span>(agg_item))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12.0 &lt;class &#x27;float&#x27;&gt;</span><br></pre></td></tr></table></figure><h3 id="tensors的In-place-operations"><a href="#tensors的In-place-operations" class="headerlink" title="tensors的In-place operations"></a>tensors的<strong>In-place operations</strong></h3><p>就地运算 将结果存储到操作数中的操作称为就地运算。它们由 <code>_</code> 后缀表示。例如： <code>x.copy_(y)</code> 、 <code>x.t_()</code> 会更改 <code>x</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;tensor&#125;</span> \n&quot;</span>)</span><br><span class="line">tensor.add_(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(tensor)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tensor([[1., 0., 1., 1.],</span><br><span class="line">        [1., 0., 1., 1.],</span><br><span class="line">        [1., 0., 1., 1.],</span><br><span class="line">        [1., 0., 1., 1.]])</span><br><span class="line"></span><br><span class="line">tensor([[6., 5., 6., 6.],</span><br><span class="line">        [6., 5., 6., 6.],</span><br><span class="line">        [6., 5., 6., 6.],</span><br><span class="line">        [6., 5., 6., 6.]])</span><br></pre></td></tr></table></figure><blockquote><p>确保你的数据没用了，再采取就地运算(In-place operations)</p></blockquote><h2 id="和numpy的联系"><a href="#和numpy的联系" class="headerlink" title="和numpy的联系"></a>和numpy的联系</h2><ol><li>CPU上时，NumPy 数组上的张量可以共享其底层内存位置。</li></ol><h3 id="Tensor-to-NumPy-array"><a href="#Tensor-to-NumPy-array" class="headerlink" title="Tensor to NumPy array"></a>Tensor to NumPy array</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t = torch.ones(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;t: <span class="subst">&#123;t&#125;</span>&quot;</span>)</span><br><span class="line">n = t.numpy()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n: <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t: tensor([1., 1., 1., 1., 1.])</span><br><span class="line">n: [1. 1. 1. 1. 1.]</span><br></pre></td></tr></table></figure><p>当t数据变化时候，对应的n也发生变化，简单理解就是n是对t的引用（指针）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t.add_(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;t: <span class="subst">&#123;t&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n: <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t: tensor([2., 2., 2., 2., 2.])</span><br><span class="line">n: [2. 2. 2. 2. 2.]</span><br></pre></td></tr></table></figure><h3 id="NumPy-array-to-Tensor"><a href="#NumPy-array-to-Tensor" class="headerlink" title="NumPy array to Tensor"></a>NumPy array to Tensor</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n = np.ones(5)</span><br><span class="line">t = torch.from_numpy(n)</span><br></pre></td></tr></table></figure><p>NumPy 数组中的变化反映在张量中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.add(n, 1, out=n)</span><br><span class="line">print(f&quot;t: &#123;t&#125;&quot;)</span><br><span class="line">print(f&quot;n: &#123;n&#125;&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t: tensor([2., 2., 2., 2., 2.], dtype=torch.float64)</span><br><span class="line">n: [2. 2. 2. 2. 2.]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> pytorch </tag>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SDCDNet:一种用于遥感图像的超弱标签半对偶变化检测网络框架</title>
      <link href="/2023/11/09/%E8%AE%BA%E6%96%87-01-SDCDNet-%E4%B8%80%E7%A7%8D%E7%94%A8%E4%BA%8E%E9%81%A5%E6%84%9F%E5%9B%BE%E5%83%8F%E7%9A%84%E8%B6%85%E5%BC%B1%E6%A0%87%E7%AD%BE%E5%8D%8A%E5%AF%B9%E5%81%B6%E5%8F%98%E5%8C%96%E6%A3%80%E6%B5%8B%E7%BD%91%E7%BB%9C%E6%A1%86%E6%9E%B6/"/>
      <url>/2023/11/09/%E8%AE%BA%E6%96%87-01-SDCDNet-%E4%B8%80%E7%A7%8D%E7%94%A8%E4%BA%8E%E9%81%A5%E6%84%9F%E5%9B%BE%E5%83%8F%E7%9A%84%E8%B6%85%E5%BC%B1%E6%A0%87%E7%AD%BE%E5%8D%8A%E5%AF%B9%E5%81%B6%E5%8F%98%E5%8C%96%E6%A3%80%E6%B5%8B%E7%BD%91%E7%BB%9C%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="SDCDNet是指什么"><a href="#SDCDNet是指什么" class="headerlink" title="SDCDNet是指什么"></a>SDCDNet是指什么</h1><p>SDCDNet 全称 Semi-Dual Change Detection Network 。其中Semi-Dual是半对偶， Change Detection是变化检测，Network是神经网络模型。</p><h2 id="变化检测-Change-Detection"><a href="#变化检测-Change-Detection" class="headerlink" title="变化检测 Change Detection"></a>变化检测 Change Detection</h2><p>变化检测是从不同时期的遥感数据中定量分析和确定地表变化的特征与过程；</p><p>遥感变化检测是一个确定和评价各种地表现象随时间发生变化的过程；</p><p>遥感变化检测是遥感瞬时视场中地表特征随时间发生的变化引起两个时期影像像元光谱响应的变化；</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>更新地理数据的关键技术</li><li>评估灾害、预测灾害发展趋势的关键技术</li><li>土地覆盖&#x2F;利用监测的关键技术</li><li>新一代智能型对地观测卫星的关键技术</li></ul><h3 id="传统经典方法"><a href="#传统经典方法" class="headerlink" title="传统经典方法"></a>传统经典方法</h3><p>先获得两幅同一地点不同时间图像的差异图像，再对差异图像进行处理，将像素点分成变化和无变化两类。</p><p>差异图的获得有很多方法：</p><ul><li>直接相减法</li><li>log法</li><li><a href="https://baike.baidu.com/item/%E5%8F%98%E5%8C%96%E5%90%91%E9%87%8F%E5%88%86%E6%9E%90%E6%B3%95/8636415?fromModule=lemma_inlink">变化向量分析法</a>（CVA）</li></ul><p>差异图的处理方法：</p><ul><li>贝叶斯理论的无监督法（像素之间独立）</li><li>马尔科夫随机场理论的无监督法（像素之间独立）</li><li>自动获取阈值的方法（考虑像素之间的上下文信息）</li></ul><h1 id="一般的变化检测的问题"><a href="#一般的变化检测的问题" class="headerlink" title="一般的变化检测的问题"></a>一般的变化检测的问题</h1><p>大多数的变化检测方法需要大量的标记数据来训练参数。</p><h1 id="本文要解决的问题"><a href="#本文要解决的问题" class="headerlink" title="本文要解决的问题"></a>本文要解决的问题</h1><p>打破这变化检测方法需要大量的标记数据这一限制。</p><p>本文提出了一种用了遥感变化检测的新型半监督学习semi-supervised learning(SSL).称之为半对偶变化检测网络（SDCDNet）。</p><h1 id="SDCDNet网络的大概模型是什么样子"><a href="#SDCDNet网络的大概模型是什么样子" class="headerlink" title="SDCDNet网络的大概模型是什么样子"></a>SDCDNet网络的大概模型是什么样子</h1><p>SDCDNet网络由双共享网络和双分支网络组成，来自基本模型DSIFN 。此外，自适应模块(AWM)增强了弱分支的特征。掩模约束模块（MCM）增加网络提取前景特征的能力。</p><h2 id="双共享网路的作用"><a href="#双共享网路的作用" class="headerlink" title="双共享网路的作用"></a>双共享网路的作用</h2><p>双共享网络旨在发挥数据的潜力</p><h2 id="双分支网络的作用"><a href="#双分支网络的作用" class="headerlink" title="双分支网络的作用"></a>双分支网络的作用</h2><p>区分标记数据的种类并消除不同类型数据之间的干扰。</p><h2 id="AWM作用和MCM作用"><a href="#AWM作用和MCM作用" class="headerlink" title="AWM作用和MCM作用"></a>AWM作用和MCM作用</h2><p>增强了弱分支的特征</p><p>增加网络提取前景特征的能力</p><h2 id="如何解决标签这个复杂问题"><a href="#如何解决标签这个复杂问题" class="headerlink" title="如何解决标签这个复杂问题"></a>如何解决标签这个复杂问题</h2><p>提出了一种基于补丁（patch-based）的弱标签构建方法来构建超弱（super method）标签。</p><h1 id="效果怎么样"><a href="#效果怎么样" class="headerlink" title="效果怎么样"></a>效果怎么样</h1><p>实验表明，所提出的 SDCDNet 在两个遥感图像变化检测数据集上取得了优异的结果。</p><h1 id="测试用的数据集"><a href="#测试用的数据集" class="headerlink" title="测试用的数据集"></a>测试用的数据集</h1><p>遥感图像变化检测数据集，下文由详细介绍</p><h1 id="本文的特征词是"><a href="#本文的特征词是" class="headerlink" title="本文的特征词是"></a>本文的特征词是</h1><ul><li>变化检测（Change detection）</li><li>双分支网络（dual branch network）</li><li>遥感图像（remote sensing image）</li><li>半监督学习（semi-supervised learning (SSL))</li></ul><h1 id="变化检测"><a href="#变化检测" class="headerlink" title="变化检测"></a>变化检测</h1><p>遥感领域的一个重要研究方向</p><h2 id="变化检测应用"><a href="#变化检测应用" class="headerlink" title="变化检测应用"></a>变化检测应用</h2><ul><li>建筑损坏检测</li><li>环境监测</li><li>灾害监测</li><li>城市变化等</li><li>土地覆盖监测</li></ul><h2 id="遥感图形容易获得的原因"><a href="#遥感图形容易获得的原因" class="headerlink" title="遥感图形容易获得的原因"></a>遥感图形容易获得的原因</h2><p>遥感观测技术的进步</p><p>不同平台提供的遥感数据</p><h2 id="变化检测的任务"><a href="#变化检测的任务" class="headerlink" title="变化检测的任务"></a>变化检测的任务</h2><p>分析多时间图像</p><p>为每个像素分配一个二进制标签，标签“0”表示该像素对应的表面在语义上没有变化，标签“1”表示该像素对应的表面在T0和T1之间语义上发生了变化</p><h2 id="超高分辨率（VHR）图像的变化检测的困难点"><a href="#超高分辨率（VHR）图像的变化检测的困难点" class="headerlink" title="超高分辨率（VHR）图像的变化检测的困难点"></a>超高分辨率（VHR）图像的变化检测的困难点</h2><p>季节性变化</p><p>成像条件</p><h1 id="多时相VHR遥感图像变化检测技术分类"><a href="#多时相VHR遥感图像变化检测技术分类" class="headerlink" title="多时相VHR遥感图像变化检测技术分类"></a>多时相VHR遥感图像变化检测技术分类</h1><ul><li>传统方法</li><li>深度学习的方法</li></ul><h2 id="传统方法"><a href="#传统方法" class="headerlink" title="传统方法"></a>传统方法</h2><p>图像代数和变化</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>实际应用中相对有限，容易受到传感器本身、大气和季节变化以及太阳高度的影响。导致降低变化检测的性能</li><li>依赖于手工设计的特征描述符，描述复杂和高级语义变化信息的能力有限，导致在杂乱覆盖地面具有较差的表现</li></ol><h2 id="深度学习技术"><a href="#深度学习技术" class="headerlink" title="深度学习技术"></a>深度学习技术</h2><h3 id="深度学习的特点"><a href="#深度学习的特点" class="headerlink" title="深度学习的特点"></a>深度学习的特点</h3><p>强大的数据模式建模能力</p><h3 id="深度学习能做到什么"><a href="#深度学习能做到什么" class="headerlink" title="深度学习能做到什么"></a>深度学习能做到什么</h3><p>输入图像对之间抽象、复杂、非线性的特征表示，并实现较高的变化检测性能。</p><h3 id="深度学习可以分为"><a href="#深度学习可以分为" class="headerlink" title="深度学习可以分为"></a>深度学习可以分为</h3><p>可以细分为监督方法、半监督方法和无监督方法</p><h3 id="目前深度学习在变化检测上的状况"><a href="#目前深度学习在变化检测上的状况" class="headerlink" title="目前深度学习在变化检测上的状况"></a>目前深度学习在变化检测上的状况</h3><p>现有的深度学习网络模型通常具有更多的参数，<strong>变化检测方法的有效</strong>性在很大程度上取决于<strong>标记训练数据的质量和数量</strong>，特别是对于<strong>完全监督</strong>的方法。当我们没有<strong>大量的训练数据时，变化检测模型的检测能力会大大降低</strong></p><h3 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h3><p>遥感图像的准确注释是一项非常昂贵的任务</p><h4 id="原因是："><a href="#原因是：" class="headerlink" title="原因是："></a>原因是：</h4><ul><li>标注需要具有一定专业知识的专家</li><li>不易注释的部分可能会产生额外成本</li></ul><h4 id="导致结果："><a href="#导致结果：" class="headerlink" title="导致结果："></a>导致结果：</h4><ul><li>大量精细标记的数据是不可持续的</li></ul><h4 id="在研究上的结果："><a href="#在研究上的结果：" class="headerlink" title="在研究上的结果："></a>在研究上的结果：</h4><p>许多学者将研究重点放在如何利用少量标注进行学习的问题上</p><p>例如：</p><ul><li><p>半监督学习（SSL）</p></li><li><p>弱监督学习</p></li><li><p>自监督学习</p></li><li><p>无监督学习等</p></li></ul><h1 id="半监督学习SSL"><a href="#半监督学习SSL" class="headerlink" title="半监督学习SSL"></a>半监督学习SSL</h1><p> SSL是一种结合了监督学习和无监督学习优点的学习方法</p><h2 id="SSL是怎么做的"><a href="#SSL是怎么做的" class="headerlink" title="SSL是怎么做的"></a>SSL是怎么做的</h2><p>用大量的无标签数据和尽可能少的标签数据</p><h2 id="到达了什么效果"><a href="#到达了什么效果" class="headerlink" title="到达了什么效果"></a>到达了什么效果</h2><p>不低于完全监督方法的效果</p><h1 id="目前有没有统一的框架"><a href="#目前有没有统一的框架" class="headerlink" title="目前有没有统一的框架"></a>目前有没有统一的框架</h1><p>目前还没有统一的框架将完全监督方法扩展到半监督数据条件，</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>由于其复杂性，实施此类方法可能具有挑战性</p><h1 id="本文是如何解决缺乏大量高精度标注问题的"><a href="#本文是如何解决缺乏大量高精度标注问题的" class="headerlink" title="本文是如何解决缺乏大量高精度标注问题的"></a>本文是如何解决缺乏大量高精度标注问题的</h1><p>设计了带有自适应加权模块（AWM）和掩模约束模块（MCM）的半监督双变化检测网络（SDCDNet）框架</p><h2 id="在数据集达到的效果"><a href="#在数据集达到的效果" class="headerlink" title="在数据集达到的效果"></a>在数据集达到的效果</h2><p>训练中使用非常有限的像素级标记数据（pixel-level labeled data）和大量的补丁级标记数据（patch-level labeled data ）</p><h2 id="AWM模块作用"><a href="#AWM模块作用" class="headerlink" title="AWM模块作用"></a>AWM模块作用</h2><p>自适应地对特征提取网络的不同语义级别的特征进行加权</p><h2 id="MCM模块作用"><a href="#MCM模块作用" class="headerlink" title="MCM模块作用"></a>MCM模块作用</h2><p>MCM约束输入的弱分支的特征从而更加关注变化区域</p><h2 id="结果上达到的效果"><a href="#结果上达到的效果" class="headerlink" title="结果上达到的效果"></a>结果上达到的效果</h2><p>该框架可以通过较少的精细注释实现更高精度的变化检测，并且所提出的两个模块可以有效地将网络的注意力引导到有用的变化信息，并且<em>消融实验（？）</em>在第四节中描述。</p><h1 id="本文的贡献"><a href="#本文的贡献" class="headerlink" title="本文的贡献"></a>本文的贡献</h1><ol><li>为变化检测提出了一种新颖的 SSL 框架，完美地适应了大多数完全监督的方法，在正常标记数据非常有限的情况下获得了与完全监督的方法相似的分数</li><li>提出了一种与补丁相结合的超弱标签构建方法，其大小可以自行调整，并将超弱标签与正常标签一起输入到所提出的半监督网络中进行训练</li><li>为框架的弱标记分支获得更好的前景特征，提出了AWM和MCM来提取对变化检测任务更有用的特征</li></ol><h1 id="全监督和半监督方法在变化检测领域的应用"><a href="#全监督和半监督方法在变化检测领域的应用" class="headerlink" title="全监督和半监督方法在变化检测领域的应用"></a>全监督和半监督方法在变化检测领域的应用</h1><h2 id="完全监督方法"><a href="#完全监督方法" class="headerlink" title="完全监督方法"></a>完全监督方法</h2><p>方法：一些方法使用完全卷积网络（FCN）从双时态输入生成高分辨率变化图。</p><p>用于：遥感图像理解</p><p>变种1：一部分方法将两个图像连接起来并将其输入变化检测网络，称为早期融合</p><p>变种2：使用两分支网络来提取深层特征，然后融合并生成变化图</p><h3 id="基于U-Net框架进行变化检测的FC-Siam-Diff方法"><a href="#基于U-Net框架进行变化检测的FC-Siam-Diff方法" class="headerlink" title="基于U-Net框架进行变化检测的FC-Siam-Diff方法"></a>基于U-Net框架进行变化检测的FC-Siam-Diff方法</h3><p>首先将图像对输入到siamese网络中，并利用从UNet中提取的多级特征的特征差异来生成最终的变化的地图，实现遥感影像对的变化检测。</p><h3 id="其他的论文提出的方法"><a href="#其他的论文提出的方法" class="headerlink" title="其他的论文提出的方法"></a>其他的论文提出的方法</h3><p>在[^43],提出了时空注意力神经网络来实现变化检测，时空注意力机制计算不同时间和空间的两个像素之间的注意力以生成更具区分性的特征</p><p>在[44]，使用差异增强密集注意力网络来整合低层和高层特征</p><p>在[45]，多任务学习方法来训练变化检测网络，以解决检测结果区域不完整或区域边界不规则的问题。所提出 dual-task constrained deep siamese convolutional network (DTCDSCN) 包含一个检测网络和两个语义分割网络。</p><p>在[46]，提出了具有密集连接 和通道注意的siamese 网络 用于变化检测。</p><p>在[47]，提出了遥感图像变化检测的深度监督双分支图像融合FCN。该方法提取双时态图像深层特征，并利用深度监督差分识别网络指导训练。</p><p>在 [48]，提出将孪生架构与循环神经网络（RNN）相结合，以实现多源数据的更高性能。为了获得更具判别性的特征表示。</p><p>在[49]，提出了具有双重注意机制的连体FCN</p><p>在[50]，为了提供更多有用的信息，提出了一种分层动态融合策略。</p><p>在[51]，利用自注意机制对双时态时空中任意两个像素之间的语义关系进行建模</p><p>在[52]，提出了基于Transformers的变化检测方法，该方法使用卷积神经网络（CNN）提取深层特征并将其输入双时图像转换器（BIT）。作者实现了 BIT 来学习和关联高级语义概念的全局信息，从而增强原始的双时态特征。然后生成双时态特征图减法的元素绝对值。最后，利用基于卷积的预测头来预测变化图。</p><p>[^43]: H. Chen and Z. Shi, “A spatial-temporal attention-based method and a new dataset for remote sensing image change detection,” Remote Sens. vol. 12, no. 10, p. 1662, May 2023</p><h2 id="半监督方法"><a href="#半监督方法" class="headerlink" title="半监督方法"></a>半监督方法</h2><h3 id="一些半监督方法是基于-GAN-的。"><a href="#一些半监督方法是基于-GAN-的。" class="headerlink" title="一些半监督方法是基于 GAN 的。"></a>一些半监督方法是基于 GAN 的。</h3><p>在[53]，提出了一种基于FCN和GAN的半监督变化检测网络。作者使用带有attention的UNet++作为GAN的生成器，并使用两个判别器分别奖励输出特征分布一致性和抑制未标记数据变化图中的不确定性区域。通过不断地从标记和未标记数据中学习，生成器可以生成预期的变化图。</p><p>在[54]中，提出了一种半监督语义分割网络。它由分割器和鉴别器组成，分割器和鉴别器以对抗方式进行训练，并提出自训练损失和特征匹配损失。特征匹配损失稳定了低数据训练，自训练损失平衡了分割器和鉴别器。</p><p>文献[55]提出了一种自监督条件生成对抗网络（GAN），利用生成器和判别器的相互监督信息进行训练，并利用GAN中的判别器实现双时相遥感图像的变化检测作为训练完成后变化检测的分类器。 </p><p>[56]提出了一个端到端的变化检测框架，其中包含三个基本模块：分段器、鉴别器和生成器。通过将其中的两个或两个与不同的优化策略相结合，可以在不同的监督条件下实现变化检测任务。</p><h3 id="非GAN半监督"><a href="#非GAN半监督" class="headerlink" title="非GAN半监督"></a>非GAN半监督</h3><p>由于GAN的训练难度和稳定性，基于非GAN或更稳定的半监督方法仍然是学者们的研究热点。</p><p>在[25]中，使用图卷积网络（GCN）来实现半监督变化检测。</p><p>在[57]中提出了一种用于变化检测的半监督方法。它包含两个阶段：完全监督训练和无监督训练。完全监督训练阶段是正常的图像分割训练过程。在无监督训练阶段，输入图像对没有地面真实变化掩模。然后首先对深度特征差异图应用随机扰动。因此限制输出变化图在不同扰动下保持一致。</p><p> [58] 使用 GCN 在带有少量注释数据的半监督框架中学习判别特征。</p><p>在[39]中，提出了一种标签细化方法，从低分辨率数据标签生成高分辨率变化图。</p><p> [59]在低标签数据情况下训练具有图注意力的双分支嵌套UNet，然后通过约束扭曲图像的检测结果和未标签数据的伪标签的一致性来重新训练网络。</p><p>在[60]中，双任务网络集成了城市建筑分割和变化检测，然后实现了半监督变化检测。</p><h1 id="标注存在的问题"><a href="#标注存在的问题" class="headerlink" title="标注存在的问题"></a>标注存在的问题</h1><p>由于遥感图像的复杂性，遥感图像的标注通常需要专业知识，这导致完全监督方法所需的像素级标注数据的获取非常昂贵。</p><h1 id="其他非完全监督取得的效果"><a href="#其他非完全监督取得的效果" class="headerlink" title="其他非完全监督取得的效果"></a>其他非完全监督取得的效果</h1><p>相比之下，许多非完全监督的变化检测方法仅需要一部分像素级标记数据进行训练。他们在变化检测任务中取得了类似的结果。</p><h1 id="其他的非完全监督存在的问题"><a href="#其他的非完全监督存在的问题" class="headerlink" title="其他的非完全监督存在的问题"></a>其他的非完全监督存在的问题</h1><p>现有的半监督变化检测方法通常无法充分利用所有数据的潜力[61]、[62]，导致当像素级标记数据的比例较低时变化检测往往不令人满意。</p><h1 id="现研究存在的问题"><a href="#现研究存在的问题" class="headerlink" title="现研究存在的问题"></a>现研究存在的问题</h1><p>1）全监督方法的像素级标记监督信息不容易获得。</p><p>2）现有半监督方法的框架普遍复杂，缺乏简单有效的策略。</p><p>3）监督信息挖掘不够深入，珍贵的精细标注数据中的信息没有得到很好的利用。</p><h1 id="本文如何解决这些问题"><a href="#本文如何解决这些问题" class="headerlink" title="本文如何解决这些问题"></a>本文如何解决这些问题</h1><p>该框架使用原始的完全监督方法，将像素级和补丁级注释结合起来，用于变化检测任务。通过战略性地利用监督信息，我们在训练过程中逐步增强标记数据和未标记数据之间变化特征分布的一致性，从而使网络能够学习用于变化检测的关键特征，并使用最小像素级标记数据实现高性能</p><h1 id="第三部分的结构"><a href="#第三部分的结构" class="headerlink" title="第三部分的结构"></a>第三部分的结构</h1><p>我们在第 III-A 节中介绍了我们提出的框架的一般结构，该框架利用带有像素级标签的强标记训练数据和基于补丁注释的弱标记训练数据。</p><p>我们还在第 III-B 节中描述了超弱标签的构造。</p><p>为了改善弱分支的前景特征，我们提出了 AWM 和 MCM 技术，分别在第 III-C 和 III-D 节中进行了解释。</p><p>在第III-E节中，我们介绍了该框架中使用的损失函数，</p><p>在第III-F节中，我们详细介绍了训练过程。</p><h1 id="为什么具有适用性"><a href="#为什么具有适用性" class="headerlink" title="为什么具有适用性"></a>为什么具有适用性</h1><p>1.可以简单地向原始完全添加弱分支来扩展以合并额外的弱标记训练数据的弱监督网络，不需要改变任何的结构。从而可以轻松的将半监督变化检测框架与大多数现有的编码器-解码器[63]范例集成，以实现完全监督的变化检测。</p><h1 id="模型图像"><a href="#模型图像" class="headerlink" title="模型图像"></a>模型图像</h1><p><img src="https://s2.loli.net/2023/11/09/o5vrDBUWfAjMi7J.png" alt="image-20231109163730326"></p><h1 id="模型总体结构"><a href="#模型总体结构" class="headerlink" title="模型总体结构"></a>模型总体结构</h1><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p>它包含五个部分：训练数据的构造、双权值共享的特征提取模块、AWM、MCM和双分支模块。</p><h2 id="A部分框架的一般结构"><a href="#A部分框架的一般结构" class="headerlink" title="A部分框架的一般结构"></a>A部分框架的一般结构</h2><p>首先，像素级强标记图像<br>$$<br>x^n<br>$$<br>和弱标记图像<br>$$<br>x^w<br>$$<br>同时发送到权重共享主干网络生成特征C，进一步将C分割为<br>$$<br>C^n<br>$$<br>和<br>$$<br>C^w<br>$$<br>。主干网络主要由全监督变化检测模型确定，例如，DSIFN[47]中的主干网络是VGG16[64]，SNUNet[46]中的主干网络是UNet++[65]的编码器等。</p><p>对于Normal Head，<br>$$<br>C^n<br>$$<br>直接输送。对于Weak Head，由于对应的弱标注缺少很多细节信息，使用AWM对特征<br>$$<br>C^w<br>$$<br>的一致性约束进行加权，在不确定性较低的区域进行更强的多尺度一致性约束，然后使用MCM使Weak Head获得更好的前景特征，从而将生成的<br>$$<br>f_x<br>$$<br>输入到Weak Head。最后，Normal Head和Weak Head生成最终的预测结果<br>$$<br>\hat{y}^n 和 \hat{y}^w<br>$$</p><p>$$<br>然后分别用像素级标注y^n和弱标注y^w计算损失L_{D_{n}}和L_{D_{w}}。<br>$$</p><p>$$<br>L_{D_{n}}+L_{D_{w}}用于反向传播训练。<br>$$</p><p>在Weak Head中，首先使用AWM自适应地提取多尺度特征。然后，为了减少信息损失并避免训练步骤中的梯度消失问题[66]，受ResNet [61]中残差连接的启发，我们在模块中添加了恒等分支。</p><p> MCM被插入到分支中以增加网络提取前景特征的能力。</p><p>最后，批量归一化[67]和丢失[68]分别用于提高网络的收敛速度和泛化能力。</p><p>如图1所示，假设<br>$$<br>F_{in}&#x3D;[F_1,F_2,…  , F_c] ∈ R^{C<em>H</em>W}<br>$$<br>其中C表示特征图中的通道数，H和W分别表示高度和宽度，<br>$$<br>F’<br>$$<br>和<br>$$<br>F_{out}<br>$$<br>可以通过以下等式获得：<br>$$<br>F’ &#x3D; AWM(F_{in}) + MCM(AWM(F_{in}))<br>$$</p><p>$$<br>F_{out} &#x3D; Conv(D(B(Conv(F’))))<br>$$</p><p>其中 D 是 dropout [68]，B 是批量归一化 [67]。</p><h2 id="B部分超弱标签的构造"><a href="#B部分超弱标签的构造" class="headerlink" title="B部分超弱标签的构造"></a>B部分超弱标签的构造</h2><p>了基于补丁的超弱标签生成方法SWL，不再局限于标记群体。</p><p><img src="https://s2.loli.net/2023/11/09/YWjvl9u3znAH4Xa.png" alt="image-20231109172900271"></p><p>首先，我们按预定义的补丁大小对输入标签进行分块。其次，对于第 k 个 patch<br>$$<br>p^k<br>$$<br>大小为 psize × psize，最终生成的弱 patch 标签定义如下：<br>$$<br>p_{weak}^{k}&#x3D;1-I(\sum_{i&#x3D;1}^{psize}\sum_{j&#x3D;1}^{psize}p_{ij}^{k}&#x3D;0)<br>$$<br>其中 I(·) 是指示函数，如果·为真，则值为 1，否则为 0。表示第 k 个补丁中第 (i, j) 个像素的值。直观上，当一个 patch 包含有变化的像素标签时，整个 patch 的值为 1；当整个patch不包含变化时，该patch中的每个像素都取值为0。在图2中，左上角的patch没有变化的像素，因此其对应的弱标签将被赋予0。相反，其余三个补丁包含变化信息，因此它们相关的弱标签将被赋值为1。最后，经过弱标签构建过程，我们得到了不精确标记的弱标签。</p><h2 id="C部分AWM"><a href="#C部分AWM" class="headerlink" title="C部分AWM"></a>C部分AWM</h2><p><img src="https://s2.loli.net/2023/11/10/M6c3hSRxyempslB.png" alt="image-20231109173154696"></p><p>如图3所示，通过特征提取获得的每个阶段的特征被输入到该模块中。首先，对于每个stage的特征，将剩余stage的特征进行卷积采样，使其大小与该stage的特征相同，并与之拼接，从而可以从每个stage中提取不同尺度的特征信息。然后不同时间序列中同一阶段的特征通过自适应空间特征融合（ASFF）模块[69]以获得每个最终阶段的附加增强特征。为一个骨干网络有n个阶段，每个阶段的具体增强特征计算表示如下：<br>$$<br>weight_1 &#x3D; CS(Concat(F_1,DS(F_2),DS(F_3),DS(F_4)))<br>$$</p><p>$$<br>weight_2 &#x3D; CS(Concat(US(F_1),F_2,DS(F_3),DS(F_4)))<br>$$</p><p>$$<br>weight_3 &#x3D; CS(Concat(US(F_1),US(F_2),F_3,DS(F_4)))<br>$$</p><p>$$<br>weight_4 &#x3D; CS(Concat(US(F_1),US(F_2),US(F_3),F_4))<br>$$</p><p>$$<br>ASFF_i &#x3D; weight_i * F_i, i &#x3D; 1,2,3,4<br>$$</p><p>其中DS和US代表下采样和上采样操作，CS表示先进行Conv，然后进行SoftMax。详细信息可以参见[69]。利用变化检测中的特征差异或特征拼接来完成后续处理。</p><h2 id="D部分MCM"><a href="#D部分MCM" class="headerlink" title="D部分MCM"></a>D部分MCM</h2><p><img src="https://s2.loli.net/2023/11/10/LXU7A5Nf84TuSd3.png" alt="image-20231110091842349"></p><p>在该模块中，</p><p>方法：将提取的变化特征与弱标签提供的变化前景掩模图相乘，使未变化区域的特征失效。</p><p>目的：使网络更关注变换区域前景的特征提取。</p><p>过程表示：<br>$$<br>ｆ＊ｐ＝ｆ＇<br>$$<br>其中f和f‘分别表示特征图和强化特征图。 P代表弱标签，白色部分为变化区域，用1表示，黑色部分用0表示。</p><h2 id="E-部分损失函数"><a href="#E-部分损失函数" class="headerlink" title="E 部分损失函数"></a>E 部分损失函数</h2><p>为了训练这个框架，我们主要使用二元交叉熵（BCE）损失[70]。<br>$$<br>L_{D_{n}}<br>$$<br>用于表示监督损失，<br>$$<br>L_{D_{w}}<br>$$<br>用d于表示弱监督损失，具体针对数据集k中的样本:<br>$$<br>L_{D_{n}} &#x3D; -\frac{1}{N^k}\sum_{m&#x3D;1}^{N^k}\sum_{i,j}(y_{i,j}^{n^{(m)}}\log_{}{\hat{y}<em>{i,j}^{n^{(m)}}}) + (1-y^{n^{m}}</em>{i,j})\log_{}{(1-\hat{y}_{i,j}^{n^{(m)}})}<br>$$</p><p>$$<br>L_{D_{w}} &#x3D; -\frac{1}{N^k}\sum_{m&#x3D;1}^{N^k}\sum_{i,j}(y_{i,j}^{w^{(m)}}\log_{}{\hat{y}<em>{i,j}^{w^{(m)}}}) + (1-y^{w^{m}}</em>{i,j})\log_{}{(1-\hat{y}<em>{i,j}^{w^{(m)}})}<br>$$<br>其中<br>$$<br>\hat{y}</em>{i,j}^{n^{(m)}}<br>$$<br>和<br>$$<br>\hat{y}_{i,j}^{w^{(m)}}<br>$$<br> 表示 SDCDNet 对样本 m 获得的在位置 (i, j) 处预测的置信度图</p><p>数据集k，<br>$$<br>y_{i,j}^{n^{(m)}}<br>$$</p><p>和<br>$$<br>y_{i,j}^{w^{(m)}}<br>$$<br>表示输入图像每个像素的标签。总损耗<br>$$<br>L_{total}<br>$$<br>可表示为<br>$$<br>L_{total} &#x3D; L_{D_w} + L_{D_n}<br>$$</p><h2 id="F-部分训练和推理细节"><a href="#F-部分训练和推理细节" class="headerlink" title="F 部分训练和推理细节"></a>F 部分训练和推理细节</h2><p><img src="https://s2.loli.net/2023/11/10/SvfVReMoFrGThg4.png" alt="image-20231110093733367"></p><p>在本节中，我们提供训练细节和拟议框架的推理细节。</p><p><strong>数据集怎么构造：</strong></p><p>在训练之前，对强标记的像素级样本进行重新采样，以平衡数据集中强标记和弱标记样本的数量。例如，如果强标记样本代表数据集的 1&#x2F;128，弱标记样本代表数据集的 127&#x2F;128，则强标记样本重复 127 次以达到平衡。</p><p><strong>训练过程</strong></p><p>如图5所示，在训练过程中，强标记数据（T1_normal 和T2_normal）和弱标记数据（T1_weak和T2_weak）同时输入到特征提取网络中，以简化训练过程。提取的特征被输入到正常分支和弱分支中以产生单独的网络输出（S_normal 和 S_weak），并且通过计算强标签和弱标签的单独损失函数来更新网络。在推理过程中，优化后的特征提取网络仅使用普通分支。</p><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><p><strong>本节内容：</strong></p><p>在本节中，我们介绍了用于评估所提出的变化检测算法的实验设置。</p><p><strong>评价使用的数据集：</strong></p><p>我们首先描述用于评估的两个数据集，<strong>即 WHU [71] 和 SYSU-CD [72]，</strong></p><h2 id="数据集介绍"><a href="#数据集介绍" class="headerlink" title="数据集介绍"></a>数据集介绍</h2><p>1）WHU[71]：该数据集由2012年4月拍摄的航拍图像组成，覆盖面积20.5平方公里，包含12 796座建筑物（2016年版本为16 077座建筑物）。一些示例图像如图 1 所示。 6(a)。子数据集是通过手动选择 30 个地面控制点对原始数据集进行地理校正而创建的，精度为 1.6 像素。子数据集和相应的图像以及建筑矢量和栅格地图现已公开。高分辨率航空图像的尺寸为32 507 × 15 354。[71]中没有提供具体的数据分解方案但我们使用滑动窗口将图像划分为不重叠的 512 × 512 像素块，并将它们分为训练集、验证集和测试集，其中分别包含 1189、319 和 319 个图像块对。</p><p>2）SYSU-CD[72]：该数据集包含20000对2007年至2014年在香港拍摄的0.5米分辨率航空图像。样本图像如图6（b）所示。在[72]中，800个大小为1024×1024的原始图像对按照6:2:2的比例分为训练集、验证集和测试集。然后，从每个图像对中随机选择25个大小为256×256的图像子集对，并通过随机翻转和旋转进行增强，以获得总共20000对航空图像块。该数据集包括各种类型的重大变化，例如新城市建设、郊区扩张、预建地基、植被变化、道路拓宽和海洋建设。</p><h2 id="比较方法介绍"><a href="#比较方法介绍" class="headerlink" title="比较方法介绍"></a>比较方法介绍</h2><p>1）FC-Siam-Diff [42]：一种特征融合方法，使用孪生全CNN提取多级特征，并利用特征差异来融合双时态信息。</p><p>2）DTDSCN[45]：一种多尺度特征融合方法，结合了FCN中的通道注意机制和空间注意机制，以获得更具判别性的特征。</p><p>3）SNUNet [46]：用于变化检测的密集连接暹罗NestedUnet。它通过从编码器到解码器的紧凑信息传输来减轻神经网络深层的局部信息丢失。</p><p>4）DSIFN[47]：一种深度监督的图像融合网络，首先使用两分支FCN进行特征提取，然后使用深度监督的差分判别网络（DNN）进行变化检测。为了增强变化图边界和内部密度的完整性，通过注意力机制将多级语义特征与图像差分图特征混合。</p><p>5）BIT_CD[52]：一种基于Transformers的变化检测方法。它使用 CNN 提取深层特征并将其输入两个分支变压器。然后增强原始双时特征，并生成两个分支特征图之间差异的像素绝对值。最后，利用几个卷积来获得变化图。</p><p>6）s4GAN [54]：一种对抗性半监督语义分割方法。它由分割器和鉴别器组成，分割器和鉴别器以对抗方式进行训练。提出的两个损失可以稳定低数据训练并平衡分割器和鉴别器。</p><p>7）SemiCD [57]：一种用于变化检测的半监督方法。它包含完全监督的训练阶段和无监督的训练阶段。在正常的完全监督训练阶段之后，在无监督阶段，网络约束输出变化图在不同扰动下保持一致。</p><h2 id="评估指标介绍"><a href="#评估指标介绍" class="headerlink" title="评估指标介绍"></a>评估指标介绍</h2><p><strong>使用什么指标作为评价标准</strong></p><p>F1是精度和召回率的加权调和平均值，它同时考虑精度和召回率，平衡冲突，更能体现模型的变化检测能力。所以我们使用变化的平均F1分数</p><p><strong>计算方法</strong></p><p>以类别和背景为主要评价指标，公开计算如下：<br>$$<br>F1&#x3D;\frac{2<em>precision</em>recall}{precision+recall}<br>$$<br>此外，我们还使用 Precision、Recall 和 Intersection over Union（IoU）作为辅助评估指标，计算公式如下：<br>$$<br>Precision&#x3D;\frac{TP}{TP+FP}<br>$$</p><p>$$<br>Recall&#x3D;\frac{TP}{TP+FN}<br>$$</p><p>$$<br>IoU&#x3D;\frac{TP}{TP+FN+FP}<br>$$</p><p>其中，TP、FP、TN、FN分别为真阳性、假阳性、真阴性、假阴性的数量。</p><h2 id="实验设置介绍"><a href="#实验设置介绍" class="headerlink" title="实验设置介绍"></a>实验设置介绍</h2><p><strong>训练参数设置</strong>：</p><p>为了训练本文提出的 SDCDNet，我们利用了 BCE 损失函数 [70] 和随机梯度下降 (SGD) 优化器 [73]，动量设置为 0.9。我们将学习率初始化为 0.01，并采用预热策略 [61] 在前 5 个时期内逐渐将其增加到预设值。随后，我们应用余弦退火来衰减学习率并将权重衰减设置为 0.0005。这些模型使用 PyTorch [74] 深度学习框架在四个 Nvidia 2080Ti GPU 上进行了 100 个周期的训练，小批量大小为 8。</p><h2 id="消融研究"><a href="#消融研究" class="headerlink" title="消融研究"></a>消融研究</h2><p><strong>探究AWM和MCM对模型的影响：</strong></p><p>为了利用我们提出的 SDCDNet 研究 AWM 和 MCM 对遥感图像变化检测的影响，我们使用 DSIFN 作为基础模型，在 SYSU-CD 数据集上创建消融实验的基线 [72]。我们使用 128 像素的块大小和 1&#x2F;8 比例的像素级强注释。本节介绍我们的消融实验的结果，这些结果使用五个综合指标进行定量评估：精度、召回率、F1 分数、并集平均交集 (MIoU) 和参数。</p><p><strong>使用那些指标判断AWM和MCM的作用：</strong></p><p>我们的实验证实了 AWM 和 MCM 的实用性。如表一所示，AWM 的添加改善了所有四个评估指标，表明各级特征的自适应融合增强了对小变化区域的关注。另一方面，优先考虑前景信息的 MCM 相比 AWM 提高了 Precision、F1 分数和 MIoU，同时由于样本太少对变更建筑物的负面影响而略微降低了 Recall。当两个模块添加在一起时，模型的学习能力得到加强，与基线相比，Precision 提高了 1.51%，Recall 提高了 1.55%，F1 分数提高了 1.18%，MIoU 提高了 1.78%。与基线相比，AWM 和 MCM 所需的额外参数分别为 3.5M 和 2.8M。这些消融实验证明了所提出的 AWM 和 MCM 的有效性，并且计算成本的增加是可以接受的。这些模块增强了网络提取前景信息特征并进行多尺度融合的能力，从而更完整地检测变化边界并整体改善网络的缺点。</p><p><img src="https://s2.loli.net/2023/11/10/KmSqOAXsaTNG6rl.png" alt="image-20231110102402710"></p><h2 id="实验比较分析"><a href="#实验比较分析" class="headerlink" title="实验比较分析"></a>实验比较分析</h2><p><strong>使用数据集</strong>： WHU [71] 和 SYSU-CD [72] </p><p><strong>比较方法</strong>：</p><p>完全监督：</p><p> FC-Siam-Diff [42]、DTDSCN [45]、SNUNet [46]、BIT_CD [52] 和 DSIFN [47]，</p><p>半监督：</p><p>SemiCD [57] 和 s4GAN [54]（s4GAN 是在变化检测）。</p><h2 id="定性比较"><a href="#定性比较" class="headerlink" title="定性比较"></a>定性比较</h2><p>1）定性比较：</p><p>图7，表示了结果</p><p><img src="C:\Users\flan\AppData\Roaming\Typora\typora-user-images\image-20231110103959059.png" alt="image-20231110103959059"></p><p>结果：半监督 SDCDNet 框架在视觉效果方面超越了基本模型方法。</p><p>小目标：小目标检测的细节处理方面优于基本模型，显着减少了漏检和错误检测。</p><p>大目标：对于大目标，与基本模型相比，我们的方法显示出更好的检测连续性。</p><p>2）定量比较：</p><p><strong>条件</strong>：不同的SSL设置</p><p><strong>结论</strong>：</p><p>在强标记数据仅为1&#x2F;8的情况下，与基本模型相比，所提出的框架在所有SSL设置中实现了本文的最佳准确率。如表II和表III所示，当贴片尺寸变小时，改进尤其显着。</p><p>例如，在 WHU 建筑数据集上，当块大小为 128 像素时，我们提出的框架在精度、召回率、F1 和 MIoU 方面分别优于基本模型 DSIFN 9.64%、7.45%、7.44% 和 11.29%。同样，在 SYSU-CD 数据集上，与基本模型 DSIFN 相比，我们的框架在精度、召回率、F1 和 MIoU 方面分别显示出 4.3%、4.86%、6.12% 和 8.85% 的改进。当 Patch Size 减小到 16 像素时，性能进一步提高。在 WHU 建筑数据集中，我们提出框架在精度、召回率、F1 和 MIoU 方面分别实现了 11.94%、9.62%、9.59% 和 15.11% 的改进。在 SYSU-CD 数据集中，我们的方法在精度、召回率、F1 和 MIoU 方面分别显示出 5.14%、5.75%、6.85% 和 9.69% 的改进。</p><p><strong>减小块像素大小时候为什么提高准确度</strong></p><p>这是因为减少补丁大小会导致更准确的弱标签，从而帮助模型获得更好的准确性。此外。</p><p>即使仅使用 1&#x2F;4 的精细标记样本，我们的方法使用所有数据实现了不低于甚至高于基础模型的精度。</p><p><strong>和半监督SemiSANet 的比较</strong></p><p>SemiSANet 是一种简单而有效的半监督变化检测方法，采用一致性正则化和强增强 [59]。在本文的实验部分，发现在 WHU Building 数据集上，SemiSANet 取得的 F1 分数分别为 0.7808、0.7944、0.8353 和 0.8786，标记比例为 1&#x2F;40、1&#x2F;20、1&#x2F;10 和1&#x2F;5。</p><p>我们提出了一种名为 SDCDNet 的新方法，它建立在 DSIFN 的基础上。在我们的实验中，当标记比例分为 1&#x2F;64、1&#x2F;32、1&#x2F;16 和 1&#x2F;8 时，SDCDNet 在 F1 分数方面优于 SemiSANet。</p><p><strong>像素补丁大小在128像素时候</strong></p><p>为了证明我们提出的框架的优越性，我们使用 128 像素的补丁大小，将其与两个数据集（WHU 建筑数据集和 SYSU-CD 数据集）上的基本模型进行了比较。结果如表 IV 和 V 所示表明我们提出的方法在所有标记比率上都优于基本模型。此外，当标记率较低时，我们提出的框架相对于基本模型的改进更为显着，如图 8和9所示。具体来说，在 WHU 建筑数据集上，当强标记数据减少到 1&#x2F;4 时，我们的方法比基本模型 DSIFN 实现了 F1 指标上提高 4.26% 和 MIoU 指标提高 6.25%。在 SYSU-CD 数据集上，我们的方法使 F1 分数提高了 3.68%，MIoU 提高了 4.64%。值得注意的是，当仅使用 1&#x2F;128 进行强标记数据进行训练时候，我们的方法在两个数据集上的 F1 分数和 MIoU 均取得了显着改进，在 WHU 建筑数据集上分别提高了 34.28% 和 40.42%，在 SYSU-CD 数据集上分别提高了 17.91% 和 23.48%。我们的方法在两个数据集上也优于其他半监督模型 s4GAN 和 SemiCD，特别是当像素级标记样本的比例较低时。</p><p><strong>表6证明了模型和同其他模型相比下的有效性</strong></p><p>表六比较了相同条件下每个模型的参数数量和计算量。与大多数基础模型上的半监督方法相比，我们提出的方法取得了优越的性能，证明了其有效性。</p><p><strong>有效性原因分析：</strong></p><p>我们将这一显着改善归因于两个主要原因。首先，随着强标签数据量的减少，基础模型的特征分布与真实分布会有较大的误差。我们提出的框架对少量强标记数据进行重新采样，以使得正常分支获得特征分布信息，而弱分支中使用的 MCM 使模型能够从弱标记数据中提取引人注目的判别特征。其次，在训练过程中不断提高Normal和Weak分支之间特征分布的一致性，从而在极少的强标记数据和大量弱标记数据的情况下实现高精度。</p><p><strong>在其他数据集上（Google数据集）的有效性</strong></p><p>3）Google数据集中的定量分析：为了进一步验证了所提出方法在不同的数据集中的性能，我们用三种具有代表性的方法在谷歌数据集上测试，其中改变的对象在大小和形状上有所不同。如表七所示，我们提出的方法在不同的半监督设置下比其他半监督方法表现出显着的优势，证明了其高效性。</p><p><strong>当前方法的局限部分</strong></p><p>4）讨论与分析：我们提出的半监督变化检测方法可以有效地检测有限标记的变化。然而，我们的工作有两个主要限制。</p><ol><li>首先，我们的方法在很大程度上取决于所使用的完全监督的变化检测方法的性能，这可能会影响变化检测结果的质量。</li><li>其次，如第 III-F 节所述，当标记比率较低时，必须重复采样强标记样本的数量以匹配弱标记样本的数量进行对齐，这会增加训练时间并且根据不同的强标签的比例对结果产生不同的影响。</li></ol><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>标记遥感数据非常昂贵，并且在实际应用中获取这些标签既具有挑战性又乏味。为了解决这些问题，我们并没有专注于构建一个新的、特定的半监督变化检测网络模型。相反，我们提出了一种基于 SSL 的新的、通用的、方便的变更检测框架。</p><ol><li>该框架只需要少量的强标记数据和大量的弱标记数据即可实现高精度的变化检测，当训练集中强标记数据的比例较小。</li><li>如果使用现有的全监督变化检测模型作为基础模型，该框架可以在不改变基础模型结构的情况下，通过向基础模型添加Weak分支来快速实现半监督变化检测训练。</li><li>实验结果证明了所提出框架的有效性，在相同的实验数据和条件下，与现有的完全监督变化检测模型相比，观察到性能显着提高。</li></ol><p>在未来的研究中，我们将探索该框架在特征提取能力更强的基础模型上的应用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 遥感 </tag>
            
            <tag> SDCDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>地狱门代码详解</title>
      <link href="/2023/11/07/Minecraft%E6%BA%90%E7%A0%81-01-%E5%9C%B0%E7%8B%B1%E9%97%A8%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/11/07/Minecraft%E6%BA%90%E7%A0%81-01-%E5%9C%B0%E7%8B%B1%E9%97%A8%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>通过火焰方块的放置判断当前的位置是否可以生成地狱门传送方块，其中判断是否满足生成的条件使用的PortalShape类。若可以生成EventHooks的onTrySpawnPortal方法。其中EventHooks的onTrySpawnPortal方法调用了PortalSpawnEvent事件。之后得到的结果为true的情况下。通过PortalShape类的createPortalBlocks方法创建方块。</p><h1 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h1><p>地狱门就是一个多方块结构，通过这个实现我们可以设计其他的多方块结构。</p><h1 id="PortalShape类"><a href="#PortalShape类" class="headerlink" title="PortalShape类"></a>PortalShape类</h1><p>用于处理和检测游戏中的传送门</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.minecraft.world.level.portal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.BlockUtil;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.core.BlockPos;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.core.Direction;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.server.level.ServerLevel;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.tags.BlockTags;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.util.Mth;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.entity.Entity;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.entity.EntityDimensions;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.BlockGetter;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.LevelAccessor;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.Blocks;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.NetherPortalBlock;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.state.BlockBehaviour;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.state.BlockState;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.state.properties.BlockStateProperties;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.phys.AABB;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.phys.Vec3;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.phys.shapes.Shapes;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.phys.shapes.VoxelShape;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PortalShape</span> &#123; <span class="comment">// 处理游戏中的传送门的形状</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_WIDTH</span> <span class="operator">=</span> <span class="number">2</span>; <span class="comment">// 最小宽度</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_WIDTH</span> <span class="operator">=</span> <span class="number">21</span>; <span class="comment">// 最大宽度</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_HEIGHT</span> <span class="operator">=</span> <span class="number">3</span>; <span class="comment">// 最小高度</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_HEIGHT</span> <span class="operator">=</span> <span class="number">21</span>; <span class="comment">// 最大高度</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BlockBehaviour.<span class="type">StatePredicate</span> <span class="variable">FRAME</span> <span class="operator">=</span> net.neoforged.neoforge.common.extensions.IBlockStateExtension::isPortalFrame; <span class="comment">// 传送门框架判断函数</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">SAFE_TRAVEL_MAX_ENTITY_XY</span> <span class="operator">=</span> <span class="number">4.0F</span>; <span class="comment">// </span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">SAFE_TRAVEL_MAX_VERTICAL_DELTA</span> <span class="operator">=</span> <span class="number">1.0</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> LevelAccessor level;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> Direction.Axis axis;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> Direction rightDir;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> numPortalBlocks;</span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="keyword">private</span> BlockPos bottomLeft;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> height;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> width;</span><br><span class="line"><span class="comment">// 用于给定位置和方向上寻找符合条件的传送门形状</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> Optional&lt;PortalShape&gt; <span class="title function_">findEmptyPortalShape</span><span class="params">(LevelAccessor p_77709_, BlockPos p_77710_, Direction.Axis p_77711_)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> findPortalShape(p_77709_, p_77710_, p_77727_ -&gt; p_77727_.isValid() &amp;&amp; p_77727_.numPortalBlocks == <span class="number">0</span>, p_77711_);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 在给定的环境中寻找一个符合条件的传送门的形状</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> Optional&lt;PortalShape&gt; <span class="title function_">findPortalShape</span><span class="params">(LevelAccessor p_77713_, BlockPos p_77714_, Predicate&lt;PortalShape&gt; p_77715_, Direction.Axis p_77716_)</span> &#123;</span><br><span class="line">       <span class="comment">// 创建一个传送门形状，调用谓词进行过滤。</span></span><br><span class="line">      Optional&lt;PortalShape&gt; optional = Optional.of(<span class="keyword">new</span> <span class="title class_">PortalShape</span>(p_77713_, p_77714_, p_77716_)).filter(p_77715_);</span><br><span class="line">      <span class="keyword">if</span> (optional.isPresent()) &#123;</span><br><span class="line">         <span class="keyword">return</span> optional;<span class="comment">// 如果存在就返回</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         Direction.<span class="type">Axis</span> <span class="variable">direction$axis</span> <span class="operator">=</span> p_77716_ == Direction.Axis.X ? Direction.Axis.Z : Direction.Axis.X;</span><br><span class="line">          <span class="comment">// 否则就创建一个新的optional对象，其轴的方向和原来不同，继续过滤。</span></span><br><span class="line">         <span class="keyword">return</span> Optional.of(<span class="keyword">new</span> <span class="title class_">PortalShape</span>(p_77713_, p_77714_, direction$axis)).filter(p_77715_);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 初始化一个新的传送门的形状</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">PortalShape</span><span class="params">(LevelAccessor p_77695_, BlockPos p_77696_, Direction.Axis p_77697_)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.level = p_77695_;<span class="comment">// level</span></span><br><span class="line">      <span class="built_in">this</span>.axis = p_77697_; <span class="comment">// 方向</span></span><br><span class="line">      <span class="built_in">this</span>.rightDir = p_77697_ == Direction.Axis.X ? Direction.WEST : Direction.SOUTH;</span><br><span class="line">      <span class="built_in">this</span>.bottomLeft = <span class="built_in">this</span>.calculateBottomLeft(p_77696_);<span class="comment">// 调用calculateBottomLeft计算</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.bottomLeft == <span class="literal">null</span>) &#123;<span class="comment">//如果计算为空</span></span><br><span class="line">         <span class="built_in">this</span>.bottomLeft = p_77696_;<span class="comment">//赋值为blockpos</span></span><br><span class="line">         <span class="built_in">this</span>.width = <span class="number">1</span>;<span class="comment">//宽度1</span></span><br><span class="line">         <span class="built_in">this</span>.height = <span class="number">1</span>;<span class="comment">//高度1</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="built_in">this</span>.width = <span class="built_in">this</span>.calculateWidth();<span class="comment">//计算宽度</span></span><br><span class="line">         <span class="keyword">if</span> (<span class="built_in">this</span>.width &gt; <span class="number">0</span>) &#123;<span class="comment">// 如果宽度&gt;0</span></span><br><span class="line">            <span class="built_in">this</span>.height = <span class="built_in">this</span>.calculateHeight();<span class="comment">//计算高度</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 计算传送门底部左边的位置</span></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="keyword">private</span> BlockPos <span class="title function_">calculateBottomLeft</span><span class="params">(BlockPos p_77734_)</span> &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Math.max(<span class="built_in">this</span>.level.getMinBuildHeight(), p_77734_.getY() - <span class="number">21</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span>(p_77734_.getY() &gt; i &amp;&amp; isEmpty(<span class="built_in">this</span>.level.getBlockState(p_77734_.below()))) &#123;</span><br><span class="line">         p_77734_ = p_77734_.below();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="type">Direction</span> <span class="variable">direction</span> <span class="operator">=</span> <span class="built_in">this</span>.rightDir.getOpposite();</span><br><span class="line">      <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="built_in">this</span>.getDistanceUntilEdgeAboveFrame(p_77734_, direction) - <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span> j &lt; <span class="number">0</span> ? <span class="literal">null</span> : p_77734_.relative(direction, j);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 计算宽度</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">calculateWidth</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="built_in">this</span>.getDistanceUntilEdgeAboveFrame(<span class="built_in">this</span>.bottomLeft, <span class="built_in">this</span>.rightDir);</span><br><span class="line">      <span class="keyword">return</span> i &gt;= <span class="number">2</span> &amp;&amp; i &lt;= <span class="number">21</span> ? i : <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 计算传送门到边缘的位置</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getDistanceUntilEdgeAboveFrame</span><span class="params">(BlockPos p_77736_, Direction p_77737_)</span> &#123;</span><br><span class="line">      BlockPos.<span class="type">MutableBlockPos</span> <span class="variable">blockpos$mutableblockpos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BlockPos</span>.MutableBlockPos();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">21</span>; ++i) &#123;</span><br><span class="line">         blockpos$mutableblockpos.set(p_77736_).move(p_77737_, i);</span><br><span class="line">         <span class="type">BlockState</span> <span class="variable">blockstate</span> <span class="operator">=</span> <span class="built_in">this</span>.level.getBlockState(blockpos$mutableblockpos);</span><br><span class="line">         <span class="keyword">if</span> (!isEmpty(blockstate)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (FRAME.test(blockstate, <span class="built_in">this</span>.level, blockpos$mutableblockpos)) &#123;</span><br><span class="line">               <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="type">BlockState</span> <span class="variable">blockstate1</span> <span class="operator">=</span> <span class="built_in">this</span>.level.getBlockState(blockpos$mutableblockpos.move(Direction.DOWN));</span><br><span class="line">         <span class="keyword">if</span> (!FRAME.test(blockstate1, <span class="built_in">this</span>.level, blockpos$mutableblockpos)) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 计算高度</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">calculateHeight</span><span class="params">()</span> &#123;</span><br><span class="line">      BlockPos.<span class="type">MutableBlockPos</span> <span class="variable">blockpos$mutableblockpos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BlockPos</span>.MutableBlockPos();</span><br><span class="line">      <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="built_in">this</span>.getDistanceUntilTop(blockpos$mutableblockpos);</span><br><span class="line">      <span class="keyword">return</span> i &gt;= <span class="number">3</span> &amp;&amp; i &lt;= <span class="number">21</span> &amp;&amp; <span class="built_in">this</span>.hasTopFrame(blockpos$mutableblockpos, i) ? i : <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">hasTopFrame</span><span class="params">(BlockPos.MutableBlockPos p_77731_, <span class="type">int</span> p_77732_)</span> &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.width; ++i) &#123;</span><br><span class="line">         BlockPos.<span class="type">MutableBlockPos</span> <span class="variable">blockpos$mutableblockpos</span> <span class="operator">=</span> p_77731_.set(<span class="built_in">this</span>.bottomLeft).move(Direction.UP, p_77732_).move(<span class="built_in">this</span>.rightDir, i);</span><br><span class="line">         <span class="keyword">if</span> (!FRAME.test(<span class="built_in">this</span>.level.getBlockState(blockpos$mutableblockpos), <span class="built_in">this</span>.level, blockpos$mutableblockpos)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 计算传送门顶部的位置</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getDistanceUntilTop</span><span class="params">(BlockPos.MutableBlockPos p_77729_)</span> &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">21</span>; ++i) &#123;</span><br><span class="line">         p_77729_.set(<span class="built_in">this</span>.bottomLeft).move(Direction.UP, i).move(<span class="built_in">this</span>.rightDir, -<span class="number">1</span>);</span><br><span class="line">         <span class="keyword">if</span> (!FRAME.test(<span class="built_in">this</span>.level.getBlockState(p_77729_), <span class="built_in">this</span>.level, p_77729_)) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         p_77729_.set(<span class="built_in">this</span>.bottomLeft).move(Direction.UP, i).move(<span class="built_in">this</span>.rightDir, <span class="built_in">this</span>.width);</span><br><span class="line">         <span class="keyword">if</span> (!FRAME.test(<span class="built_in">this</span>.level.getBlockState(p_77729_), <span class="built_in">this</span>.level, p_77729_)) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="built_in">this</span>.width; ++j) &#123;</span><br><span class="line">            p_77729_.set(<span class="built_in">this</span>.bottomLeft).move(Direction.UP, i).move(<span class="built_in">this</span>.rightDir, j);</span><br><span class="line">            <span class="type">BlockState</span> <span class="variable">blockstate</span> <span class="operator">=</span> <span class="built_in">this</span>.level.getBlockState(p_77729_);</span><br><span class="line">            <span class="keyword">if</span> (!isEmpty(blockstate)) &#123;</span><br><span class="line">               <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (blockstate.is(Blocks.NETHER_PORTAL)) &#123;</span><br><span class="line">               ++<span class="built_in">this</span>.numPortalBlocks;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="number">21</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 判断一个位置是否是空的</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(BlockState p_77718_)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> p_77718_.isAir() || p_77718_.is(BlockTags.FIRE) || p_77718_.is(Blocks.NETHER_PORTAL);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 判断传送门是否是合法的</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.bottomLeft != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.width &gt;= <span class="number">2</span> &amp;&amp; <span class="built_in">this</span>.width &lt;= <span class="number">21</span> &amp;&amp; <span class="built_in">this</span>.height &gt;= <span class="number">3</span> &amp;&amp; <span class="built_in">this</span>.height &lt;= <span class="number">21</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 创建传送门方块（紫色那个）</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createPortalBlocks</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">BlockState</span> <span class="variable">blockstate</span> <span class="operator">=</span> Blocks.NETHER_PORTAL.defaultBlockState().setValue(NetherPortalBlock.AXIS, <span class="built_in">this</span>.axis);</span><br><span class="line">      BlockPos.betweenClosed(<span class="built_in">this</span>.bottomLeft, <span class="built_in">this</span>.bottomLeft.relative(Direction.UP, <span class="built_in">this</span>.height - <span class="number">1</span>).relative(<span class="built_in">this</span>.rightDir, <span class="built_in">this</span>.width - <span class="number">1</span>))</span><br><span class="line">         .forEach(p_77725_ -&gt; <span class="built_in">this</span>.level.setBlock(p_77725_, blockstate, <span class="number">18</span>));</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 传送门是否完整</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isComplete</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.isValid() &amp;&amp; <span class="built_in">this</span>.numPortalBlocks == <span class="built_in">this</span>.width * <span class="built_in">this</span>.height;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 获得相对位置</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> Vec3 <span class="title function_">getRelativePosition</span><span class="params">(BlockUtil.FoundRectangle p_77739_, Direction.Axis p_77740_, Vec3 p_77741_, EntityDimensions p_77742_)</span> &#123;</span><br><span class="line">      <span class="type">double</span> <span class="variable">d0</span> <span class="operator">=</span> (<span class="type">double</span>)p_77739_.axis1Size - (<span class="type">double</span>)p_77742_.width;</span><br><span class="line">      <span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> (<span class="type">double</span>)p_77739_.axis2Size - (<span class="type">double</span>)p_77742_.height;</span><br><span class="line">      <span class="type">BlockPos</span> <span class="variable">blockpos</span> <span class="operator">=</span> p_77739_.minCorner;</span><br><span class="line">      <span class="type">double</span> d2;</span><br><span class="line">      <span class="keyword">if</span> (d0 &gt; <span class="number">0.0</span>) &#123;</span><br><span class="line">         <span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> (<span class="type">float</span>)blockpos.get(p_77740_) + p_77742_.width / <span class="number">2.0F</span>;</span><br><span class="line">         d2 = Mth.clamp(Mth.inverseLerp(p_77741_.get(p_77740_) - (<span class="type">double</span>)f, <span class="number">0.0</span>, d0), <span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         d2 = <span class="number">0.5</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="type">double</span> d4;</span><br><span class="line">      <span class="keyword">if</span> (d1 &gt; <span class="number">0.0</span>) &#123;</span><br><span class="line">         Direction.<span class="type">Axis</span> <span class="variable">direction$axis</span> <span class="operator">=</span> Direction.Axis.Y;</span><br><span class="line">         d4 = Mth.clamp(Mth.inverseLerp(p_77741_.get(direction$axis) - (<span class="type">double</span>)blockpos.get(direction$axis), <span class="number">0.0</span>, d1), <span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         d4 = <span class="number">0.0</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      Direction.<span class="type">Axis</span> <span class="variable">direction$axis1</span> <span class="operator">=</span> p_77740_ == Direction.Axis.X ? Direction.Axis.Z : Direction.Axis.X;</span><br><span class="line">      <span class="type">double</span> <span class="variable">d3</span> <span class="operator">=</span> p_77741_.get(direction$axis1) - ((<span class="type">double</span>)blockpos.get(direction$axis1) + <span class="number">0.5</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Vec3</span>(d2, d4, d3);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 创建传送门信息</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> PortalInfo <span class="title function_">createPortalInfo</span><span class="params">(</span></span><br><span class="line"><span class="params">      ServerLevel p_259301_, // 世界</span></span><br><span class="line"><span class="params">      BlockUtil.FoundRectangle p_259931_,//传送门的矩形区域</span></span><br><span class="line"><span class="params">      Direction.Axis p_259901_,//传送门的轴</span></span><br><span class="line"><span class="params">      Vec3 p_259630_,//传送门的位置</span></span><br><span class="line"><span class="params">      Entity p_259166_,//实体</span></span><br><span class="line"><span class="params">      Vec3 p_260043_,//实体位置</span></span><br><span class="line"><span class="params">      <span class="type">float</span> p_259853_,//旋转角度</span></span><br><span class="line"><span class="params">      <span class="type">float</span> p_259667_//实体旋转角度</span></span><br><span class="line"><span class="params">   )</span> &#123;</span><br><span class="line">      <span class="type">BlockPos</span> <span class="variable">blockpos</span> <span class="operator">=</span> p_259931_.minCorner;<span class="comment">//给定区域获得门户的坐标</span></span><br><span class="line">      <span class="type">BlockState</span> <span class="variable">blockstate</span> <span class="operator">=</span> p_259301_.getBlockState(blockpos);<span class="comment">//获得方块状态</span></span><br><span class="line">      Direction.<span class="type">Axis</span> <span class="variable">direction$axis</span> <span class="operator">=</span> blockstate.getOptionalValue(BlockStateProperties.HORIZONTAL_AXIS).orElse(Direction.Axis.X);<span class="comment">//从方块状态中获得传送门的轴</span></span><br><span class="line">      <span class="type">double</span> <span class="variable">d0</span> <span class="operator">=</span> (<span class="type">double</span>)p_259931_.axis1Size;</span><br><span class="line">      <span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> (<span class="type">double</span>)p_259931_.axis2Size;</span><br><span class="line">      <span class="type">EntityDimensions</span> <span class="variable">entitydimensions</span> <span class="operator">=</span> p_259166_.getDimensions(p_259166_.getPose());</span><br><span class="line">      <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> p_259901_ == direction$axis ? <span class="number">0</span> : <span class="number">90</span>;</span><br><span class="line">      <span class="type">Vec3</span> <span class="variable">vec3</span> <span class="operator">=</span> p_259901_ == direction$axis ? p_260043_ : <span class="keyword">new</span> <span class="title class_">Vec3</span>(p_260043_.z, p_260043_.y, -p_260043_.x);</span><br><span class="line">      <span class="type">double</span> <span class="variable">d2</span> <span class="operator">=</span> (<span class="type">double</span>)entitydimensions.width / <span class="number">2.0</span> + (d0 - (<span class="type">double</span>)entitydimensions.width) * p_259630_.x();</span><br><span class="line">      <span class="type">double</span> <span class="variable">d3</span> <span class="operator">=</span> (d1 - (<span class="type">double</span>)entitydimensions.height) * p_259630_.y();</span><br><span class="line">      <span class="type">double</span> <span class="variable">d4</span> <span class="operator">=</span> <span class="number">0.5</span> + p_259630_.z();</span><br><span class="line">      <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> direction$axis == Direction.Axis.X;</span><br><span class="line">      <span class="type">Vec3</span> <span class="variable">vec31</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vec3</span>((<span class="type">double</span>)blockpos.getX() + (flag ? d2 : d4), (<span class="type">double</span>)blockpos.getY() + d3, (<span class="type">double</span>)blockpos.getZ() + (flag ? d4 : d2));</span><br><span class="line">      <span class="type">Vec3</span> <span class="variable">vec32</span> <span class="operator">=</span> findCollisionFreePosition(vec31, p_259301_, p_259166_, entitydimensions);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PortalInfo</span>(vec32, vec3, p_259853_ + (<span class="type">float</span>)i, p_259667_);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 用于找到碰撞免疫的位置</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Vec3 <span class="title function_">findCollisionFreePosition</span><span class="params">(Vec3 p_260315_, ServerLevel p_259704_, Entity p_259626_, EntityDimensions p_259816_)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!(p_259816_.width &gt; <span class="number">4.0F</span>) &amp;&amp; !(p_259816_.height &gt; <span class="number">4.0F</span>)) &#123;</span><br><span class="line">         <span class="type">double</span> <span class="variable">d0</span> <span class="operator">=</span> (<span class="type">double</span>)p_259816_.height / <span class="number">2.0</span>;</span><br><span class="line">         <span class="type">Vec3</span> <span class="variable">vec3</span> <span class="operator">=</span> p_260315_.add(<span class="number">0.0</span>, d0, <span class="number">0.0</span>);</span><br><span class="line">         <span class="type">VoxelShape</span> <span class="variable">voxelshape</span> <span class="operator">=</span> Shapes.create(</span><br><span class="line">            AABB.ofSize(vec3, (<span class="type">double</span>)p_259816_.width, <span class="number">0.0</span>, (<span class="type">double</span>)p_259816_.width).expandTowards(<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>).inflate(<span class="number">1.0E-6</span>)</span><br><span class="line">         );</span><br><span class="line">         Optional&lt;Vec3&gt; optional = p_259704_.findFreePosition(</span><br><span class="line">            p_259626_, voxelshape, vec3, (<span class="type">double</span>)p_259816_.width, (<span class="type">double</span>)p_259816_.height, (<span class="type">double</span>)p_259816_.width</span><br><span class="line">         );</span><br><span class="line">         Optional&lt;Vec3&gt; optional1 = optional.map(p_259019_ -&gt; p_259019_.subtract(<span class="number">0.0</span>, d0, <span class="number">0.0</span>));</span><br><span class="line">         <span class="keyword">return</span> optional1.orElse(p_260315_);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> p_260315_;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="BaseFrieBlock类"><a href="#BaseFrieBlock类" class="headerlink" title="BaseFrieBlock类"></a>BaseFrieBlock类</h1><p>&#x2F;&#x2F; 火焰类型方块的基类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.minecraft.world.level.block;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.core.BlockPos;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.core.Direction;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.core.particles.ParticleTypes;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.sounds.SoundEvents;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.sounds.SoundSource;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.util.RandomSource;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.entity.Entity;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.entity.player.Player;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.item.context.BlockPlaceContext;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.BlockGetter;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.Level;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.state.BlockBehaviour;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.state.BlockState;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.portal.PortalShape;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.phys.shapes.CollisionContext;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.phys.shapes.VoxelShape;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseFireBlock</span> <span class="keyword">extends</span> <span class="title class_">Block</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SECONDS_ON_FIRE</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">float</span> fireDamage;</span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">AABB_OFFSET</span> <span class="operator">=</span> <span class="number">1.0F</span>;</span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">VoxelShape</span> <span class="variable">DOWN_AABB</span> <span class="operator">=</span> Block.box(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">16.0</span>, <span class="number">1.0</span>, <span class="number">16.0</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">BaseFireBlock</span><span class="params">(BlockBehaviour.Properties p_49241_, <span class="type">float</span> p_49242_)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>(p_49241_);</span><br><span class="line">      <span class="built_in">this</span>.fireDamage = p_49242_; <span class="comment">// 火焰伤害</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据放置的位置和level决定状态</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> BlockState <span class="title function_">getStateForPlacement</span><span class="params">(BlockPlaceContext p_49244_)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> getState(p_49244_.getLevel(), p_49244_.getClickedPos());</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 根据getter和blockpos决定火焰方块的状态</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> BlockState <span class="title function_">getState</span><span class="params">(BlockGetter p_49246_, BlockPos p_49247_)</span> &#123;</span><br><span class="line">      <span class="type">BlockPos</span> <span class="variable">blockpos</span> <span class="operator">=</span> p_49247_.below();</span><br><span class="line">      <span class="type">BlockState</span> <span class="variable">blockstate</span> <span class="operator">=</span> p_49246_.getBlockState(blockpos);</span><br><span class="line">      <span class="keyword">return</span> SoulFireBlock.canSurviveOnBlock(blockstate)</span><br><span class="line">         ? Blocks.SOUL_FIRE.defaultBlockState()</span><br><span class="line">         : ((FireBlock)Blocks.FIRE).getStateForPlacement(p_49246_, p_49247_);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 返回火焰方块的形状，用于碰撞检测</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> VoxelShape <span class="title function_">getShape</span><span class="params">(BlockState p_49274_, BlockGetter p_49275_, BlockPos p_49276_, CollisionContext p_49277_)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> DOWN_AABB;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 每个tick会调用的方法，处理火焰动画的效果，例如播放火焰的环境音效，添加火焰的粒子效果</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">animateTick</span><span class="params">(BlockState p_220763_, Level p_220764_, BlockPos p_220765_, RandomSource p_220766_)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (p_220766_.nextInt(<span class="number">24</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">         p_220764_.playLocalSound(</span><br><span class="line">            (<span class="type">double</span>)p_220765_.getX() + <span class="number">0.5</span>,</span><br><span class="line">            (<span class="type">double</span>)p_220765_.getY() + <span class="number">0.5</span>,</span><br><span class="line">            (<span class="type">double</span>)p_220765_.getZ() + <span class="number">0.5</span>,</span><br><span class="line">            SoundEvents.FIRE_AMBIENT,</span><br><span class="line">            SoundSource.BLOCKS,</span><br><span class="line">            <span class="number">1.0F</span> + p_220766_.nextFloat(),</span><br><span class="line">            p_220766_.nextFloat() * <span class="number">0.7F</span> + <span class="number">0.3F</span>,</span><br><span class="line">            <span class="literal">false</span></span><br><span class="line">         );</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="type">BlockPos</span> <span class="variable">blockpos</span> <span class="operator">=</span> p_220765_.below();</span><br><span class="line">      <span class="type">BlockState</span> <span class="variable">blockstate</span> <span class="operator">=</span> p_220764_.getBlockState(blockpos);</span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">this</span>.canBurn(blockstate) &amp;&amp; !blockstate.isFaceSturdy(p_220764_, blockpos, Direction.UP)) &#123;</span><br><span class="line">         <span class="keyword">if</span> (<span class="built_in">this</span>.canBurn(p_220764_.getBlockState(p_220765_.west()))) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">2</span>; ++j) &#123;</span><br><span class="line">               <span class="type">double</span> <span class="variable">d3</span> <span class="operator">=</span> (<span class="type">double</span>)p_220765_.getX() + p_220766_.nextDouble() * <span class="number">0.1F</span>;</span><br><span class="line">               <span class="type">double</span> <span class="variable">d8</span> <span class="operator">=</span> (<span class="type">double</span>)p_220765_.getY() + p_220766_.nextDouble();</span><br><span class="line">               <span class="type">double</span> <span class="variable">d13</span> <span class="operator">=</span> (<span class="type">double</span>)p_220765_.getZ() + p_220766_.nextDouble();</span><br><span class="line">               p_220764_.addParticle(ParticleTypes.LARGE_SMOKE, d3, d8, d13, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (<span class="built_in">this</span>.canBurn(p_220764_.getBlockState(p_220765_.east()))) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">2</span>; ++k) &#123;</span><br><span class="line">               <span class="type">double</span> <span class="variable">d4</span> <span class="operator">=</span> (<span class="type">double</span>)(p_220765_.getX() + <span class="number">1</span>) - p_220766_.nextDouble() * <span class="number">0.1F</span>;</span><br><span class="line">               <span class="type">double</span> <span class="variable">d9</span> <span class="operator">=</span> (<span class="type">double</span>)p_220765_.getY() + p_220766_.nextDouble();</span><br><span class="line">               <span class="type">double</span> <span class="variable">d14</span> <span class="operator">=</span> (<span class="type">double</span>)p_220765_.getZ() + p_220766_.nextDouble();</span><br><span class="line">               p_220764_.addParticle(ParticleTypes.LARGE_SMOKE, d4, d9, d14, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (<span class="built_in">this</span>.canBurn(p_220764_.getBlockState(p_220765_.north()))) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>; l &lt; <span class="number">2</span>; ++l) &#123;</span><br><span class="line">               <span class="type">double</span> <span class="variable">d5</span> <span class="operator">=</span> (<span class="type">double</span>)p_220765_.getX() + p_220766_.nextDouble();</span><br><span class="line">               <span class="type">double</span> <span class="variable">d10</span> <span class="operator">=</span> (<span class="type">double</span>)p_220765_.getY() + p_220766_.nextDouble();</span><br><span class="line">               <span class="type">double</span> <span class="variable">d15</span> <span class="operator">=</span> (<span class="type">double</span>)p_220765_.getZ() + p_220766_.nextDouble() * <span class="number">0.1F</span>;</span><br><span class="line">               p_220764_.addParticle(ParticleTypes.LARGE_SMOKE, d5, d10, d15, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (<span class="built_in">this</span>.canBurn(p_220764_.getBlockState(p_220765_.south()))) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">0</span>; i1 &lt; <span class="number">2</span>; ++i1) &#123;</span><br><span class="line">               <span class="type">double</span> <span class="variable">d6</span> <span class="operator">=</span> (<span class="type">double</span>)p_220765_.getX() + p_220766_.nextDouble();</span><br><span class="line">               <span class="type">double</span> <span class="variable">d11</span> <span class="operator">=</span> (<span class="type">double</span>)p_220765_.getY() + p_220766_.nextDouble();</span><br><span class="line">               <span class="type">double</span> <span class="variable">d16</span> <span class="operator">=</span> (<span class="type">double</span>)(p_220765_.getZ() + <span class="number">1</span>) - p_220766_.nextDouble() * <span class="number">0.1F</span>;</span><br><span class="line">               p_220764_.addParticle(ParticleTypes.LARGE_SMOKE, d6, d11, d16, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (<span class="built_in">this</span>.canBurn(p_220764_.getBlockState(p_220765_.above()))) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j1</span> <span class="operator">=</span> <span class="number">0</span>; j1 &lt; <span class="number">2</span>; ++j1) &#123;</span><br><span class="line">               <span class="type">double</span> <span class="variable">d7</span> <span class="operator">=</span> (<span class="type">double</span>)p_220765_.getX() + p_220766_.nextDouble();</span><br><span class="line">               <span class="type">double</span> <span class="variable">d12</span> <span class="operator">=</span> (<span class="type">double</span>)(p_220765_.getY() + <span class="number">1</span>) - p_220766_.nextDouble() * <span class="number">0.1F</span>;</span><br><span class="line">               <span class="type">double</span> <span class="variable">d17</span> <span class="operator">=</span> (<span class="type">double</span>)p_220765_.getZ() + p_220766_.nextDouble();</span><br><span class="line">               p_220764_.addParticle(ParticleTypes.LARGE_SMOKE, d7, d12, d17, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">d0</span> <span class="operator">=</span> (<span class="type">double</span>)p_220765_.getX() + p_220766_.nextDouble();</span><br><span class="line">            <span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> (<span class="type">double</span>)p_220765_.getY() + p_220766_.nextDouble() * <span class="number">0.5</span> + <span class="number">0.5</span>;</span><br><span class="line">            <span class="type">double</span> <span class="variable">d2</span> <span class="operator">=</span> (<span class="type">double</span>)p_220765_.getZ() + p_220766_.nextDouble();</span><br><span class="line">            p_220764_.addParticle(ParticleTypes.LARGE_SMOKE, d0, d1, d2, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 抽象方法，用于判断方块是否可以燃烧</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">canBurn</span><span class="params">(BlockState p_49284_)</span>;</span><br><span class="line"><span class="comment">// 处理实体进入火焰的状况，例如添加火焰伤害和燃烧效果</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">entityInside</span><span class="params">(BlockState p_49260_, Level p_49261_, BlockPos p_49262_, Entity p_49263_)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!p_49263_.fireImmune()) &#123;</span><br><span class="line">         p_49263_.setRemainingFireTicks(p_49263_.getRemainingFireTicks() + <span class="number">1</span>);</span><br><span class="line">         <span class="keyword">if</span> (p_49263_.getRemainingFireTicks() == <span class="number">0</span>) &#123;</span><br><span class="line">            p_49263_.setSecondsOnFire(<span class="number">8</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      p_49263_.hurt(p_49261_.damageSources().inFire(), <span class="built_in">this</span>.fireDamage);</span><br><span class="line">      <span class="built_in">super</span>.entityInside(p_49260_, p_49261_, p_49262_, p_49263_);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 处理方块被放置的情况，例如在特定的维度中，如果方块上方有足够的空间，就会尝试创建一个传送门</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onPlace</span><span class="params">(BlockState p_49279_, Level p_49280_, BlockPos p_49281_, BlockState p_49282_, <span class="type">boolean</span> p_49283_)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!p_49282_.is(p_49279_.getBlock())) &#123;</span><br><span class="line">         <span class="keyword">if</span> (inPortalDimension(p_49280_)) &#123;</span><br><span class="line">            Optional&lt;PortalShape&gt; optional = PortalShape.findEmptyPortalShape(p_49280_, p_49281_, Direction.Axis.X);</span><br><span class="line">            optional = net.neoforged.neoforge.event.EventHooks.onTrySpawnPortal(p_49280_, p_49281_, optional);</span><br><span class="line">            <span class="keyword">if</span> (optional.isPresent()) &#123;</span><br><span class="line">               optional.get().createPortalBlocks();</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (!p_49279_.canSurvive(p_49280_, p_49281_)) &#123;</span><br><span class="line">            p_49280_.removeBlock(p_49281_, <span class="literal">false</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 判断当前维度世界是否可以创建传送门</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">inPortalDimension</span><span class="params">(Level p_49249_)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> p_49249_.dimension() == Level.OVERWORLD || p_49249_.dimension() == Level.NETHER;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 处理方块被破坏时候的粒子效果</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">spawnDestroyParticles</span><span class="params">(Level p_152139_, Player p_152140_, BlockPos p_152141_, BlockState p_152142_)</span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 处理玩家破坏方块时候的情况</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playerWillDestroy</span><span class="params">(Level p_49251_, BlockPos p_49252_, BlockState p_49253_, Player p_49254_)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!p_49251_.isClientSide()) &#123;</span><br><span class="line">         p_49251_.levelEvent(<span class="literal">null</span>, <span class="number">1009</span>, p_49252_, <span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">super</span>.playerWillDestroy(p_49251_, p_49252_, p_49253_, p_49254_);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//它用于判断方块是否可以被放置在给定的位置。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">canBePlacedAt</span><span class="params">(Level p_49256_, BlockPos p_49257_, Direction p_49258_)</span> &#123;</span><br><span class="line">      <span class="type">BlockState</span> <span class="variable">blockstate</span> <span class="operator">=</span> p_49256_.getBlockState(p_49257_);</span><br><span class="line">      <span class="keyword">if</span> (!blockstate.isAir()) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> getState(p_49256_, p_49257_).canSurvive(p_49256_, p_49257_) || isPortal(p_49256_, p_49257_, p_49258_);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 静态方法，用于判断给定的位置是否可以创建传送门</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPortal</span><span class="params">(Level p_49270_, BlockPos p_49271_, Direction p_49272_)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!inPortalDimension(p_49270_)) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         BlockPos.<span class="type">MutableBlockPos</span> <span class="variable">blockpos$mutableblockpos</span> <span class="operator">=</span> p_49271_.mutable();</span><br><span class="line">         <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">for</span>(Direction direction : Direction.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p_49270_.getBlockState(blockpos$mutableblockpos.set(p_49271_).move(direction)).isPortalFrame(p_49270_, blockpos$mutableblockpos)) &#123;</span><br><span class="line">               flag = <span class="literal">true</span>;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Direction.<span class="type">Axis</span> <span class="variable">direction$axis</span> <span class="operator">=</span> p_49272_.getAxis().isHorizontal()</span><br><span class="line">               ? p_49272_.getCounterClockWise().getAxis()</span><br><span class="line">               : Direction.Plane.HORIZONTAL.getRandomAxis(p_49270_.random);</span><br><span class="line">            <span class="keyword">return</span> PortalShape.findEmptyPortalShape(p_49270_, p_49271_, direction$axis).isPresent();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 我的世界 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自然辩证法习题</title>
      <link href="/2023/11/06/%E8%87%AA%E7%84%B6%E8%BE%A9%E8%AF%81%E6%B3%95%E9%A2%98/"/>
      <url>/2023/11/06/%E8%87%AA%E7%84%B6%E8%BE%A9%E8%AF%81%E6%B3%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="题型"><a href="#题型" class="headerlink" title="题型"></a>题型</h1><p>简答题四选三</p><p>论述题 2个</p><h1 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h1><h2 id="机械唯物主义自然观，缺陷，什么是机械唯物主义自然观"><a href="#机械唯物主义自然观，缺陷，什么是机械唯物主义自然观" class="headerlink" title="机械唯物主义自然观，缺陷，什么是机械唯物主义自然观"></a>机械唯物主义自然观，缺陷，什么是机械唯物主义自然观</h2><p>机械唯物主义自然观是什么：机械唯物主义自然观是16-18世纪的自然科学家和哲学家们根据牛顿经典力学等自然成果，概况和总结自然界及其与人类的关系形成的机械唯物主义和形而上学的自然观。</p><p>与马克思自然观的关系是：重要的思想渊源</p><p>机械唯物主义自然观的观点：</p><ul><li>自然界由物质构成，物质由不可再分的微粒构成。</li><li>自然界具有绝对不变性，自然物和时间，空间都是不变的。</li><li>自然界的物质运动是受外力的作用，遵循因果规律的机械运动，宇宙的过程可以用简单的数学方程式表示。</li><li>自然界受到上帝的“目的性”支配。</li><li>以形而上学的思维方式认识自然界，即它先把整体分割为若干孤立的部分要素进行研究，再把这些部分合为一体；他是与辩证法相对的，是用孤立，静止的观点观察世界的思维方式；这种思维方式在研究方法方面超过古希腊，但是在自然观方面却低于过古希腊。</li><li>人和自然界都是机器，并且是分立的。</li></ul><p>机械唯物主义自然观的额缺陷：</p><p>主要体现：以机械决定论的观点认识自然界的存在及其规律，并以形而上学方法开展具体研究；以因果决定论的观点推测自然界的未来发展。</p><ul><li>以机械决定论认识自然界。（1）它把自然界和人都看作机器，并把人排斥与自然界之外，割裂其固有联系。（2）它以机械运动穷尽物质的所有运动，抹杀物质运动形式及其性质的多样性。（3）它用量的差异说明一切质的差异，用物质的量规定其质，忽视了质和量的辩证关系。</li><li>以因果决定论看待自然界。它主张自然界的存在和发展都在遵循因果规律，提倡“关于自然界的安排的合目的性的思想”。其结果，“还是没有摆脱神学自然观的束缚”。</li><li>以孤立和静止的方法研究自然界。它主张“在绝对不相容的对立中思维”，“企图用一种模式来改造整个世界”，虽然“在个别问题上胜过朴素唯物主义，但对世界的联系和发展的理解却低于朴素唯物主义”。</li></ul><h2 id="默顿科学，四条规范，科学的四条规范"><a href="#默顿科学，四条规范，科学的四条规范" class="headerlink" title="默顿科学，四条规范，科学的四条规范"></a>默顿科学，四条规范，科学的四条规范</h2><p>提出者：默顿在《论科学与民主》中提出</p><p>时间：1942年</p><p>作用：系统阐述科学活动的规范结构（科学共同体的内部行为规范）</p><p>目的：凸显科学独有的文化和精神气质。</p><p>内容：普遍主义，公有性，无私利性，有组织的怀疑主义。</p><ul><li>普遍主义规范强调学科内容和科学评价标准的客观性，普遍性</li><li>公有主义规范强调科学知识的公有性，强调科学知识是人类共同的财富。</li><li>无私利性规范要求科学家不应以科学活动谋取私利。</li><li>有条理的怀疑精神强调科学永恒的批判精神。</li><li>独创性规范要求科学家只有发现了前人未发现的东西，做出了前人未曾做出的成果，其工作才会被认为对科学的发展具有实质性的意义。</li></ul><h2 id="怎么理解科学始于问题"><a href="#怎么理解科学始于问题" class="headerlink" title="怎么理解科学始于问题"></a>怎么理解科学始于问题</h2><p>做科学研究，首先要从问题出发。抓住了问题就抓住了具体与关键。习近平特别强调问题意识与问题导向，他指出：“理论创新只能从问题开始。”习近平在《关于&lt;中共中央关于全面深化改革若干重大问题的决定&gt;的说明》中所明确提出的“要有强烈的问题意识，以重大问题为导向”的思想也适用于科学研究。以问题为导向，是科学研究的重要方法，也是辩证思维首先需要考虑的基本点。</p><p>科学研究从问题出发，是以科学技术哲学中长期坚持的基本方法，现在需要注意将问题意识与把握机遇相结合。科学研究从问题出发，也需要抓住机会。有了问题意识，才能抓住研究问题的机遇。</p><h2 id="怎么理解数学方法与科学实验方法"><a href="#怎么理解数学方法与科学实验方法" class="headerlink" title="怎么理解数学方法与科学实验方法"></a>怎么理解数学方法与科学实验方法</h2><p>数学方法是一种关注事物的形式和抽象结构的思维和科学方法，它抽象地表达事物的空间关系和数量关系。</p><p>数学方法和数学思维，是一种把不确定性尽量转为确定性的方法，是追求精准思维的具体方法。</p><p>精准思维不仅追求一种数学化的精确性，而且是一种兼具理论和务实的思维方法，它强调具体和准确，要求研究精准，分析精准。</p><p>系统思维是把事物视为系统来处理的思维方法。系统思维是一种整体性和关联性很强的思维方法。</p><p>数学方法注重抽象，模式化，是我们可以把自然研究对象高度抽象，转化为人工模型，抽象其中的因果关系的基本方法。数学方法包括多种形式，如数学方程方法，数学建模方法，数学统计方法，数学实验方法。</p><ul><li>数学方程方法：事物的关键关系抽象出来，建立某种关于事物的数学模型。</li><li>数学建模方法：科学家考察和介入自然事物的中介和桥梁。反映事物内在属性的抽象关系</li><li>数学统计方法：对事物总体数量，类型及其关系的认识方法。是在统计资料的基础上研究，整理和分析统计资料的方法。对认识事物总体状况，分布状态及其相互关系有重要意义。</li><li>数学实验方法：计算机技术和数学结合起来，在计算机上以数学方法设计实现理想实验。有助于更加精确和在整体上认识事物内部要素和事物之间的理想关系。是一种理想化的数学实践。</li></ul><h1 id="论述题"><a href="#论述题" class="headerlink" title="论述题"></a>论述题</h1><h2 id="习近平的科技创新观"><a href="#习近平的科技创新观" class="headerlink" title="习近平的科技创新观"></a>习近平的科技创新观</h2><p>（1）加快建设创新型国家，建设设计科技强国。</p><p>（2）创新是引领发展的第一动力</p><p>（3）实施创新驱动发展战略，推进以科技创新为核心的全面创新。</p><p>（4）走中国特色自主创新道路。</p><p>（5）坚持融入全国科技创新网络，深度参与全球科技治理</p><p>（6）加快科技体制改革步伐</p><p>（7）加强科技文化建设，发展创新文化。</p><h2 id="怎么理解现代化，谈谈对中国式现代化的理解"><a href="#怎么理解现代化，谈谈对中国式现代化的理解" class="headerlink" title="怎么理解现代化，谈谈对中国式现代化的理解"></a>怎么理解现代化，谈谈对中国式现代化的理解</h2><p>现代化是指发展中的社会为了获得发达的工业社会所具有的一些特点，而经历的文化与社会变迁的全球性过程。</p><p>一般来说现代化包含</p><ul><li>学术知识上的科学化</li><li>法律政治上的民主化</li><li>经济上额标准工业化</li><li>思想作品多元自由化</li><li>生活文化领域的个人化</li><li>宗教色彩褪去的世俗化</li></ul><p>中国式现代化是指中国共产党领导的社会主义现代化。既有各国现代化的共同特征，又有基于自己国情的中国特色。</p><p>中国式现代化的特色：</p><ul><li>人口规模最大的现代化</li><li>全体人民共同富裕的现代化</li><li>物质文明和精神文明相协调的现代化</li><li>人与自然和谐共生的现代化</li><li>和平发展道路的现代化</li></ul><p>中国式现代化的本质要求是：</p><ul><li>坚持中国共产党领导</li><li>坚持中国特色社会主义</li><li>实现高质量发展</li><li>发展全过程人民民主</li><li>丰富人民精神世界</li><li>实现全体人民共同富裕</li><li>促进人与自然和谐共生</li><li>构建人类命运共同体</li><li>创造人类文明新形态</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 自然辩证法概论 </tag>
            
            <tag> 习题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建该blog的你可能需要的相关资料</title>
      <link href="/2023/11/05/%E6%90%AD%E5%BB%BA%E8%AF%A5blog%E7%9A%84%E4%BD%A0%E5%8F%AF%E8%83%BD%E9%9C%80%E8%A6%81%E7%9A%84%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/"/>
      <url>/2023/11/05/%E6%90%AD%E5%BB%BA%E8%AF%A5blog%E7%9A%84%E4%BD%A0%E5%8F%AF%E8%83%BD%E9%9C%80%E8%A6%81%E7%9A%84%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>这里罗列下搭建本blog时候用到了那些文档方便想要自己的搭建一个的去用。</p><h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><h2 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h2><p>hexo博客的搭建教程，其中第三步域名绑定可选做。</p><p><a href="https://zhuanlan.zhihu.com/p/137476045">Hexo搭建个人博客-并部署到Github上托管(Windows) - 知乎 (zhihu.com)</a></p><h2 id="主题使用"><a href="#主题使用" class="headerlink" title="主题使用"></a>主题使用</h2><p>这里简单介绍了怎么配置使用主题，并给出了一部分主题的配置，详细的主题配置还是推荐看作者给的内容。</p><p><a href="https://www.cnblogs.com/ncphoton/p/16950595.html">Hexo-Butterfly主题配置 - NcPhoton - 博客园 (cnblogs.com)</a></p><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><p>这里是作者官网给出的配置文档，写的比较详细，也导致你需要的和不需要的很多，需要耐心阅读找到你需要的。</p><p>其中不仅仅是一，还请翻阅其他的篇幅。</p><p><a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安裝文檔(一) 快速開始 | Butterfly</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于自己写一个简单模组的想法</title>
      <link href="/2023/10/31/%E5%85%B3%E4%BA%8E%E8%87%AA%E5%B7%B1%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E6%A8%A1%E7%BB%84%E7%9A%84%E6%83%B3%E6%B3%95/"/>
      <url>/2023/10/31/%E5%85%B3%E4%BA%8E%E8%87%AA%E5%B7%B1%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E6%A8%A1%E7%BB%84%E7%9A%84%E6%83%B3%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h1><p>做一个能够直接破坏矿物的爆炸的物品，类似于匠魂2的EPLE物品，可以直接用来挖矿，并再这个基础上做一些拓展</p><h1 id="灵感"><a href="#灵感" class="headerlink" title="灵感"></a>灵感</h1><p>来自匠魂的[EFLN - <a href="https://www.mcmod.cn/item/157578.html">TiC2]匠魂2 (Tinkers’ Construct 2) - MC百科|最大的Minecraft中文MOD百科 (mcmod.cn)</a>。</p><h1 id="实现的内容"><a href="#实现的内容" class="headerlink" title="实现的内容"></a>实现的内容</h1><ol><li>实现匠魂物品的基础功能。</li><li>实现不同的范爆炸范围，通过木头，石头，铁，钻石，下届合金（之后也可以加入金和铜不过目前没想到什么特性）合成具有不同的爆炸范围。</li><li>加入一种圆石进行的合成，可以爆炸后仅保留矿物。</li><li>加入一种末影珍珠合成的物品，可以爆炸后将所有物品传到玩家背包中，而不是掉落在地上。</li><li>添加一套新的火药的获的途径</li></ol><h1 id="目前想法开发过程"><a href="#目前想法开发过程" class="headerlink" title="目前想法开发过程"></a>目前想法开发过程</h1><ol><li>实现匠魂代码的运行，保证和原物品一样的功能</li><li>在此基础上添加具有不同范围的“物品”。 <a href="%E8%BF%99%E9%87%8C%E7%9A%84%E7%89%A9%E5%93%81%E6%8C%87%E7%9A%84%E6%98%AF%E6%9C%AC%E6%A8%A1%E7%BB%84%E8%A6%81%E6%B7%BB%E5%8A%A0%E7%9A%84%E7%89%A9%E5%93%81%E4%B8%8B%E5%90%8C">^1</a></li><li>在此基础上添加受到时运效果影响的“物品”</li><li>在此基础上添加能够传送掉落物品的“物品”</li></ol><h1 id="关于该模组命名"><a href="#关于该模组命名" class="headerlink" title="关于该模组命名"></a>关于该模组命名</h1><p>暂定Mine helper吧。挖矿小助手。欢迎各位想想啥中二名字。</p><p>也欢迎给该模组提供能，我会选择考虑是否加入。</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>没啥结论。之后在更新。</p><h1 id="目前存在进度和存在问题"><a href="#目前存在进度和存在问题" class="headerlink" title="目前存在进度和存在问题"></a>目前存在进度和存在问题</h1><h2 id="进度"><a href="#进度" class="headerlink" title="进度"></a>进度</h2><p>开发了一个物品wooditem和一个实体woodentity，添加了爆炸和爆炸帮助类。</p><h2 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h2><ul><li>没有系统设计每个物品的名称</li><li>需要对系统的架构进行设计对代码进行设计</li><li>没有美术</li><li>整个内容写的比较随意，还是测试代码阶段。</li></ul><h2 id="考虑"><a href="#考虑" class="headerlink" title="考虑"></a>考虑</h2><ol><li>作为正式开发的前置研究。完成基本功能后考虑进行详细的设计在进行开发。</li><li>目前需要进行对结构的设计了。</li><li>还有部分的代码不明白具体什么意思之后再说。</li></ol><h1 id="开发日志"><a href="#开发日志" class="headerlink" title="开发日志"></a>开发日志</h1><ul><li>11.3</li></ul><p>爆炸不会破坏方块不知道什么鬼bug，完全复制的匠魂的代码。明天看看怎么回事</p><ul><li>11.5</li></ul><p>修复了为什么爆炸不会破坏方块，对代码进行了注解。以下贴出来</p><p>exploer类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.examplemod.entity.custom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Lists;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.core.BlockPos;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.core.particles.ParticleTypes;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.server.level.ServerLevel;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.server.level.ServerPlayer;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.sounds.SoundEvents;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.sounds.SoundSource;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.entity.Entity;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.entity.EntitySelector;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.item.ItemStack;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.Level;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.Block;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.entity.BlockEntity;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.state.BlockState;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.material.FluidState;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.storage.loot.LootParams;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.storage.loot.parameters.LootContextParams;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.phys.AABB;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.phys.Vec3;</span><br><span class="line"><span class="keyword">import</span> net.neoforged.bus.api.SubscribeEvent;</span><br><span class="line"><span class="keyword">import</span> net.neoforged.neoforge.common.NeoForge;</span><br><span class="line"><span class="keyword">import</span> net.neoforged.neoforge.event.EventHooks;</span><br><span class="line"><span class="keyword">import</span> net.neoforged.neoforge.event.TickEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exploder</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">double</span> r;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">double</span> rr;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> dist;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">double</span> explosionStrength;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> blocksPerIteration;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> x, y, z;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">final</span> Level world;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Entity exploder;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> WoodBallExplosion explosion;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> currentRadius;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> curX, curY, curZ;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> List&lt;ItemStack&gt; droppedItems; <span class="comment">// map containing all items dropped by the explosion and their amounts</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 构造方法</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> world 爆炸的level</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> explosion 爆炸对象的引用</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> exploder 触发爆炸的实体</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> location 爆炸的中心位置</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> r  爆炸半径</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> explosionStrength 爆炸的破坏力</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> blocksPerIteration 每次迭代处理的方块次数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Exploder</span><span class="params">(Level world, WoodBallExplosion explosion, Entity exploder, BlockPos location, <span class="type">double</span> r, <span class="type">double</span> explosionStrength, <span class="type">int</span> blocksPerIteration)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.r = r;</span><br><span class="line">    <span class="built_in">this</span>.world = world;</span><br><span class="line">    <span class="built_in">this</span>.explosion = explosion;</span><br><span class="line">    <span class="built_in">this</span>.exploder = exploder;</span><br><span class="line">    <span class="built_in">this</span>.rr = r * r;</span><br><span class="line">    <span class="built_in">this</span>.dist = (<span class="type">int</span>) r + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">this</span>.explosionStrength = explosionStrength;</span><br><span class="line">    <span class="built_in">this</span>.blocksPerIteration = blocksPerIteration;</span><br><span class="line">    <span class="built_in">this</span>.currentRadius = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.x = location.getX();</span><br><span class="line">    <span class="built_in">this</span>.y = location.getY();</span><br><span class="line">    <span class="built_in">this</span>.z = location.getZ();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.curX = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">this</span>.curY = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">this</span>.curZ = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.droppedItems = Lists.newArrayList();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 启动爆炸 静态方法</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> world 爆炸的level</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> explosion 爆炸的引用</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> entity 爆炸的实体</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> location 爆炸的位置</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> r  爆炸的半径</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> explosionStrength 爆炸的强度</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">startExplosion</span><span class="params">(Level world, WoodBallExplosion explosion, Entity entity, BlockPos location, <span class="type">double</span> r, <span class="type">double</span> explosionStrength)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建类</span></span><br><span class="line">    <span class="type">Exploder</span> <span class="variable">exploder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Exploder</span>(world, explosion, entity, location, r, explosionStrength, Math.max(<span class="number">50</span>, (<span class="type">int</span>) (r * r * r / <span class="number">10d</span>)));</span><br><span class="line">    <span class="comment">// 提前处理爆炸范围内的实体</span></span><br><span class="line">    exploder.handleEntities();</span><br><span class="line">    <span class="comment">// 播放爆炸的声音</span></span><br><span class="line">    world.playSound(<span class="literal">null</span>, location, SoundEvents.GENERIC_EXPLODE, SoundSource.BLOCKS, <span class="number">4.0F</span>, (<span class="number">1.0F</span> + (world.random.nextFloat() - world.random.nextFloat()) * <span class="number">0.2F</span>) * <span class="number">0.7F</span>);</span><br><span class="line">    <span class="comment">// 在事件总线上注册exploer，用于在tick时迭代处理</span></span><br><span class="line">    NeoForge.EVENT_BUS.register(exploder);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 处理爆炸涉及到的实体</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleEntities</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 定义了一个Predicate判断条件，用于过滤实体</span></span><br><span class="line">    <span class="keyword">final</span> Predicate&lt;Entity&gt; predicate = entity -&gt; entity != <span class="literal">null</span></span><br><span class="line">      &amp;&amp; !entity.ignoreExplosion()</span><br><span class="line">      &amp;&amp; EntitySelector.NO_SPECTATORS.test(entity)</span><br><span class="line">      &amp;&amp; EntitySelector.ENTITY_STILL_ALIVE.test(entity)</span><br><span class="line">      &amp;&amp; entity.position().distanceToSqr(<span class="built_in">this</span>.x, <span class="built_in">this</span>.y, <span class="built_in">this</span>.z) &lt;= <span class="built_in">this</span>.r * <span class="built_in">this</span>.r;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用Predicate获得爆炸范围内的实体</span></span><br><span class="line">    <span class="comment">// damage and blast back entities</span></span><br><span class="line">    List&lt;Entity&gt; list = <span class="built_in">this</span>.world.getEntities(<span class="built_in">this</span>.exploder,</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">AABB</span>(<span class="built_in">this</span>.x - <span class="built_in">this</span>.r - <span class="number">1</span>,</span><br><span class="line">        <span class="built_in">this</span>.y - <span class="built_in">this</span>.r - <span class="number">1</span>,</span><br><span class="line">        <span class="built_in">this</span>.z - <span class="built_in">this</span>.r - <span class="number">1</span>,</span><br><span class="line">        <span class="built_in">this</span>.x + <span class="built_in">this</span>.r + <span class="number">1</span>,</span><br><span class="line">        <span class="built_in">this</span>.y + <span class="built_in">this</span>.r + <span class="number">1</span>,</span><br><span class="line">        <span class="built_in">this</span>.z + <span class="built_in">this</span>.r + <span class="number">1</span>),</span><br><span class="line">      predicate</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 触发爆炸开始事件</span></span><br><span class="line">    EventHooks.onExplosionDetonate(<span class="built_in">this</span>.world, <span class="built_in">this</span>.explosion, list, <span class="built_in">this</span>.r * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Entity entity : list) &#123;</span><br><span class="line">      <span class="comment">// move it away from the center depending on distance and explosion strength</span></span><br><span class="line">      <span class="comment">// 计算爆炸中心到实体方向的向量dir</span></span><br><span class="line">      <span class="type">Vec3</span> <span class="variable">dir</span> <span class="operator">=</span> entity.position().subtract(<span class="built_in">this</span>.exploder.position().add(<span class="number">0</span>, -<span class="built_in">this</span>.r / <span class="number">2</span>, <span class="number">0</span>));</span><br><span class="line">      <span class="comment">// 计算实体距离爆炸中心的距离占爆炸半径的比例，作为震动系数str</span></span><br><span class="line">      <span class="type">double</span> <span class="variable">str</span> <span class="operator">=</span> (<span class="built_in">this</span>.r - dir.length()) / <span class="built_in">this</span>.r;</span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      str = Math.max(<span class="number">0.3</span>, str);</span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      dir = dir.normalize();</span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      dir = dir.scale(<span class="built_in">this</span>.explosionStrength * str * <span class="number">0.3</span>);</span><br><span class="line">      <span class="comment">// 给实体添加一个dir的力</span></span><br><span class="line">      entity.push(dir.x, dir.y + <span class="number">0.5</span>, dir.z);</span><br><span class="line">      <span class="comment">// 实体受伤</span></span><br><span class="line">      entity.hurt(entity.damageSources().explosion(<span class="built_in">this</span>.explosion), (<span class="type">float</span>) (str * <span class="built_in">this</span>.explosionStrength));</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (entity <span class="keyword">instanceof</span> ServerPlayer) &#123;</span><br><span class="line"><span class="comment">//        TinkerNetwork.getInstance().sendTo(new EntityMovementChangePacket(entity), (ServerPlayer) entity);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * tick执行</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> event 世界Tick回调事件</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@SubscribeEvent</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onTick</span><span class="params">(TickEvent.LevelTickEvent event)</span> &#123;</span><br><span class="line">    <span class="comment">// 给定世界Tick结束时候回调</span></span><br><span class="line">      <span class="keyword">if</span>(event.level == <span class="built_in">this</span>.world &amp;&amp; event.phase == TickEvent.Phase.END)&#123;</span><br><span class="line">        <span class="comment">// 调用iteration进行一次爆炸迭代，返回false表示爆炸结束，放置范围过大，导致一次破坏方块过多卡死</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">this</span>.iteration())&#123;</span><br><span class="line">          <span class="comment">// 爆炸结束，调用finish</span></span><br><span class="line">          <span class="built_in">this</span>.finish();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 爆炸结束下执行</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">finish</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 爆炸半径的一半</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> (<span class="type">int</span>) <span class="built_in">this</span>.r / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 根据爆炸中心和爆炸半径计算掉落的中心位置</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">BlockPos</span> <span class="variable">pos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BlockPos</span>(<span class="built_in">this</span>.x - d, <span class="built_in">this</span>.y - d, <span class="built_in">this</span>.z - d);</span><br><span class="line">    <span class="comment">// 创建随机数生成器</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    <span class="comment">// 创建列表存储掉落的物品</span></span><br><span class="line">    List&lt;ItemStack&gt; aggregatedDrops = Lists.newArrayList();</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">for</span> (ItemStack drop : <span class="built_in">this</span>.droppedItems) &#123;</span><br><span class="line">      <span class="type">boolean</span> <span class="variable">notInList</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// check if it&#x27;s already in our list</span></span><br><span class="line">      <span class="comment">// 检查是否在列表中，如果在则合并数量</span></span><br><span class="line">      <span class="keyword">for</span> (ItemStack stack : aggregatedDrops) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ItemStack.isSameItem(drop, stack) &amp;&amp; ItemStack.isSameItemSameTags(drop, stack)) &#123;</span><br><span class="line">          stack.grow(drop.getCount());</span><br><span class="line">          notInList = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (notInList) &#123;</span><br><span class="line">        aggregatedDrops.add(drop);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// actually drop the aggregated items</span></span><br><span class="line">    <span class="comment">// 遍历合在一起的物品，分批掉落</span></span><br><span class="line">    <span class="keyword">for</span> (ItemStack drop : aggregatedDrops) &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">stacksize</span> <span class="operator">=</span> drop.getCount();</span><br><span class="line">      <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="type">BlockPos</span> <span class="variable">spawnPos</span> <span class="operator">=</span> pos.offset(random.nextInt((<span class="type">int</span>) <span class="built_in">this</span>.r), random.nextInt((<span class="type">int</span>) <span class="built_in">this</span>.r), random.nextInt((<span class="type">int</span>) <span class="built_in">this</span>.r));</span><br><span class="line">        <span class="type">ItemStack</span> <span class="variable">dropItemstack</span> <span class="operator">=</span> drop.copy();</span><br><span class="line">        dropItemstack.setCount(Math.min(stacksize, <span class="number">64</span>));</span><br><span class="line">        Block.popResource(<span class="built_in">this</span>.world, spawnPos, dropItemstack);</span><br><span class="line">        stacksize -= dropItemstack.getCount();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> (stacksize &gt; <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 取消事件总线上的注册</span></span><br><span class="line">    NeoForge.EVENT_BUS.unregister(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Explodes away all blocks for the current iteration</span></span><br><span class="line"><span class="comment">   * 每次迭代执行</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">iteration</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 本次迭代的方块个数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 清除上次的迭代处理的方块</span></span><br><span class="line">    <span class="built_in">this</span>.explosion.clearToBlow();</span><br><span class="line">    <span class="comment">// 当处理方块小于每次迭代方块，并且当前半径小于爆炸半径r</span></span><br><span class="line">    <span class="keyword">while</span> (count &lt; <span class="built_in">this</span>.blocksPerIteration &amp;&amp; <span class="built_in">this</span>.currentRadius &lt; (<span class="type">int</span>) <span class="built_in">this</span>.r + <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="built_in">this</span>.curX * <span class="built_in">this</span>.curX + <span class="built_in">this</span>.curY * <span class="built_in">this</span>.curY + <span class="built_in">this</span>.curZ * <span class="built_in">this</span>.curZ;</span><br><span class="line">      <span class="comment">// inside the explosion?</span></span><br><span class="line">      <span class="comment">// 当前位置是否在爆炸范围内</span></span><br><span class="line">      <span class="keyword">if</span> (d &lt;= <span class="built_in">this</span>.rr) &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="type">BlockPos</span> <span class="variable">blockpos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BlockPos</span>(<span class="built_in">this</span>.x + <span class="built_in">this</span>.curX, <span class="built_in">this</span>.y + <span class="built_in">this</span>.curY, <span class="built_in">this</span>.z + <span class="built_in">this</span>.curZ);</span><br><span class="line">        <span class="type">BlockState</span> <span class="variable">blockState</span> <span class="operator">=</span> <span class="built_in">this</span>.world.getBlockState(blockpos);</span><br><span class="line">        <span class="type">FluidState</span> <span class="variable">ifluidstate</span> <span class="operator">=</span> <span class="built_in">this</span>.world.getFluidState(blockpos);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// no air blocks</span></span><br><span class="line">        <span class="comment">// 如果不是方块 或者流体不为空。</span></span><br><span class="line">        <span class="keyword">if</span> (!blockState.isAir() || !ifluidstate.isEmpty()) &#123;</span><br><span class="line">          <span class="comment">// explosion &quot;strength&quot; at the current position</span></span><br><span class="line">          <span class="comment">// 随着爆炸范围的扩展爆炸强度减小</span></span><br><span class="line">          <span class="type">double</span> <span class="variable">f</span> <span class="operator">=</span> <span class="built_in">this</span>.explosionStrength * (<span class="number">1f</span> - d / <span class="built_in">this</span>.rr);</span><br><span class="line">          <span class="comment">// 获得方块或者液体的抗爆炸强度</span></span><br><span class="line">          <span class="type">float</span> <span class="variable">f2</span> <span class="operator">=</span> Math.max(blockState.getExplosionResistance(<span class="built_in">this</span>.world, blockpos, <span class="built_in">this</span>.explosion), ifluidstate.getExplosionResistance(<span class="built_in">this</span>.world, blockpos, <span class="built_in">this</span>.explosion));</span><br><span class="line">          <span class="comment">// 如果当前产生爆炸的实体不为空</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">this</span>.exploder != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 获得当前产生爆炸实体的抗爆炸能力</span></span><br><span class="line">            f2 = <span class="built_in">this</span>.exploder.getBlockExplosionResistance(<span class="built_in">this</span>.explosion, <span class="built_in">this</span>.world, blockpos, blockState, ifluidstate, f2);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 判断是否抗爆炸</span></span><br><span class="line">          f -= (f2 + <span class="number">0.3F</span>) * <span class="number">0.3F</span>;</span><br><span class="line">          <span class="comment">// 如果该方块应该被炸坏</span></span><br><span class="line">          <span class="keyword">if</span> (f &gt; <span class="number">0.0F</span> &amp;&amp; (<span class="built_in">this</span>.exploder == <span class="literal">null</span> || <span class="built_in">this</span>.exploder.shouldBlockExplode(<span class="built_in">this</span>.explosion, <span class="built_in">this</span>.world, blockpos, blockState, (<span class="type">float</span>) f))) &#123;</span><br><span class="line">            <span class="comment">// block should be exploded</span></span><br><span class="line">            <span class="comment">// 爆炸方块++</span></span><br><span class="line">            count++;</span><br><span class="line">            <span class="comment">// 将该方块添加到列表中</span></span><br><span class="line">            <span class="built_in">this</span>.explosion.addAffectedBlock(blockpos);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// get next coordinate;</span></span><br><span class="line">      <span class="built_in">this</span>.step();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 触发爆炸事件</span></span><br><span class="line">    EventHooks.onExplosionDetonate(<span class="built_in">this</span>.world, <span class="built_in">this</span>.explosion, Collections.emptyList(), <span class="built_in">this</span>.r * <span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 对每个记录的方块处理</span></span><br><span class="line">    <span class="built_in">this</span>.explosion.getToBlow().forEach(<span class="built_in">this</span>::explodeBlock);</span><br><span class="line">    <span class="comment">// 处理方块是否达到上限</span></span><br><span class="line">    <span class="keyword">return</span> count == <span class="built_in">this</span>.blocksPerIteration; <span class="comment">// can lead to 1 more call where nothing is done, but that&#x27;s ok</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// get the next coordinate</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 计算下一个block坐标</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">step</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// we go X/Z plane wise from top to bottom</span></span><br><span class="line">    <span class="keyword">if</span> (++<span class="built_in">this</span>.curX &gt; <span class="built_in">this</span>.currentRadius) &#123;</span><br><span class="line">      <span class="built_in">this</span>.curX = -<span class="built_in">this</span>.currentRadius;</span><br><span class="line">      <span class="keyword">if</span> (++<span class="built_in">this</span>.curZ &gt; <span class="built_in">this</span>.currentRadius) &#123;</span><br><span class="line">        <span class="built_in">this</span>.curZ = -<span class="built_in">this</span>.currentRadius;</span><br><span class="line">        <span class="keyword">if</span> (--<span class="built_in">this</span>.curY &lt; -<span class="built_in">this</span>.currentRadius) &#123;</span><br><span class="line">          <span class="built_in">this</span>.currentRadius++;</span><br><span class="line">          <span class="built_in">this</span>.curX = <span class="built_in">this</span>.curZ = -<span class="built_in">this</span>.currentRadius;</span><br><span class="line">          <span class="built_in">this</span>.curY = <span class="built_in">this</span>.currentRadius;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// we skip the internals</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.curY != -<span class="built_in">this</span>.currentRadius &amp;&amp; <span class="built_in">this</span>.curY != <span class="built_in">this</span>.currentRadius) &#123;</span><br><span class="line">      <span class="comment">// we&#x27;re not in the top or bottom plane</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.curZ != -<span class="built_in">this</span>.currentRadius &amp;&amp; <span class="built_in">this</span>.curZ != <span class="built_in">this</span>.currentRadius) &#123;</span><br><span class="line">        <span class="comment">// we&#x27;re not in the X/Y planes of the cube, we can therefore skip the x to the end if we&#x27;re inside</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.curX &gt; -<span class="built_in">this</span>.currentRadius) &#123;</span><br><span class="line">          <span class="built_in">this</span>.curX = <span class="built_in">this</span>.currentRadius;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 处理单个爆炸方块</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> blockpos</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">explodeBlock</span><span class="params">(BlockPos blockpos)</span> &#123;</span><br><span class="line">    <span class="type">BlockState</span> <span class="variable">blockstate</span> <span class="operator">=</span> <span class="built_in">this</span>.world.getBlockState(blockpos);</span><br><span class="line">    <span class="comment">// 将该方块的掉落物添加到list中</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.world.isClientSide &amp;&amp; blockstate.canDropFromExplosion(<span class="built_in">this</span>.world, blockpos, <span class="built_in">this</span>.explosion)) &#123;</span><br><span class="line">      <span class="type">BlockEntity</span> <span class="variable">tileentity</span> <span class="operator">=</span> blockstate.hasBlockEntity() ? <span class="built_in">this</span>.world.getBlockEntity(blockpos) : <span class="literal">null</span>;</span><br><span class="line">      LootParams.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> (<span class="keyword">new</span> <span class="title class_">LootParams</span>.Builder((ServerLevel) <span class="built_in">this</span>.world)).withParameter(LootContextParams.ORIGIN, Vec3.atCenterOf(blockpos)).withParameter(LootContextParams.TOOL, ItemStack.EMPTY).withOptionalParameter(LootContextParams.BLOCK_ENTITY, tileentity);</span><br><span class="line"></span><br><span class="line">      <span class="built_in">this</span>.droppedItems.addAll(blockstate.getDrops(builder));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在该方块位置生成粒子效果</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.world <span class="keyword">instanceof</span> ServerLevel) &#123;</span><br><span class="line">      <span class="keyword">for</span> (ServerPlayer serverplayerentity : ((ServerLevel) <span class="built_in">this</span>.world).players()) &#123;</span><br><span class="line">        ((ServerLevel) <span class="built_in">this</span>.world).sendParticles(serverplayerentity, ParticleTypes.POOF, <span class="literal">true</span>, blockpos.getX(), blockpos.getY(), blockpos.getZ(), <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0d</span>);</span><br><span class="line">        ((ServerLevel) <span class="built_in">this</span>.world).sendParticles(serverplayerentity, ParticleTypes.SMOKE, <span class="literal">true</span>, blockpos.getX(), blockpos.getY(), blockpos.getZ(), <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0d</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 方块爆炸</span></span><br><span class="line">    blockstate.onBlockExploded(<span class="built_in">this</span>.world, blockpos, <span class="built_in">this</span>.explosion);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>该类进行了修改，添加了两个方法，修复了为什么爆炸不破坏的原因。</p><p>explosion类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.examplemod.entity.custom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.ImmutableSet;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Maps;</span><br><span class="line"><span class="keyword">import</span> com.mojang.datafixers.util.Pair;</span><br><span class="line"><span class="keyword">import</span> it.unimi.dsi.fastutil.objects.ObjectArrayList;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.Util;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.core.BlockPos;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.core.particles.ParticleTypes;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.server.level.ServerLevel;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.sounds.SoundEvents;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.sounds.SoundSource;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.util.RandomSource;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.damagesource.DamageSource;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.entity.Entity;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.entity.item.ItemEntity;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.entity.player.Player;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.item.ItemStack;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.EntityBasedExplosionDamageCalculator;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.Explosion;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.ExplosionDamageCalculator;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.Level;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.Block;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.entity.BlockEntity;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.state.BlockState;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.material.FluidState;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.storage.loot.LootContext;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.storage.loot.LootParams;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.storage.loot.parameters.LootContextParamSets;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.storage.loot.parameters.LootContextParams;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.phys.Vec3;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.core.jmx.Server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WoodBallExplosion</span> <span class="keyword">extends</span> <span class="title class_">Explosion</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExplosionDamageCalculator</span> <span class="variable">EXPLOSION_DAMAGE_CALCULATOR</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExplosionDamageCalculator</span>();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_DROPS_PER_COMBINED_STACK</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">boolean</span> fire;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Explosion.BlockInteraction blockInteraction;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">RandomSource</span> <span class="variable">random</span> <span class="operator">=</span> RandomSource.create();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Level level;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">double</span> x;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">double</span> y;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">double</span> z;</span><br><span class="line">  <span class="meta">@Nullable</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Entity source;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">float</span> radius;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> DamageSource damageSource;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ExplosionDamageCalculator damageCalculator;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ObjectArrayList&lt;BlockPos&gt; toBlow = <span class="keyword">new</span> <span class="title class_">ObjectArrayList</span>&lt;&gt;();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Player, Vec3&gt; hitPlayers = Maps.newHashMap();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Vec3 position;</span><br><span class="line">  <span class="keyword">protected</span> ImmutableSet&lt;BlockPos&gt; affectedBlockPositionsInternal;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">WoodBallExplosion</span><span class="params">(Level world, <span class="meta">@Nullable</span> Entity entity, <span class="meta">@Nullable</span> DamageSource damage, <span class="meta">@Nullable</span> ExplosionDamageCalculator context, <span class="type">double</span> x, <span class="type">double</span> y, <span class="type">double</span> z, <span class="type">float</span> size, <span class="type">boolean</span> causesFire, Explosion.BlockInteraction mode)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(world, entity, damage, context, x, y, z, size, causesFire, mode);</span><br><span class="line">    <span class="built_in">this</span>.level = world;</span><br><span class="line">    <span class="built_in">this</span>.source = entity;</span><br><span class="line">    <span class="built_in">this</span>.radius = size;</span><br><span class="line">    <span class="built_in">this</span>.x = x;</span><br><span class="line">    <span class="built_in">this</span>.y = y;</span><br><span class="line">    <span class="built_in">this</span>.z = z;</span><br><span class="line">    <span class="built_in">this</span>.fire = causesFire;</span><br><span class="line">    <span class="built_in">this</span>.blockInteraction = mode;</span><br><span class="line">    <span class="built_in">this</span>.damageSource = damage == <span class="literal">null</span> ? world.damageSources().explosion(<span class="built_in">this</span>) : damage;</span><br><span class="line">    <span class="built_in">this</span>.damageCalculator = context == <span class="literal">null</span> ? <span class="built_in">this</span>.makeDamageCalculator(entity) : context;</span><br><span class="line">    <span class="built_in">this</span>.position = <span class="keyword">new</span> <span class="title class_">Vec3</span>(<span class="built_in">this</span>.x, <span class="built_in">this</span>.y, <span class="built_in">this</span>.z);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> ExplosionDamageCalculator <span class="title function_">makeDamageCalculator</span><span class="params">(<span class="meta">@Nullable</span> Entity p_46063_)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (ExplosionDamageCalculator)(p_46063_ == <span class="literal">null</span> ? EXPLOSION_DAMAGE_CALCULATOR : <span class="keyword">new</span> <span class="title class_">EntityBasedExplosionDamageCalculator</span>(p_46063_));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Does the first part of the explosion (destroy blocks)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">explode</span><span class="params">()</span> &#123; <span class="comment">// 未执行</span></span><br><span class="line">    ImmutableSet.Builder&lt;BlockPos&gt; builder = ImmutableSet.builder();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// we do a sphere of a certain radius, and check if the blockpos is inside the radius</span></span><br><span class="line">    <span class="type">float</span> <span class="variable">r</span> <span class="operator">=</span> <span class="built_in">this</span>.radius * <span class="built_in">this</span>.radius;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (<span class="type">int</span>) r + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> -i; j &lt; i; ++j) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> -i; k &lt; i; ++k) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> -i; l &lt; i; ++l) &#123;</span><br><span class="line">          <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> j * j + k * k + l * l;</span><br><span class="line">          <span class="comment">// inside the sphere?</span></span><br><span class="line">          <span class="keyword">if</span> (d &lt;= r) &#123;</span><br><span class="line">            <span class="type">BlockPos</span> <span class="variable">blockpos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BlockPos</span>(j, k, l).offset((<span class="type">int</span>) <span class="built_in">this</span>.x, (<span class="type">int</span>) <span class="built_in">this</span>.y, (<span class="type">int</span>) <span class="built_in">this</span>.z);</span><br><span class="line">            <span class="comment">// no air blocks</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.level.isEmptyBlock(blockpos)) &#123;</span><br><span class="line">              <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// explosion &quot;strength&quot; at the current position</span></span><br><span class="line">            <span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="built_in">this</span>.radius * (<span class="number">1f</span> - d / (r));</span><br><span class="line">            <span class="type">BlockState</span> <span class="variable">blockstate</span> <span class="operator">=</span> <span class="built_in">this</span>.level.getBlockState(blockpos);</span><br><span class="line"></span><br><span class="line">            <span class="type">FluidState</span> <span class="variable">ifluidstate</span> <span class="operator">=</span> <span class="built_in">this</span>.level.getFluidState(blockpos);</span><br><span class="line">            <span class="type">float</span> <span class="variable">f2</span> <span class="operator">=</span> Math.max(blockstate.getExplosionResistance(<span class="built_in">this</span>.level, blockpos, <span class="built_in">this</span>), ifluidstate.getExplosionResistance(<span class="built_in">this</span>.level, blockpos, <span class="built_in">this</span>));</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.source != <span class="literal">null</span>) &#123;</span><br><span class="line">              f2 = <span class="built_in">this</span>.source.getBlockExplosionResistance(<span class="built_in">this</span>, <span class="built_in">this</span>.level, blockpos, blockstate, ifluidstate, f2);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            f -= (f2 + <span class="number">0.3F</span>) * <span class="number">0.3F</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (f &gt; <span class="number">0.0F</span> &amp;&amp; (<span class="built_in">this</span>.source == <span class="literal">null</span> || <span class="built_in">this</span>.source.shouldBlockExplode(<span class="built_in">this</span>, <span class="built_in">this</span>.level, blockpos, blockstate, f))) &#123;</span><br><span class="line">              builder.add(blockpos);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.affectedBlockPositionsInternal = builder.build();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">finalizeExplosion</span><span class="params">(<span class="type">boolean</span> spawnParticles)</span> &#123;  <span class="comment">// 未执行</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.level.isClientSide) &#123;</span><br><span class="line">      <span class="built_in">this</span>.level.playLocalSound(<span class="built_in">this</span>.x, <span class="built_in">this</span>.y, <span class="built_in">this</span>.z, SoundEvents.GENERIC_EXPLODE, SoundSource.BLOCKS, <span class="number">4.0F</span>, (<span class="number">1.0F</span> + (<span class="built_in">this</span>.level.random.nextFloat() - <span class="built_in">this</span>.level.random.nextFloat()) * <span class="number">0.2F</span>) * <span class="number">0.7F</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.level.addParticle(ParticleTypes.EXPLOSION, <span class="built_in">this</span>.x, <span class="built_in">this</span>.y, <span class="built_in">this</span>.z, <span class="number">1.0D</span>, <span class="number">0.0D</span>, <span class="number">0.0D</span>);</span><br><span class="line"></span><br><span class="line">    ObjectArrayList&lt;Pair&lt;ItemStack, BlockPos&gt;&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ObjectArrayList</span>&lt;&gt;();</span><br><span class="line">    Util.shuffle(<span class="built_in">this</span>.toBlow, <span class="built_in">this</span>.level.random);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (BlockPos blockpos : <span class="built_in">this</span>.toBlow) &#123;</span><br><span class="line">      <span class="type">BlockState</span> <span class="variable">blockstate</span> <span class="operator">=</span> <span class="built_in">this</span>.level.getBlockState(blockpos);</span><br><span class="line">      <span class="type">Block</span> <span class="variable">block</span> <span class="operator">=</span> blockstate.getBlock();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!blockstate.isAir()) &#123;</span><br><span class="line">        <span class="type">BlockPos</span> <span class="variable">blockpos1</span> <span class="operator">=</span> blockpos.immutable();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.level.getProfiler().push(<span class="string">&quot;explosion_blocks&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (blockstate.canDropFromExplosion(<span class="built_in">this</span>.level, blockpos, <span class="built_in">this</span>) &amp;&amp; <span class="built_in">this</span>.level <span class="keyword">instanceof</span> ServerLevel) &#123;</span><br><span class="line">          <span class="type">BlockEntity</span> <span class="variable">tileentity</span> <span class="operator">=</span> blockstate.hasBlockEntity() ? <span class="built_in">this</span>.level.getBlockEntity(blockpos) : <span class="literal">null</span>;</span><br><span class="line">          LootParams.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> (<span class="keyword">new</span> <span class="title class_">LootParams</span>.Builder((ServerLevel) level)).withParameter(LootContextParams.ORIGIN, Vec3.atCenterOf(blockpos)).withParameter(LootContextParams.TOOL, ItemStack.EMPTY).withOptionalParameter(LootContextParams.BLOCK_ENTITY, tileentity).withOptionalParameter(LootContextParams.THIS_ENTITY, <span class="built_in">this</span>.source);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">this</span>.blockInteraction == Explosion.BlockInteraction.DESTROY) &#123;</span><br><span class="line">            builder.withParameter(LootContextParams.EXPLOSION_RADIUS, <span class="built_in">this</span>.radius);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          blockstate.getDrops(builder).forEach((stack) -&gt; addStack(arrayList, stack, blockpos1));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        blockstate.onBlockExploded(<span class="built_in">this</span>.level, blockpos, <span class="built_in">this</span>);</span><br><span class="line">        <span class="built_in">this</span>.level.getProfiler().pop();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAffectedBlock</span><span class="params">(BlockPos blockPos)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.toBlow.add(blockPos);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addStack</span><span class="params">(ObjectArrayList&lt;Pair&lt;ItemStack, BlockPos&gt;&gt; arrayList, ItemStack merge, BlockPos blockPos)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arrayList.size();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; ++j) &#123;</span><br><span class="line">      Pair&lt;ItemStack, BlockPos&gt; pair = arrayList.get(j);</span><br><span class="line">      <span class="type">ItemStack</span> <span class="variable">itemstack</span> <span class="operator">=</span> pair.getFirst();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (ItemEntity.areMergable(itemstack, merge)) &#123;</span><br><span class="line">        <span class="type">ItemStack</span> <span class="variable">itemstack1</span> <span class="operator">=</span> ItemEntity.merge(itemstack, merge, <span class="number">16</span>);</span><br><span class="line">        arrayList.set(j, Pair.of(itemstack1, pair.getSecond()));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (merge.isEmpty()) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    arrayList.add(Pair.of(merge, blockPos));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> List&lt;BlockPos&gt; <span class="title function_">getToBlow</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.toBlow;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clearToBlow</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.toBlow.clear();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>考虑到尽可能的复用代码，需要对该项目的架构进行设计。需要在考虑下。</p><ul><li>11.8</li></ul><p>基本上想到的几个物品都写出来了，不过还是没采用高代码的复用，而且还希望加如对时运和精准采集的支持，没有复用代码可能导致之后需要改动较多的重复代码。</p><p>还不知道怎么支持时运和精准采集</p><p>其次还需要画贴图和加入合成表。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 我的世界 </tag>
            
            <tag> 模组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Architectury-09-添加村民，添加村民交易</title>
      <link href="/2023/10/29/Architectury-09-%E6%B7%BB%E5%8A%A0%E6%9D%91%E6%B0%91%EF%BC%8C%E6%B7%BB%E5%8A%A0%E6%9D%91%E6%B0%91%E4%BA%A4%E6%98%93/"/>
      <url>/2023/10/29/Architectury-09-%E6%B7%BB%E5%8A%A0%E6%9D%91%E6%B0%91%EF%BC%8C%E6%B7%BB%E5%8A%A0%E6%9D%91%E6%B0%91%E4%BA%A4%E6%98%93/</url>
      
        <content type="html"><![CDATA[<h1 id="添加村民"><a href="#添加村民" class="headerlink" title="添加村民"></a>添加村民</h1><p><img src="https://s2.loli.net/2023/11/01/gFCvuDV3jacRL2w.png" alt="image-20231101192249502"></p><p><img src="https://s2.loli.net/2023/11/01/84FLulXN1qeEf6H.png" alt="image-20231101192306590"></p><p><img src="https://s2.loli.net/2023/11/01/5rITKJ6wH4Q7Wlo.png" alt="image-20231101192318126"></p><p><img src="https://s2.loli.net/2023/11/01/arsgJvw8TetW59S.png" alt="image-20231101192327155"></p><h1 id="添加村民职业和工作方块"><a href="#添加村民职业和工作方块" class="headerlink" title="添加村民职业和工作方块"></a>添加村民职业和工作方块</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> net.tutorialmod.villager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.ImmutableSet;</span><br><span class="line"><span class="keyword">import</span> dev.architectury.registry.registries.DeferredRegister;</span><br><span class="line"><span class="keyword">import</span> dev.architectury.registry.registries.RegistrySupplier;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.core.registries.Registries;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.resources.ResourceKey;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.resources.ResourceLocation;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.sounds.SoundEvents;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.entity.ai.village.poi.PoiType;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.entity.npc.VillagerProfession;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.entity.npc.VillagerType;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.TutorialMod;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.block.ModBlock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModVillagers</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ResourceKey&lt;PoiType&gt; JUMPY_MASTER_KEY = createKey(<span class="string">&quot;jumpy_block_poi&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DeferredRegister&lt;VillagerProfession&gt; VILLAGER_PROFESSIONS = DeferredRegister.create(TutorialMod.MOD_ID, Registries.VILLAGER_PROFESSION);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DeferredRegister&lt;PoiType&gt; POI_TYPES = DeferredRegister.create(TutorialMod.MOD_ID, Registries.POINT_OF_INTEREST_TYPE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistrySupplier&lt;PoiType&gt; JUMPY_BLOCK_POI = POI_TYPES.register(<span class="string">&quot;jumpy_block_poi&quot;</span>,</span><br><span class="line">            () -&gt; <span class="keyword">new</span> <span class="title class_">PoiType</span>(ImmutableSet.copyOf(ModBlock.JUMPY_BLOCK.get().getStateDefinition().getPossibleStates()),</span><br><span class="line">                    <span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistrySupplier&lt;VillagerProfession&gt; JUMP_MASTER = VILLAGER_PROFESSIONS.register(<span class="string">&quot;jumpy_master&quot;</span>,</span><br><span class="line">            () -&gt; <span class="keyword">new</span> <span class="title class_">VillagerProfession</span>(<span class="string">&quot;jumpy_master&quot;</span>, x -&gt; x.value() == JUMPY_BLOCK_POI.get(),</span><br><span class="line">                    x -&gt; x.value() == JUMPY_BLOCK_POI.get(), ImmutableSet.of(), ImmutableSet.of(),</span><br><span class="line">                    SoundEvents.VILLAGER_WORK_ARMORER));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ResourceKey&lt;PoiType&gt; <span class="title function_">createKey</span><span class="params">(String pName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResourceKey.create(Registries.POINT_OF_INTEREST_TYPE, <span class="keyword">new</span> <span class="title class_">ResourceLocation</span>(TutorialMod.MOD_ID,pName));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">()</span> &#123;</span><br><span class="line">        POI_TYPES.register();</span><br><span class="line">        VILLAGER_PROFESSIONS.register();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> net.tutorialmod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.base.Suppliers;</span><br><span class="line"><span class="keyword">import</span> dev.architectury.registry.CreativeTabRegistry;</span><br><span class="line"><span class="keyword">import</span> dev.architectury.registry.registries.DeferredRegister;</span><br><span class="line"><span class="keyword">import</span> dev.architectury.registry.registries.RegistrarManager;</span><br><span class="line"><span class="keyword">import</span> dev.architectury.registry.registries.RegistrySupplier;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.core.registries.Registries;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.network.chat.Component;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.item.CreativeModeTab;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.item.Item;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.item.ItemStack;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.block.ModBlock;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.item.ModCreativeTab;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.item.ModItem;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.painting.ModPainting;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.villager.ModVillagers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TutorialMod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MOD_ID</span> <span class="operator">=</span> <span class="string">&quot;tutorialmod&quot;</span>;</span><br><span class="line">    <span class="comment">// We can use this if we don&#x27;t want to use DeferredRegister</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Supplier&lt;RegistrarManager&gt; REGISTRIES = Suppliers.memoize(() -&gt; RegistrarManager.get(MOD_ID));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        ModCreativeTab.register();</span><br><span class="line">        ModBlock.register();</span><br><span class="line">        ModItem.register();</span><br><span class="line">        ModPainting.register();</span><br><span class="line">        ModVillagers.register();</span><br><span class="line"></span><br><span class="line">        System.out.println(TutorialModExpectPlatform.getConfigDirectory().toAbsolutePath().normalize().toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="添加村民交易内容"><a href="#添加村民交易内容" class="headerlink" title="添加村民交易内容"></a>添加村民交易内容</h1><p>fabric</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.tutorialmod.fabric.villager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.fabricmc.fabric.api.object.builder.v1.trade.TradeOfferHelper;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.entity.npc.VillagerProfession;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.item.ItemStack;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.item.Items;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.item.trading.MerchantOffer;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.item.ModItem;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.villager.ModVillagers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModFabricVillager</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">registerVillagerTrades</span><span class="params">()</span>&#123;</span><br><span class="line">        TradeOfferHelper.registerVillagerOffers(ModVillagers.JUMP_MASTER.get(),<span class="number">1</span>,</span><br><span class="line">                factories-&gt;&#123;</span><br><span class="line">                    factories.add((entity, randomSource) -&gt; <span class="keyword">new</span> <span class="title class_">MerchantOffer</span>(</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">ItemStack</span>(Items.EMERALD,<span class="number">3</span>),</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">ItemStack</span>(ModItem.EXAMPLE_ITEM.get()),</span><br><span class="line">                            <span class="number">6</span>,<span class="number">2</span>,<span class="number">0.02f</span></span><br><span class="line">                    ));</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        TradeOfferHelper.registerVillagerOffers(VillagerProfession.ARMORER,<span class="number">1</span>,</span><br><span class="line">                factories-&gt;&#123;</span><br><span class="line">                    factories.add((entity, randomSource) -&gt; <span class="keyword">new</span> <span class="title class_">MerchantOffer</span>(</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">ItemStack</span>(Items.EMERALD,<span class="number">3</span>),</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">ItemStack</span>(ModItem.BLUEBERRY.get()),</span><br><span class="line">                            <span class="number">6</span>,<span class="number">2</span>,<span class="number">0.02f</span></span><br><span class="line">                    ));</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> net.tutorialmod.fabric;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.TutorialMod;</span><br><span class="line"><span class="keyword">import</span> net.fabricmc.api.ModInitializer;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.fabric.villager.ModFabricVillager;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.villager.ModVillagers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TutorialModFabric</span> <span class="keyword">implements</span> <span class="title class_">ModInitializer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onInitialize</span><span class="params">()</span> &#123;</span><br><span class="line">        TutorialMod.init();</span><br><span class="line">        ModFabricVillager.registerVillagerTrades();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>forge</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.tutorialmod.forge.event;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> it.unimi.dsi.fastutil.ints.Int2ObjectMap;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.entity.npc.VillagerProfession;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.entity.npc.VillagerTrades;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.item.ItemStack;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.item.Items;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.item.trading.MerchantOffer;</span><br><span class="line"><span class="keyword">import</span> net.minecraftforge.event.village.VillagerTradesEvent;</span><br><span class="line"><span class="keyword">import</span> net.minecraftforge.eventbus.api.SubscribeEvent;</span><br><span class="line"><span class="keyword">import</span> net.minecraftforge.fml.common.Mod;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.TutorialMod;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.item.ModItem;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.villager.ModVillagers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModEvents</span> &#123;</span><br><span class="line">    <span class="meta">@Mod</span>.EventBusSubscriber(modid = TutorialMod.MOD_ID)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ForgeEvent</span>&#123;</span><br><span class="line">        <span class="meta">@SubscribeEvent</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addCustomTrades</span><span class="params">(VillagerTradesEvent event)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(event.getType() == VillagerProfession.TOOLSMITH) &#123;</span><br><span class="line">                Int2ObjectMap&lt;List&lt;VillagerTrades.ItemListing&gt;&gt; trades = event.getTrades();</span><br><span class="line">                <span class="type">ItemStack</span> <span class="variable">stack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ItemStack</span>(ModItem.EXAMPLE_ITEM.get(), <span class="number">1</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">villagerLevel</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                trades.get(villagerLevel).add((trader, rand) -&gt; <span class="keyword">new</span> <span class="title class_">MerchantOffer</span>(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">ItemStack</span>(Items.EMERALD, <span class="number">2</span>),</span><br><span class="line">                        stack,<span class="number">10</span>,<span class="number">8</span>,<span class="number">0.02F</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(event.getType() == ModVillagers.JUMP_MASTER.get()) &#123;</span><br><span class="line">                Int2ObjectMap&lt;List&lt;VillagerTrades.ItemListing&gt;&gt; trades = event.getTrades();</span><br><span class="line">                <span class="type">ItemStack</span> <span class="variable">stack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ItemStack</span>(ModItem.BLUEBERRY.get(), <span class="number">15</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">villagerLevel</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                trades.get(villagerLevel).add((trader, rand) -&gt; <span class="keyword">new</span> <span class="title class_">MerchantOffer</span>(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">ItemStack</span>(Items.EMERALD, <span class="number">5</span>),</span><br><span class="line">                        stack,<span class="number">10</span>,<span class="number">8</span>,<span class="number">0.02F</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="添加tag"><a href="#添加tag" class="headerlink" title="添加tag"></a>添加tag</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;values&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;tutorialmod:jumpy_block_poi&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="添加贴图"><a href="#添加贴图" class="headerlink" title="添加贴图"></a>添加贴图</h1><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      
        <tags>
            
            <tag> 我的世界 </tag>
            
            <tag> 模组 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Architectury-08-添加画</title>
      <link href="/2023/10/29/Architectury-08-%E6%B7%BB%E5%8A%A0%E7%94%BB/"/>
      <url>/2023/10/29/Architectury-08-%E6%B7%BB%E5%8A%A0%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="添加画"><a href="#添加画" class="headerlink" title="添加画"></a>添加画</h1><p><img src="https://s2.loli.net/2023/10/29/eLszt2JiVmAb9dR.png" alt="image-20231029172543488"></p><p><img src="https://s2.loli.net/2023/10/29/XT6xNVYCc7jUlwq.png" alt="image-20231029172640107"></p><h2 id="添加画-1"><a href="#添加画-1" class="headerlink" title="添加画"></a>添加画</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.tutorialmod.painting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dev.architectury.registry.registries.DeferredRegister;</span><br><span class="line"><span class="keyword">import</span> dev.architectury.registry.registries.RegistrySupplier;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.core.registries.Registries;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.entity.decoration.PaintingVariant;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.Block;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.TutorialMod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModPainting</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DeferredRegister&lt;PaintingVariant&gt; PAINTING_VARIANTS = DeferredRegister.create(TutorialMod.MOD_ID, Registries.PAINTING_VARIANT);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistrySupplier&lt;PaintingVariant&gt; PLANT = PAINTING_VARIANTS.register(<span class="string">&quot;plant&quot;</span>,</span><br><span class="line">            () -&gt; <span class="keyword">new</span> <span class="title class_">PaintingVariant</span>(<span class="number">16</span>, <span class="number">16</span>));</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistrySupplier&lt;PaintingVariant&gt; WANDERER = PAINTING_VARIANTS.register(<span class="string">&quot;wanderer&quot;</span>,</span><br><span class="line">            () -&gt; <span class="keyword">new</span> <span class="title class_">PaintingVariant</span>(<span class="number">16</span>, <span class="number">32</span>));</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistrySupplier&lt;PaintingVariant&gt; SUNSET = PAINTING_VARIANTS.register(<span class="string">&quot;sunset&quot;</span>,</span><br><span class="line">            () -&gt; <span class="keyword">new</span> <span class="title class_">PaintingVariant</span>(<span class="number">32</span>, <span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">()</span>&#123;</span><br><span class="line">        PAINTING_VARIANTS.register();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>main类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> net.tutorialmod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.base.Suppliers;</span><br><span class="line"><span class="keyword">import</span> dev.architectury.registry.CreativeTabRegistry;</span><br><span class="line"><span class="keyword">import</span> dev.architectury.registry.registries.DeferredRegister;</span><br><span class="line"><span class="keyword">import</span> dev.architectury.registry.registries.RegistrarManager;</span><br><span class="line"><span class="keyword">import</span> dev.architectury.registry.registries.RegistrySupplier;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.core.registries.Registries;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.network.chat.Component;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.item.CreativeModeTab;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.item.Item;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.item.ItemStack;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.block.ModBlock;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.item.ModCreativeTab;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.item.ModItem;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.painting.ModPainting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TutorialMod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MOD_ID</span> <span class="operator">=</span> <span class="string">&quot;tutorialmod&quot;</span>;</span><br><span class="line">    <span class="comment">// We can use this if we don&#x27;t want to use DeferredRegister</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Supplier&lt;RegistrarManager&gt; REGISTRIES = Suppliers.memoize(() -&gt; RegistrarManager.get(MOD_ID));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        ModCreativeTab.register();</span><br><span class="line">        ModBlock.register();</span><br><span class="line">        ModItem.register();</span><br><span class="line">        ModPainting.register();</span><br><span class="line"></span><br><span class="line">        System.out.println(TutorialModExpectPlatform.getConfigDirectory().toAbsolutePath().normalize().toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="添加tags"><a href="#添加tags" class="headerlink" title="添加tags"></a>添加tags</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;values&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;tutorialmod:wanderer&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;tutorialmod:plant&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;tutorialmod:sunset&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="添加贴图"><a href="#添加贴图" class="headerlink" title="添加贴图"></a>添加贴图</h2><p><img src="https://s2.loli.net/2023/10/29/EvGjHSUJ1V2ZYrn.png" alt="image-20231029172554282"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 我的世界 </tag>
            
            <tag> 模组 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Architectury-07-添加作物</title>
      <link href="/2023/10/29/Architectury-07-%E6%B7%BB%E5%8A%A0%E4%BD%9C%E7%89%A9/"/>
      <url>/2023/10/29/Architectury-07-%E6%B7%BB%E5%8A%A0%E4%BD%9C%E7%89%A9/</url>
      
        <content type="html"><![CDATA[<h1 id="添加作物"><a href="#添加作物" class="headerlink" title="添加作物"></a>添加作物</h1><p><img src="https://s2.loli.net/2023/10/29/nREwbAS2OBrNJhc.png" alt="image-20231029165918514"></p><p><img src="https://s2.loli.net/2023/10/29/4lGTQFCU3JWouwI.png" alt="image-20231029165957820"></p><p><img src="https://s2.loli.net/2023/10/29/SjVHUfM84Fy9OWh.png"></p><p><img src="https://s2.loli.net/2023/10/29/NTMytBC3ulbKspw.png" alt="image-20231029170008472"></p><p><img src="https://s2.loli.net/2023/10/29/Dqp7zUBsE8rul1O.png" alt="image-20231029170019289"></p><h2 id="添加作物方块"><a href="#添加作物方块" class="headerlink" title="添加作物方块"></a>添加作物方块</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> net.tutorialmod.block.custom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.ItemLike;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.Block;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.CropBlock;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.state.BlockState;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.state.StateDefinition;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.state.properties.IntegerProperty;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.item.ModItem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BlueberryCropBlock</span> <span class="keyword">extends</span> <span class="title class_">CropBlock</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">IntegerProperty</span> <span class="variable">AGE</span> <span class="operator">=</span> IntegerProperty.create(<span class="string">&quot;age&quot;</span>,<span class="number">0</span>,<span class="number">6</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BlueberryCropBlock</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(properties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> ItemLike <span class="title function_">getBaseSeedId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ModItem.BLUEBERRY_SEEDS.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> IntegerProperty <span class="title function_">getAgeProperty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> AGE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMaxAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">createBlockStateDefinition</span><span class="params">(StateDefinition.Builder&lt;Block, BlockState&gt; builder)</span> &#123;</span><br><span class="line">        builder.add(AGE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="添加作物种子和果实"><a href="#添加作物种子和果实" class="headerlink" title="添加作物种子和果实"></a>添加作物种子和果实</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistrySupplier&lt;Item&gt; BLUEBERRY_SEEDS = ITEMS.register(<span class="string">&quot;blueberry_seeds&quot;</span>,</span><br><span class="line">         () -&gt; <span class="keyword">new</span> <span class="title class_">ItemNameBlockItem</span>(ModBlock.BLUEBERRY_CROP.get(),</span><br><span class="line">                 <span class="keyword">new</span> <span class="title class_">Item</span>.Properties().arch$tab(ModCreativeTab.EXAMPLE_TAB)));</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistrySupplier&lt;Item&gt; BLUEBERRY = ITEMS.register(<span class="string">&quot;blueberry&quot;</span>,</span><br><span class="line">         () -&gt; <span class="keyword">new</span> <span class="title class_">Item</span>(<span class="keyword">new</span> <span class="title class_">Item</span>.Properties().arch$tab(ModCreativeTab.EXAMPLE_TAB)</span><br><span class="line">                 .food(<span class="keyword">new</span> <span class="title class_">FoodProperties</span>.Builder().nutrition(<span class="number">2</span>).saturationMod(<span class="number">2f</span>).build())));</span><br></pre></td></tr></table></figure><h2 id="注册作物方块"><a href="#注册作物方块" class="headerlink" title="注册作物方块"></a>注册作物方块</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistrySupplier&lt;Block&gt; BLUEBERRY_CROP = BLOCKS.register(<span class="string">&quot;blueberry_crop&quot;</span>,</span><br><span class="line">        () -&gt; <span class="keyword">new</span> <span class="title class_">BlueberryCropBlock</span>(BlockBehaviour.Properties.copy(Blocks.WHEAT)));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="添加blockstate"><a href="#添加blockstate" class="headerlink" title="添加blockstate"></a>添加blockstate</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;variants&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;age=0&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:block/blueberry_stage0&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age=1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:block/blueberry_stage1&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age=2&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:block/blueberry_stage2&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age=3&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:block/blueberry_stage3&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age=4&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:block/blueberry_stage4&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age=5&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:block/blueberry_stage5&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age=6&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:block/blueberry_stage6&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="添加方块model"><a href="#添加方块model" class="headerlink" title="添加方块model"></a>添加方块model</h2><p>这里示例一个，其他一样只是改了序号</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;parent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:block/crop&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;render_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:cutout&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;textures&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;crop&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:block/blueberry_stage0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="添加物品model"><a href="#添加物品model" class="headerlink" title="添加物品model"></a>添加物品model</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;parent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:item/generated&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;textures&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;layer0&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:item/blueberry&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;parent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:item/generated&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;textures&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;layer0&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:item/blueberry_seeds&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="添加贴图"><a href="#添加贴图" class="headerlink" title="添加贴图"></a>添加贴图</h2><p>略，可在github中下载。</p><h2 id="添加loottable掉落物品表"><a href="#添加loottable掉落物品表" class="headerlink" title="添加loottable掉落物品表"></a>添加loottable掉落物品表</h2><p>每个字段具体含义请查阅wiki，或者翻往期视频，或者使用data generater</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:block&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;functions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;function&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:explosion_decay&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;bonus_rolls&quot;</span><span class="punctuation">:</span> <span class="number">0.0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;entries&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:alternatives&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:item&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;conditions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;block&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:blueberry_crop&quot;</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;condition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:block_state_property&quot;</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6&quot;</span></span><br><span class="line">                  <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">              <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:blueberry&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:item&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:blueberry_seeds&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;rolls&quot;</span><span class="punctuation">:</span> <span class="number">1.0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;bonus_rolls&quot;</span><span class="punctuation">:</span> <span class="number">0.0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;conditions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;block&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:blueberry_crop&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;condition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:block_state_property&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;entries&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:item&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;functions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;enchantment&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:fortune&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;formula&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:binomial_with_bonus_count&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;function&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:apply_bonus&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;extra&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;probability&quot;</span><span class="punctuation">:</span> <span class="number">0.5714286</span></span><br><span class="line">              <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:blueberry_seeds&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;rolls&quot;</span><span class="punctuation">:</span> <span class="number">1.0</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;random_sequence&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:blocks/blueberry_crop&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="补充，fabric的渲染如何调整为cutout"><a href="#补充，fabric的渲染如何调整为cutout" class="headerlink" title="补充，fabric的渲染如何调整为cutout"></a>补充，fabric的渲染如何调整为cutout</h2><p><img src="https://s2.loli.net/2023/10/29/yfZWNVOoHzB3rcM.png" alt="image-20231029173431149"></p><p><img src="https://s2.loli.net/2023/10/29/lLi21k9zHKUgoVv.png" alt="image-20231029173439330"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;entrypoints&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;net.tutorialmod.fabric.TutorialModFabric&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;client&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;net.tutorialmod.fabric.TutorialModFabricClient&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.tutorialmod.fabric;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.fabricmc.api.ClientModInitializer;</span><br><span class="line"><span class="keyword">import</span> net.fabricmc.fabric.api.blockrenderlayer.v1.BlockRenderLayerMap;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.client.renderer.RenderType;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.block.ModBlock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TutorialModFabricClient</span> <span class="keyword">implements</span> <span class="title class_">ClientModInitializer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onInitializeClient</span><span class="params">()</span> &#123;</span><br><span class="line">        BlockRenderLayerMap.INSTANCE.putBlock(ModBlock.BLUEBERRY_CROP.get(), RenderType.cutout());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 我的世界 </tag>
            
            <tag> 模组 </tag>
            
            <tag> 教程 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Architectury-06-添加多状态方块</title>
      <link href="/2023/10/29/Architectury-06-%E6%B7%BB%E5%8A%A0%E5%A4%9A%E7%8A%B6%E6%80%81%E6%96%B9%E5%9D%97/"/>
      <url>/2023/10/29/Architectury-06-%E6%B7%BB%E5%8A%A0%E5%A4%9A%E7%8A%B6%E6%80%81%E6%96%B9%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="添加多状态的方块"><a href="#添加多状态的方块" class="headerlink" title="添加多状态的方块"></a>添加多状态的方块</h1><p><img src="https://s2.loli.net/2023/10/29/lp8zAY4c3G5fRqS.png" alt="image-20231029162325525"></p><p><img src="https://s2.loli.net/2023/10/29/MjznaZoV3GFNYQq.png" alt="image-20231029162337992"></p><h2 id="添加方块"><a href="#添加方块" class="headerlink" title="添加方块"></a>添加方块</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> net.tutorialmod.block.custom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.minecraft.core.BlockPos;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.InteractionHand;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.InteractionResult;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.entity.player.Player;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.Level;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.Block;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.state.BlockState;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.state.StateDefinition;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.state.properties.BooleanProperty;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.phys.BlockHitResult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZirconLampBlock</span> <span class="keyword">extends</span> <span class="title class_">Block</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">BooleanProperty</span> <span class="variable">LIT</span> <span class="operator">=</span> BooleanProperty.create(<span class="string">&quot;lit&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ZirconLampBlock</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(properties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> InteractionResult <span class="title function_">use</span><span class="params">(BlockState blockState, Level level, BlockPos blockPos, Player player, InteractionHand interactionHand, BlockHitResult blockHitResult)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!level.isClientSide() &amp;&amp; interactionHand == InteractionHand.MAIN_HAND) &#123;</span><br><span class="line">            level.setBlock(blockPos, blockState.cycle(LIT),<span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> InteractionResult.SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">createBlockStateDefinition</span><span class="params">(StateDefinition.Builder&lt;Block, BlockState&gt; builder)</span> &#123;</span><br><span class="line">        builder.add(LIT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="注册方块"><a href="#注册方块" class="headerlink" title="注册方块"></a>注册方块</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//lamp</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistrySupplier&lt;Block&gt; ZIRCON_LAMP = registerBlock(<span class="string">&quot;zircon_lamp&quot;</span>,</span><br><span class="line">        () -&gt; <span class="keyword">new</span> <span class="title class_">ZirconLampBlock</span>(BlockBehaviour.Properties.copy(Blocks.STONE)</span><br><span class="line">                .strength(<span class="number">6f</span>).requiresCorrectToolForDrops()</span><br><span class="line">                .lightLevel(state -&gt; state.getValue(ZirconLampBlock.LIT) ? <span class="number">15</span> : <span class="number">0</span>)));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="添加blockstate"><a href="#添加blockstate" class="headerlink" title="添加blockstate"></a>添加blockstate</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;variants&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;lit=false&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:block/zircon_lamp_off&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lit=true&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:block/zircon_lamp_on&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="添加方块model"><a href="#添加方块model" class="headerlink" title="添加方块model"></a>添加方块model</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;parent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:block/cube_all&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;textures&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;all&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:block/zircon_lamp_off&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;parent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:block/cube_all&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;textures&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;all&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:block/zircon_lamp_on&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="添加物品model"><a href="#添加物品model" class="headerlink" title="添加物品model"></a>添加物品model</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;parent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:block/zircon_lamp_off&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="添加贴图"><a href="#添加贴图" class="headerlink" title="添加贴图"></a>添加贴图</h2><p>略</p><h2 id="添加语言文件"><a href="#添加语言文件" class="headerlink" title="添加语言文件"></a>添加语言文件</h2><p>略</p>]]></content>
      
      
      
        <tags>
            
            <tag> 我的世界 </tag>
            
            <tag> 模组 </tag>
            
            <tag> 教程 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Architectury-05-添加合成表和LootTable以及方块挖掘正确工具的挖掘等级</title>
      <link href="/2023/10/29/Architectury-05-%E6%B7%BB%E5%8A%A0%E5%90%88%E6%88%90%E8%A1%A8%E5%92%8CLootTable%E4%BB%A5%E5%8F%8A%E6%96%B9%E5%9D%97%E6%8C%96%E6%8E%98%E6%AD%A3%E7%A1%AE%E5%B7%A5%E5%85%B7%E7%9A%84%E6%8C%96%E6%8E%98%E7%AD%89%E7%BA%A7/"/>
      <url>/2023/10/29/Architectury-05-%E6%B7%BB%E5%8A%A0%E5%90%88%E6%88%90%E8%A1%A8%E5%92%8CLootTable%E4%BB%A5%E5%8F%8A%E6%96%B9%E5%9D%97%E6%8C%96%E6%8E%98%E6%AD%A3%E7%A1%AE%E5%B7%A5%E5%85%B7%E7%9A%84%E6%8C%96%E6%8E%98%E7%AD%89%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="添加合成表Recipes，掉落物品表LootTable，方块挖掘等级，方块正确挖掘工具"><a href="#添加合成表Recipes，掉落物品表LootTable，方块挖掘等级，方块正确挖掘工具" class="headerlink" title="添加合成表Recipes，掉落物品表LootTable，方块挖掘等级，方块正确挖掘工具"></a>添加合成表Recipes，掉落物品表LootTable，方块挖掘等级，方块正确挖掘工具</h1><p>先添加了几个方块在ModBlock和ModItem下面</p><p><img src="https://s2.loli.net/2023/10/29/AOgi2lBfhboz3yW.png" alt="image-20231029110107898"></p><p>添加对应方块的物品和贴图</p><p><img src="https://s2.loli.net/2023/10/29/bLjucy4IoSOaFKw.png" alt="image-20231029110147533"></p><p>添加对应的方块正确挖掘工具，挖掘等级，掉落物表，合成表</p><p><img src="https://s2.loli.net/2023/10/29/ZNgmxABOy1uSola.png" alt="image-20231029110221433"></p><h2 id="添加方块"><a href="#添加方块" class="headerlink" title="添加方块"></a>添加方块</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> net.tutorialmod.block;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dev.architectury.registry.registries.DeferredRegister;</span><br><span class="line"><span class="keyword">import</span> dev.architectury.registry.registries.RegistrySupplier;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.core.registries.Registries;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.util.valueproviders.UniformInt;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.item.BlockItem;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.item.Item;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.Block;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.Blocks;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.DropExperienceBlock;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.state.BlockBehaviour;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.TutorialMod;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.block.custom.JumpyBlock;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.item.ModCreativeTab;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.item.ModItem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModBlock</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DeferredRegister&lt;Block&gt; BLOCKS = DeferredRegister.create(TutorialMod.MOD_ID, Registries.BLOCK);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public static final RegistrySupplier&lt;Block&gt; ZIRCON_BLOCK = BLOCKS.register(&quot;zircon_block&quot;,()-&gt;new Block(BlockBehaviour.Properties.copy(Blocks.STONE)));</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistrySupplier&lt;Block&gt; ZIRCON_BLOCK = registerBlock(<span class="string">&quot;zircon_block&quot;</span>,()-&gt;<span class="keyword">new</span> <span class="title class_">Block</span>(BlockBehaviour.Properties.copy(Blocks.STONE)));</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistrySupplier&lt;Block&gt; JUMPY_BLOCK = registerBlock(<span class="string">&quot;jumpy_block&quot;</span>,()-&gt; <span class="keyword">new</span> <span class="title class_">JumpyBlock</span>(BlockBehaviour.Properties.copy(Blocks.STONE)));</span><br><span class="line">    <span class="comment">//ore</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistrySupplier&lt;Block&gt; ZIRCON_ORE = registerBlock(<span class="string">&quot;zircon_ore&quot;</span>,</span><br><span class="line">            () -&gt; <span class="keyword">new</span> <span class="title class_">DropExperienceBlock</span>(BlockBehaviour.Properties.copy(Blocks.STONE)</span><br><span class="line">                    .strength(<span class="number">6f</span>).requiresCorrectToolForDrops(),</span><br><span class="line">                    UniformInt.of(<span class="number">3</span>, <span class="number">7</span>)));</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistrySupplier&lt;Block&gt; DEEPSLATE_ZIRCON_ORE = registerBlock(<span class="string">&quot;deepslate_zircon_ore&quot;</span>,</span><br><span class="line">            () -&gt; <span class="keyword">new</span> <span class="title class_">DropExperienceBlock</span>(BlockBehaviour.Properties.copy(Blocks.STONE)</span><br><span class="line">                    .strength(<span class="number">6f</span>).requiresCorrectToolForDrops(),</span><br><span class="line">                    UniformInt.of(<span class="number">3</span>, <span class="number">7</span>)));</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistrySupplier&lt;Block&gt; ENDSTONE_ZIRCON_ORE = registerBlock(<span class="string">&quot;endstone_zircon_ore&quot;</span>,</span><br><span class="line">            () -&gt; <span class="keyword">new</span> <span class="title class_">DropExperienceBlock</span>(BlockBehaviour.Properties.copy(Blocks.STONE)</span><br><span class="line">                    .strength(<span class="number">6f</span>).requiresCorrectToolForDrops(),</span><br><span class="line">                    UniformInt.of(<span class="number">3</span>, <span class="number">7</span>)));</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistrySupplier&lt;Block&gt; NETHERRACK_ZIRCON_ORE = registerBlock(<span class="string">&quot;netherrack_zircon_ore&quot;</span>,</span><br><span class="line">            () -&gt; <span class="keyword">new</span> <span class="title class_">DropExperienceBlock</span>(BlockBehaviour.Properties.copy(Blocks.STONE)</span><br><span class="line">                    .strength(<span class="number">6f</span>).requiresCorrectToolForDrops(),</span><br><span class="line">                    UniformInt.of(<span class="number">3</span>, <span class="number">7</span>)));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Block</span>&gt; RegistrySupplier&lt;T&gt; <span class="title function_">registerBlock</span><span class="params">(String name, Supplier&lt;T&gt; block)</span> &#123;</span><br><span class="line">        RegistrySupplier&lt;T&gt; toReturn = BLOCKS.register(name, block);</span><br><span class="line">        registerBlockItem(name, toReturn);</span><br><span class="line">        <span class="keyword">return</span> toReturn;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Block</span>&gt; RegistrySupplier&lt;Item&gt; <span class="title function_">registerBlockItem</span><span class="params">(String name, RegistrySupplier&lt;T&gt; block)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ModItem.ITEMS.register(name, () -&gt; <span class="keyword">new</span> <span class="title class_">BlockItem</span>(block.get(), <span class="keyword">new</span> <span class="title class_">Item</span>.Properties().arch$tab(ModCreativeTab.EXAMPLE_TAB)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">()</span>&#123;</span><br><span class="line">        BLOCKS.register();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> net.tutorialmod.block;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dev.architectury.registry.registries.DeferredRegister;</span><br><span class="line"><span class="keyword">import</span> dev.architectury.registry.registries.RegistrySupplier;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.core.registries.Registries;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.util.valueproviders.UniformInt;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.item.BlockItem;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.item.Item;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.Block;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.Blocks;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.DropExperienceBlock;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.state.BlockBehaviour;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.TutorialMod;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.block.custom.JumpyBlock;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.item.ModCreativeTab;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.item.ModItem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModBlock</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DeferredRegister&lt;Block&gt; BLOCKS = DeferredRegister.create(TutorialMod.MOD_ID, Registries.BLOCK);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public static final RegistrySupplier&lt;Block&gt; ZIRCON_BLOCK = BLOCKS.register(&quot;zircon_block&quot;,()-&gt;new Block(BlockBehaviour.Properties.copy(Blocks.STONE)));</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistrySupplier&lt;Block&gt; ZIRCON_BLOCK = registerBlock(<span class="string">&quot;zircon_block&quot;</span>,()-&gt;<span class="keyword">new</span> <span class="title class_">Block</span>(BlockBehaviour.Properties.copy(Blocks.STONE)));</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistrySupplier&lt;Block&gt; JUMPY_BLOCK = registerBlock(<span class="string">&quot;jumpy_block&quot;</span>,()-&gt; <span class="keyword">new</span> <span class="title class_">JumpyBlock</span>(BlockBehaviour.Properties.copy(Blocks.STONE)));</span><br><span class="line">    <span class="comment">//ore</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistrySupplier&lt;Block&gt; ZIRCON_ORE = registerBlock(<span class="string">&quot;zircon_ore&quot;</span>,</span><br><span class="line">            () -&gt; <span class="keyword">new</span> <span class="title class_">DropExperienceBlock</span>(BlockBehaviour.Properties.copy(Blocks.STONE)</span><br><span class="line">                    .strength(<span class="number">6f</span>).requiresCorrectToolForDrops(),</span><br><span class="line">                    UniformInt.of(<span class="number">3</span>, <span class="number">7</span>)));</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistrySupplier&lt;Block&gt; DEEPSLATE_ZIRCON_ORE = registerBlock(<span class="string">&quot;deepslate_zircon_ore&quot;</span>,</span><br><span class="line">            () -&gt; <span class="keyword">new</span> <span class="title class_">DropExperienceBlock</span>(BlockBehaviour.Properties.copy(Blocks.STONE)</span><br><span class="line">                    .strength(<span class="number">6f</span>).requiresCorrectToolForDrops(),</span><br><span class="line">                    UniformInt.of(<span class="number">3</span>, <span class="number">7</span>)));</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistrySupplier&lt;Block&gt; ENDSTONE_ZIRCON_ORE = registerBlock(<span class="string">&quot;endstone_zircon_ore&quot;</span>,</span><br><span class="line">            () -&gt; <span class="keyword">new</span> <span class="title class_">DropExperienceBlock</span>(BlockBehaviour.Properties.copy(Blocks.STONE)</span><br><span class="line">                    .strength(<span class="number">6f</span>).requiresCorrectToolForDrops(),</span><br><span class="line">                    UniformInt.of(<span class="number">3</span>, <span class="number">7</span>)));</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistrySupplier&lt;Block&gt; NETHERRACK_ZIRCON_ORE = registerBlock(<span class="string">&quot;netherrack_zircon_ore&quot;</span>,</span><br><span class="line">            () -&gt; <span class="keyword">new</span> <span class="title class_">DropExperienceBlock</span>(BlockBehaviour.Properties.copy(Blocks.STONE)</span><br><span class="line">                    .strength(<span class="number">6f</span>).requiresCorrectToolForDrops(),</span><br><span class="line">                    UniformInt.of(<span class="number">3</span>, <span class="number">7</span>)));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Block</span>&gt; RegistrySupplier&lt;T&gt; <span class="title function_">registerBlock</span><span class="params">(String name, Supplier&lt;T&gt; block)</span> &#123;</span><br><span class="line">        RegistrySupplier&lt;T&gt; toReturn = BLOCKS.register(name, block);</span><br><span class="line">        registerBlockItem(name, toReturn);</span><br><span class="line">        <span class="keyword">return</span> toReturn;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Block</span>&gt; RegistrySupplier&lt;Item&gt; <span class="title function_">registerBlockItem</span><span class="params">(String name, RegistrySupplier&lt;T&gt; block)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ModItem.ITEMS.register(name, () -&gt; <span class="keyword">new</span> <span class="title class_">BlockItem</span>(block.get(), <span class="keyword">new</span> <span class="title class_">Item</span>.Properties().arch$tab(ModCreativeTab.EXAMPLE_TAB)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">()</span>&#123;</span><br><span class="line">        BLOCKS.register();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="添加物品"><a href="#添加物品" class="headerlink" title="添加物品"></a>添加物品</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.tutorialmod.item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dev.architectury.registry.registries.DeferredRegister;</span><br><span class="line"><span class="keyword">import</span> dev.architectury.registry.registries.RegistrySupplier;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.core.registries.Registries;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.item.EggItem;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.item.Item;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.TutorialMod;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.item.custom.EightBallItem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModItem</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DeferredRegister&lt;Item&gt; ITEMS = DeferredRegister.create(TutorialMod.MOD_ID, Registries.ITEM);</span><br><span class="line">    <span class="comment">// 皓石</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistrySupplier&lt;Item&gt; EXAMPLE_ITEM = ITEMS.register(<span class="string">&quot;zircon&quot;</span>, () -&gt;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Item</span>(<span class="keyword">new</span> <span class="title class_">Item</span>.Properties().arch$tab(ModCreativeTab.EXAMPLE_TAB)));</span><br><span class="line">    <span class="comment">// 高级物品</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistrySupplier&lt;Item&gt; EIGHT_BALL_ITEM = ITEMS.register(<span class="string">&quot;eight_ball&quot;</span>,</span><br><span class="line">            () -&gt; <span class="keyword">new</span> <span class="title class_">EightBallItem</span>(<span class="keyword">new</span> <span class="title class_">Item</span>.Properties().arch$tab(ModCreativeTab.EXAMPLE_TAB).stacksTo(<span class="number">1</span>)));</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistrySupplier&lt;Item&gt; RAW_ZIRCON = ITEMS.register(<span class="string">&quot;raw_zircon&quot;</span>,</span><br><span class="line">            () -&gt; <span class="keyword">new</span> <span class="title class_">Item</span>(<span class="keyword">new</span> <span class="title class_">Item</span>.Properties().arch$tab(ModCreativeTab.EXAMPLE_TAB)));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">()</span>&#123;</span><br><span class="line">        ITEMS.register();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="添加方块state和方块物品以及贴图等略过"><a href="#添加方块state和方块物品以及贴图等略过" class="headerlink" title="添加方块state和方块物品以及贴图等略过"></a>添加方块state和方块物品以及贴图等略过</h2><h2 id="添加正确的挖掘工具"><a href="#添加正确的挖掘工具" class="headerlink" title="添加正确的挖掘工具"></a>添加正确的挖掘工具</h2><p>pickaxe.json  (在mineable下面，其他的工具同理例如斧头axe.json)</p><p>相关的工具可以在我的世界包下找到，详细可以去看视频。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;values&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;tutorialmod:zircon_block&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;tutorialmod:zircon_ore&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;tutorialmod:deepslate_zircon_ore&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="掉落物表"><a href="#掉落物表" class="headerlink" title="掉落物表"></a>掉落物表</h2><p>这里json的意思就不详细介绍了，可以去看往期视频，或者去找对应wiki有介绍</p><p>wiki搜索minecraftwiki就可以了。</p><p>deepslate_zircon_ore.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:block&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;bonus_rolls&quot;</span><span class="punctuation">:</span> <span class="number">0.0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;entries&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:alternatives&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:item&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;conditions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;condition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:match_tool&quot;</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;predicate&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;enchantments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                      <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;enchantment&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:silk_touch&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;levels&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                          <span class="attr">&quot;min&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                      <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">]</span></span><br><span class="line">                  <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">              <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:zircon_ore&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:item&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;functions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;add&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;count&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:uniform&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;max&quot;</span><span class="punctuation">:</span> <span class="number">9.0</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;min&quot;</span><span class="punctuation">:</span> <span class="number">2.0</span></span><br><span class="line">                  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;function&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:set_count&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;enchantment&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:fortune&quot;</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;formula&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:uniform_bonus_count&quot;</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;function&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:apply_bonus&quot;</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;bonusMultiplier&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">                  <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;function&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:explosion_decay&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">              <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:raw_zircon&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;rolls&quot;</span><span class="punctuation">:</span> <span class="number">1.0</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;random_sequence&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:blocks/zircon_ore&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>zircon_block.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:block&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;bonus_rolls&quot;</span><span class="punctuation">:</span> <span class="number">0.0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;conditions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;condition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:survives_explosion&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;entries&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:item&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:zircon_block&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;rolls&quot;</span><span class="punctuation">:</span> <span class="number">1.0</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;random_sequence&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:blocks/zircon_block&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>zircon_ore.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:block&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;bonus_rolls&quot;</span><span class="punctuation">:</span> <span class="number">0.0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;entries&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:alternatives&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:item&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;conditions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;condition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:match_tool&quot;</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;predicate&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;enchantments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                      <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;enchantment&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:silk_touch&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;levels&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                          <span class="attr">&quot;min&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                      <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">]</span></span><br><span class="line">                  <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">              <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:zircon_ore&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:item&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;functions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;add&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;count&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:uniform&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;max&quot;</span><span class="punctuation">:</span> <span class="number">9.0</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;min&quot;</span><span class="punctuation">:</span> <span class="number">2.0</span></span><br><span class="line">                  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;function&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:set_count&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;enchantment&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:fortune&quot;</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;formula&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:uniform_bonus_count&quot;</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;function&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:apply_bonus&quot;</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;bonusMultiplier&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">                  <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;function&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:explosion_decay&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">              <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:raw_zircon&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;rolls&quot;</span><span class="punctuation">:</span> <span class="number">1.0</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;random_sequence&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:blocks/zircon_ore&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="添加合成表"><a href="#添加合成表" class="headerlink" title="添加合成表"></a>添加合成表</h2><p>zircon.json</p><p>使用9个zircon合成一个block</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:crafting_shapeless&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;misc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ingredients&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;item&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:zircon_block&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;count&quot;</span><span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;item&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:zircon&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>zircon_block.json</p><p>使用block合成9个zircon</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:crafting_shaped&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;misc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;#&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;item&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:zircon&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pattern&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;###&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;###&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;###&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;item&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:zircon_block&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;show_notification&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>zircon_from_sme****.json</p><p>raw 熔炉 烧</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:smelting&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;misc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;cookingtime&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;experience&quot;</span><span class="punctuation">:</span> <span class="number">0.7</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ingredient&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;item&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:raw_zircon&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:zircon&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>zircon_from_bl**.json</p><p>raw 高炉 烧</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:blasting&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;misc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;cookingtime&quot;</span><span class="punctuation">:</span> <span class="number">100</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;experience&quot;</span><span class="punctuation">:</span> <span class="number">0.7</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ingredient&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;item&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:raw_zircon&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:zircon&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>具体字段含义查询wiki，不过看英语大概也能看懂把。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 我的世界 </tag>
            
            <tag> 模组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Architectury-04-高级方块</title>
      <link href="/2023/10/28/Architectury-04-%E9%AB%98%E7%BA%A7%E6%96%B9%E5%9D%97/"/>
      <url>/2023/10/28/Architectury-04-%E9%AB%98%E7%BA%A7%E6%96%B9%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="添加一个高级方块"><a href="#添加一个高级方块" class="headerlink" title="添加一个高级方块"></a>添加一个高级方块</h1><p><img src="https://s2.loli.net/2023/10/29/ct5BRLgM9qGo1fe.png" alt="image-20231029150618990"></p><h2 id="添加方块代码"><a href="#添加方块代码" class="headerlink" title="添加方块代码"></a>添加方块代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> net.tutorialmod.block.custom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.minecraft.core.BlockPos;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.network.chat.Component;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.InteractionHand;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.InteractionResult;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.effect.MobEffectInstance;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.effect.MobEffects;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.entity.Entity;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.entity.LivingEntity;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.entity.player.Player;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.Level;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.Block;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.state.BlockState;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.phys.BlockHitResult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JumpyBlock</span> <span class="keyword">extends</span> <span class="title class_">Block</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JumpyBlock</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(properties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> InteractionResult <span class="title function_">use</span><span class="params">(BlockState blockState, Level level, BlockPos blockPos, Player player, InteractionHand interactionHand, BlockHitResult blockHitResult)</span> &#123;</span><br><span class="line">        player.sendSystemMessage(Component.literal(<span class="string">&quot;Right Clicked this!&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> InteractionResult.SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stepOn</span><span class="params">(Level level, BlockPos blockPos, BlockState blockState, Entity entity)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(entity <span class="keyword">instanceof</span> LivingEntity entity1)&#123;</span><br><span class="line">            entity1.addEffect(<span class="keyword">new</span> <span class="title class_">MobEffectInstance</span>(<span class="keyword">new</span> <span class="title class_">MobEffectInstance</span>(MobEffects.JUMP,<span class="number">200</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">super</span>.stepOn(level, blockPos, blockState, entity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="注册方块"><a href="#注册方块" class="headerlink" title="注册方块"></a>注册方块</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistrySupplier&lt;Block&gt; JUMPY_BLOCK = registerBlock(<span class="string">&quot;jumpy_block&quot;</span>,()-&gt; <span class="keyword">new</span> <span class="title class_">JumpyBlock</span>(BlockBehaviour.Properties.copy(Blocks.STONE)));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="添加blockstate"><a href="#添加blockstate" class="headerlink" title="添加blockstate"></a>添加blockstate</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;variants&quot;: &#123;</span><br><span class="line">    &quot;&quot;: &#123;</span><br><span class="line">      &quot;model&quot;: &quot;tutorialmod:block/jumpy_block&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加方块model"><a href="#添加方块model" class="headerlink" title="添加方块model"></a>添加方块model</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;parent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:block/cube_all&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;textures&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;all&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:block/jumpy_block&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="添加方块item"><a href="#添加方块item" class="headerlink" title="添加方块item"></a>添加方块item</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;parent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tutorialmod:block/jumpy_block&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="添加方块贴图"><a href="#添加方块贴图" class="headerlink" title="添加方块贴图"></a>添加方块贴图</h2><p>略</p>]]></content>
      
      
      
        <tags>
            
            <tag> 我的世界 </tag>
            
            <tag> 模组 </tag>
            
            <tag> Java </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Architectury-03-高级物品</title>
      <link href="/2023/10/28/Architectury-03-%E9%AB%98%E7%BA%A7%E7%89%A9%E5%93%81/"/>
      <url>/2023/10/28/Architectury-03-%E9%AB%98%E7%BA%A7%E7%89%A9%E5%93%81/</url>
      
        <content type="html"><![CDATA[<h1 id="添加高级物品"><a href="#添加高级物品" class="headerlink" title="添加高级物品"></a>添加高级物品</h1><p><img src="https://s2.loli.net/2023/10/28/R28V6rfXhaKlyGs.png" alt="image-20231028215814333"></p><h2 id="添加自定义物品"><a href="#添加自定义物品" class="headerlink" title="添加自定义物品"></a>添加自定义物品</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> net.tutorialmod.item.custom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.minecraft.network.chat.Component;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.util.RandomSource;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.InteractionHand;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.InteractionResult;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.InteractionResultHolder;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.entity.player.Player;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.item.Item;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.item.ItemStack;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.Level;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EightBallItem</span> <span class="keyword">extends</span> <span class="title class_">Item</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EightBallItem</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(properties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> InteractionResultHolder&lt;ItemStack&gt; <span class="title function_">use</span><span class="params">(Level level, Player player, InteractionHand interactionHand)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!level.isClientSide() &amp;&amp; interactionHand == InteractionHand.MAIN_HAND) &#123;</span><br><span class="line">            outputRandomNumber(player);</span><br><span class="line">            player.getCooldowns().addCooldown(<span class="built_in">this</span>, <span class="number">20</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> InteractionResultHolder.success(<span class="keyword">new</span> <span class="title class_">ItemStack</span>(<span class="built_in">this</span>,<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">outputRandomNumber</span><span class="params">(Player player)</span> &#123;</span><br><span class="line">        player.sendSystemMessage(Component.literal(<span class="string">&quot;Your Number is &quot;</span> + getRandomNumber()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getRandomNumber</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> RandomSource.createNewThreadLocalInstance().nextInt(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> net.tutorialmod.item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dev.architectury.registry.registries.DeferredRegister;</span><br><span class="line"><span class="keyword">import</span> dev.architectury.registry.registries.RegistrySupplier;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.core.registries.Registries;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.item.EggItem;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.item.Item;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.TutorialMod;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.item.custom.EightBallItem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModItem</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DeferredRegister&lt;Item&gt; ITEMS = DeferredRegister.create(TutorialMod.MOD_ID, Registries.ITEM);</span><br><span class="line">    <span class="comment">// 皓石</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistrySupplier&lt;Item&gt; EXAMPLE_ITEM = ITEMS.register(<span class="string">&quot;zircon&quot;</span>, () -&gt;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Item</span>(<span class="keyword">new</span> <span class="title class_">Item</span>.Properties().arch$tab(ModCreativeTab.EXAMPLE_TAB)));</span><br><span class="line">    <span class="comment">// 高级物品</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistrySupplier&lt;Item&gt; EIGHT_BALL_ITEM = ITEMS.register(<span class="string">&quot;eight_ball&quot;</span>,</span><br><span class="line">            () -&gt; <span class="keyword">new</span> <span class="title class_">EightBallItem</span>(<span class="keyword">new</span> <span class="title class_">Item</span>.Properties().arch$tab(ModCreativeTab.EXAMPLE_TAB).stacksTo(<span class="number">1</span>)));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">()</span>&#123;</span><br><span class="line">        ITEMS.register();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="添加model"><a href="#添加model" class="headerlink" title="添加model"></a>添加model</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;parent&quot;</span>: <span class="string">&quot;minecraft:item/generated&quot;</span>,</span><br><span class="line">  <span class="string">&quot;textures&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;layer0&quot;</span>: <span class="string">&quot;tutorialmod:item/eight_ball&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加-lang"><a href="#添加-lang" class="headerlink" title="添加 lang"></a>添加 lang</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">略</span><br></pre></td></tr></table></figure><h2 id="添加textures"><a href="#添加textures" class="headerlink" title="添加textures"></a>添加textures</h2><p>略</p>]]></content>
      
      
      
        <tags>
            
            <tag> 我的世界 </tag>
            
            <tag> 模组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Architectury-02-添加方块</title>
      <link href="/2023/10/28/Architectury-02-%E6%B7%BB%E5%8A%A0%E6%96%B9%E5%9D%97/"/>
      <url>/2023/10/28/Architectury-02-%E6%B7%BB%E5%8A%A0%E6%96%B9%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="添加方块"><a href="#添加方块" class="headerlink" title="添加方块"></a>添加方块</h1><p><img src="https://s2.loli.net/2023/10/28/wqLaZK1WGzPrnVF.png" alt="image-20231028212405539"></p><h2 id="添加方块-1"><a href="#添加方块-1" class="headerlink" title="添加方块"></a>添加方块</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.tutorialmod.block;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dev.architectury.registry.registries.DeferredRegister;</span><br><span class="line"><span class="keyword">import</span> dev.architectury.registry.registries.RegistrySupplier;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.core.registries.Registries;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.item.BlockItem;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.item.Item;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.Block;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.Blocks;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.level.block.state.BlockBehaviour;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.TutorialMod;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.item.ModCreativeTab;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.item.ModItem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModBlock</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DeferredRegister&lt;Block&gt; BLOCKS = DeferredRegister.create(TutorialMod.MOD_ID, Registries.BLOCK);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistrySupplier&lt;Block&gt; ZIRCON_BLOCK = registerBlock(<span class="string">&quot;zircon_block&quot;</span>,()-&gt;<span class="keyword">new</span> <span class="title class_">Block</span>(BlockBehaviour.Properties.copy(Blocks.STONE)));</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Block</span>&gt; RegistrySupplier&lt;T&gt; <span class="title function_">registerBlock</span><span class="params">(String name, Supplier&lt;T&gt; block)</span> &#123;</span><br><span class="line">        RegistrySupplier&lt;T&gt; toReturn = BLOCKS.register(name, block);</span><br><span class="line">        registerBlockItem(name, toReturn);</span><br><span class="line">        <span class="keyword">return</span> toReturn;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Block</span>&gt; RegistrySupplier&lt;Item&gt; <span class="title function_">registerBlockItem</span><span class="params">(String name, RegistrySupplier&lt;T&gt; block)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ModItem.ITEMS.register(name, () -&gt; <span class="keyword">new</span> <span class="title class_">BlockItem</span>(block.get(), <span class="keyword">new</span> <span class="title class_">Item</span>.Properties().arch$tab(ModCreativeTab.EXAMPLE_TAB)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">()</span>&#123;</span><br><span class="line">        BLOCKS.register();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="修改TutorialMod类"><a href="#修改TutorialMod类" class="headerlink" title="修改TutorialMod类"></a>修改TutorialMod类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.tutorialmod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.base.Suppliers;</span><br><span class="line"><span class="keyword">import</span> dev.architectury.registry.CreativeTabRegistry;</span><br><span class="line"><span class="keyword">import</span> dev.architectury.registry.registries.DeferredRegister;</span><br><span class="line"><span class="keyword">import</span> dev.architectury.registry.registries.RegistrarManager;</span><br><span class="line"><span class="keyword">import</span> dev.architectury.registry.registries.RegistrySupplier;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.core.registries.Registries;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.network.chat.Component;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.item.CreativeModeTab;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.item.Item;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.item.ItemStack;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.block.ModBlock;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.item.ModCreativeTab;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.item.ModItem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TutorialMod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MOD_ID</span> <span class="operator">=</span> <span class="string">&quot;tutorialmod&quot;</span>;</span><br><span class="line">    <span class="comment">// We can use this if we don&#x27;t want to use DeferredRegister</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Supplier&lt;RegistrarManager&gt; REGISTRIES = Suppliers.memoize(() -&gt; RegistrarManager.get(MOD_ID));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123; <span class="comment">// 这里线注册方块，在注册Item，不可以反过来</span></span><br><span class="line">        ModCreativeTab.register();</span><br><span class="line">        ModBlock.register();</span><br><span class="line">        ModItem.register();</span><br><span class="line"></span><br><span class="line">        System.out.println(TutorialModExpectPlatform.getConfigDirectory().toAbsolutePath().normalize().toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="添加blockstate"><a href="#添加blockstate" class="headerlink" title="添加blockstate"></a>添加blockstate</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;variants&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;model&quot;</span>: <span class="string">&quot;tutorialmod:block/zircon_block&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加model"><a href="#添加model" class="headerlink" title="添加model"></a>添加model</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;parent&quot;</span>: <span class="string">&quot;minecraft:block/cube_all&quot;</span>,</span><br><span class="line">  <span class="string">&quot;textures&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;all&quot;</span>: <span class="string">&quot;tutorialmod:block/zircon_block&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加item-model"><a href="#添加item-model" class="headerlink" title="添加item model"></a>添加item model</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;parent&quot;</span>: <span class="string">&quot;tutorialmod:block/zircon_block&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加texture"><a href="#添加texture" class="headerlink" title="添加texture"></a>添加texture</h2><h2 id="添加lang"><a href="#添加lang" class="headerlink" title="添加lang"></a>添加lang</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;item.tutorialmod.zircon&quot;</span>: <span class="string">&quot;Zircon&quot;</span>,</span><br><span class="line">  <span class="string">&quot;itemGroup.tutorialmod.example_tab&quot;</span>: <span class="string">&quot;TutoriablTab&quot;</span>,</span><br><span class="line">  <span class="string">&quot;block.tutorialmod.zircon_block&quot;</span>: <span class="string">&quot;Zircon Block&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 我的世界 </tag>
            
            <tag> 模组教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Architectury-01-添加物品</title>
      <link href="/2023/10/28/Architectury-01-%E6%B7%BB%E5%8A%A0%E7%89%A9%E5%93%81/"/>
      <url>/2023/10/28/Architectury-01-%E6%B7%BB%E5%8A%A0%E7%89%A9%E5%93%81/</url>
      
        <content type="html"><![CDATA[<h1 id="添加方块"><a href="#添加方块" class="headerlink" title="添加方块"></a>添加方块</h1><p><img src="https://s2.loli.net/2023/10/28/9Y1U3PzImcJWT8x.png" alt="image-20231028204614315"></p><h2 id="添加方块-1"><a href="#添加方块-1" class="headerlink" title="添加方块"></a>添加方块</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.tutorialmod.item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dev.architectury.registry.registries.DeferredRegister;</span><br><span class="line"><span class="keyword">import</span> dev.architectury.registry.registries.RegistrySupplier;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.core.registries.Registries;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.item.Item;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.TutorialMod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModItem</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DeferredRegister&lt;Item&gt; ITEMS = DeferredRegister.create(TutorialMod.MOD_ID, Registries.ITEM);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistrySupplier&lt;Item&gt; EXAMPLE_ITEM = ITEMS.register(<span class="string">&quot;zircon&quot;</span>, () -&gt;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Item</span>(<span class="keyword">new</span> <span class="title class_">Item</span>.Properties().arch$tab(ModCreativeTab.EXAMPLE_TAB)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">()</span>&#123;</span><br><span class="line">        ITEMS.register();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="添加创造物品栏"><a href="#添加创造物品栏" class="headerlink" title="添加创造物品栏"></a>添加创造物品栏</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.tutorialmod.item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dev.architectury.registry.CreativeTabRegistry;</span><br><span class="line"><span class="keyword">import</span> dev.architectury.registry.registries.DeferredRegister;</span><br><span class="line"><span class="keyword">import</span> dev.architectury.registry.registries.RegistrySupplier;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.core.registries.Registries;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.network.chat.Component;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.item.CreativeModeTab;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.world.item.ItemStack;</span><br><span class="line"><span class="keyword">import</span> net.tutorialmod.TutorialMod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModCreativeTab</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DeferredRegister&lt;CreativeModeTab&gt; TABS = DeferredRegister.create(TutorialMod.MOD_ID, Registries.CREATIVE_MODE_TAB);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistrySupplier&lt;CreativeModeTab&gt; EXAMPLE_TAB = TABS.register(<span class="string">&quot;example_tab&quot;</span>, () -&gt;</span><br><span class="line">            CreativeTabRegistry.create(Component.translatable(<span class="string">&quot;itemGroup.&quot;</span> + TutorialMod.MOD_ID + <span class="string">&quot;.example_tab&quot;</span>),</span><br><span class="line">                    () -&gt; <span class="keyword">new</span> <span class="title class_">ItemStack</span>(ModItem.EXAMPLE_ITEM.get())));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">()</span>&#123;</span><br><span class="line">        TABS.register();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="创建语言文件"><a href="#创建语言文件" class="headerlink" title="创建语言文件"></a>创建语言文件</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;item.tutorialmod.zircon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Zircon&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;itemGroup.tutorialmod.example_tab&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TutoriablTab&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="创建models-item"><a href="#创建models-item" class="headerlink" title="创建models-item"></a>创建models-item</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;parent&quot;</span>: <span class="string">&quot;minecraft:item/generated&quot;</span>,</span><br><span class="line">  <span class="string">&quot;textures&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;layer0&quot;</span>: <span class="string">&quot;tutorialmod:item/zircon&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建贴图"><a href="#创建贴图" class="headerlink" title="创建贴图"></a>创建贴图</h2><p><img src="https://s2.loli.net/2023/10/28/IH5BTa4WK9s6tCF.png" alt="image-20231028204651340"></p><h2 id="进入游戏测试"><a href="#进入游戏测试" class="headerlink" title="进入游戏测试"></a>进入游戏测试</h2><p><img src="https://s2.loli.net/2023/10/28/u1m32KvjzM9NDgb.png" alt="image-20231028204958179"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 我的世界 </tag>
            
            <tag> 模组教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typro自动上传图片到图床</title>
      <link href="/2023/10/28/typro%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0%E5%9B%BE%E5%BA%8A/"/>
      <url>/2023/10/28/typro%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="声明本文转载自知乎，仅作留存，侵删"><a href="#声明本文转载自知乎，仅作留存，侵删" class="headerlink" title="声明本文转载自知乎，仅作留存，侵删"></a>声明本文转载自知乎，仅作留存，侵删</h1><p><a href="https://zhuanlan.zhihu.com/p/378892917">Typora 中设置PicGo 图床实现图片自动上传 - 知乎 (zhihu.com)</a></p><h1 id="关于补充内容"><a href="#关于补充内容" class="headerlink" title="关于补充内容"></a>关于补充内容</h1><p>因为smsm图床貌似ban掉了测试用的上传图片，所以会显示失败，可以自己尝试插入图片看看，是否上传成功。我这里是没有问题的。不过冒失smsm图传会有限制5gb，这个问题满了再说。</p><p>以下是报错内容,可见是被blocked了。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Error: This image has been blocked, please contact webmaster for more information.</span><br><span class="line">at Object.We [as handle] </span><br><span class="line">-------Error Stack End-------</span><br><span class="line">2023-10-28 09:45:49 [PicGo INFO] [PicGo Server] upload result</span><br><span class="line">2023-10-28 09:45:49 [PicGo WARN] [PicGo Server] upload failed, see picgo.log for more detail ↑</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="以下是原文内容"><a href="#以下是原文内容" class="headerlink" title="以下是原文内容"></a>以下是原文内容</h1><hr><p>在众多 md 编辑器中，Typora 是大家公认的体验较好的写作软件之一，它最大的特点就是：所见即所得，无须分屏预览，或者开启新页面预览。那么Typora 中能不能直接粘贴图片后，就自动上传到图床呢？下面就来介绍如何配置，以及 PicGo 的使用。实现图片的自动上传。</p><p><a href="https://link.zhihu.com/?target=http://kogoal.com/">Kogoal</a>介绍了使用 SM.MS 这一种图床，其他图床的配置可以参考PicGo。</p><h2 id="使用到的工具"><a href="#使用到的工具" class="headerlink" title="使用到的工具"></a><strong>使用到的工具</strong></h2><p><strong><code>SM.MS</code></strong>: <strong>免费</strong>图床。</p><p><strong><code>PicGo</code></strong> 开源的图片管理工具，可以自己上传图片到各种图床。</p><p><strong><code>Typora</code></strong>: 写Markdown的神器，轻便简洁的Markdown编辑器，支持<strong>即时渲染</strong>技术。</p><p>安装步骤不分先后，建议按照上面顺序安装，因为存在token或者设置需要在后续的安装中用到。</p><h2 id="1-注册SM-MS"><a href="#1-注册SM-MS" class="headerlink" title="1.注册SM.MS"></a><strong>1.注册SM.MS</strong></h2><p>SM.MS 图床用户注册，注册网站：<a href="https://link.zhihu.com/?target=https://sm.ms/">https://sm.ms/</a></p><p>免费的用户空间是5G,如果是土豪朋友可以选择premium 价格是399 USD</p><p><img src="https://pic4.zhimg.com/v2-7394dd1dd68b7eb2048eb84c6d3b4413_b.jpg"></p><p>新注册用户登录之后，点击左侧 API Token 点击 Generate Secret Token 然后复制保存，这个Secret Token 会在第二步PicGo中用到。</p><p><img src="https://pic4.zhimg.com/v2-14217baea54f13efa2e0a1ae5de6abbb_b.jpg"></p><h2 id="2、安装配置-PicGo"><a href="#2、安装配置-PicGo" class="headerlink" title="2、安装配置 PicGo"></a><strong>2、安装配置 PicGo</strong></h2><h3 id="2-1-安装PicGo"><a href="#2-1-安装PicGo" class="headerlink" title="2.1 安装PicGo"></a><strong>2.1 安装PicGo</strong></h3><p>点击此处下载PicGo <a href="https://link.zhihu.com/?target=https://github.com/Molunerfinn/PicGo/releases">应用</a></p><p><strong>Windows</strong> Windows 用户请下载最新版本的 <code>exe</code> 文件。</p><p><strong>macOS</strong> macOS 用户请下载最新版本的 <code>dmg</code> 文件。</p><p><strong>Linux</strong> Linux 用户请下载 <code>AppImage</code> 文件。</p><p>一路next后，安装完成后如下。</p><p><img src="https://pic1.zhimg.com/v2-94118be84cb59d9f2eb00311b01b16f4_b.jpg"></p><h3 id="2-2-配置PicGo"><a href="#2-2-配置PicGo" class="headerlink" title="2.2 配置PicGo"></a><strong>2.2 配置PicGo</strong></h3><h3 id="设定token值"><a href="#设定token值" class="headerlink" title="设定token值"></a><strong>设定token值</strong></h3><p>此处的Token值就是在SM.MS 上生成的Secret Token。点击确定。</p><p><img src="https://pic1.zhimg.com/v2-72836bb9ebf9cdd5f8890aec57c26bb8_b.jpg"></p><h3 id="2-3-安装插件"><a href="#2-3-安装插件" class="headerlink" title="2.3 安装插件"></a><strong>2.3 安装插件</strong></h3><p>再安装插件之前，确保你已经安装了 Node.js，因为 PicGo 是使用 npm 来安装的。地址：<a href="https://link.zhihu.com/?target=https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a></p><p>到 PicGo-插件设置里面搜索一个插件：<strong>picgo-plugin-smms-user</strong>，点击安装。</p><p><img src="https://pic2.zhimg.com/v2-3495f468126a28712cfd970bb68eddd1_b.jpg"></p><h2 id="3、安装配置Typora"><a href="#3、安装配置Typora" class="headerlink" title="3、安装配置Typora"></a><strong>3、安装配置Typora</strong></h2><h3 id="3-1-下载最新版本的-Typora"><a href="#3-1-下载最新版本的-Typora" class="headerlink" title="3.1 下载最新版本的 Typora"></a><strong>3.1 下载最新版本的 Typora</strong></h3><p>下载地址：<a href="https://link.zhihu.com/?target=https://www.typora.io/">https://www.typora.io/</a></p><h3 id="3-2-设置图像上传"><a href="#3-2-设置图像上传" class="headerlink" title="3.2 设置图像上传"></a><strong>3.2 设置图像上传</strong></h3><p>根据个人喜好，我把 Typora 的语言设置为简体中文。</p><p><img src="https://pic3.zhimg.com/v2-58aa217dd6792bed040aec70739bcf2e_b.jpg"></p><p>Typora配置图床选项这里标注了三个红框：</p><ul><li>第一默认不是 上传图片 选项，下拉选择它；</li><li>第二个红框建议两个都选择，这样你写作所用到的图片无论是本地上传还是网络图片，都会直接上传到你的图床；</li><li>第三个红框是图床工具，选择刚过安装的PicGo的安装目录。</li></ul><p><img src="https://s2.loli.net/2023/10/28/tIRNkbTHCQVKJwL.jpg"></p><p>点击<strong>验证图片上传</strong>选项，会自动上传一张测试图片，如果提示成功上传图片并获得新的URL。证明上传成功。</p><p><img src="https://s2.loli.net/2023/10/28/bymavDKTY9EtlXx.jpg"></p><h2 id="Typora-中测试上传图片"><a href="#Typora-中测试上传图片" class="headerlink" title="Typora 中测试上传图片"></a><strong>Typora 中测试上传图片</strong></h2><p>在markdown文件中需要使用图片的地方，右键选择上传图片。点击后即可上传图片至图床。如果仔细看markdown的图片路径，就会发现已经从本地的路径变成了网页的路径。到这里说明我们的图床工具上传图片已经没有问题了，现在就可以在 Typora 中安心的码字了。</p><p>（本文为Typora完成）</p><p><img src="https://s2.loli.net/2023/10/28/pzrZJ8YCcdyxvbA.jpg"></p><p><em>KO Goal，Goal OK. 专注于提升工作效率。点击了解<a href="https://link.zhihu.com/?target=http://kogoal.com/">Kogoal</a>更多。</em></p>]]></content>
      
      
      
        <tags>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的世界Forge ep5：添加线缆</title>
      <link href="/2023/10/27/%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8Cep5%E6%B7%BB%E5%8A%A0%E7%94%B5%E7%BC%86%E6%95%99%E7%A8%8B/"/>
      <url>/2023/10/27/%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8Cep5%E6%B7%BB%E5%8A%A0%E7%94%B5%E7%BC%86%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="ep5"><a href="#ep5" class="headerlink" title="ep5"></a>ep5</h1><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>本文章翻译自mcjty的教程，<a href="https://www.mcjty.eu/docs/1.20/ep5#introduction">源地址</a>,侵删</p><h2 id="link"><a href="#link" class="headerlink" title="link"></a>link</h2><ul><li><a href="https://youtu.be/WUhet8dOlAs">视频</a></li><li><a href="https://github.com/McJty/Tut4_3Power">Github地址</a></li></ul><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>本章是ep4的继续，在ep4中，增加了能发电的发电机和一个消耗电量的方块。如果你把他们彼此放在一起，你就可以让发电机给电池充电，然而，我们还没有办法远距离传输电量，在这节中，我们增加一种简单的电缆系统，它可以将电力从任何的发电机或者电池传输到任意需要电力的机器上。这不是一个完整的系统，这是一个简单的系统达到我们的目的。同时我们希望这个线缆是一个含水方块</p><ul><li>烘焙模型</li><li>自定义模型加载器</li><li>复杂的形状</li><li>含水方块</li></ul><h2 id="烘焙模型"><a href="#烘焙模型" class="headerlink" title="烘焙模型"></a>烘焙模型</h2><p>可以使用一个简单的json制作一个线缆系统，然而，这样会导致生成很多的json组合，同时我们希望可以模拟其他的方块，这是Json模型无法做到的，所以我们使用烘焙模型，烘焙模型是一个我们可以使用代码生成模型的系统，在这一系统，这样做会有更多的工作量，但是也更加灵活</p><h3 id="线缆"><a href="#线缆" class="headerlink" title="线缆"></a>线缆</h3><p><img src="https://picst.sunbangyan.cn/2023/10/27/805bccded2b6f545898a4a05a2b24f44.png" alt="cables-1e682971f988e084ee146460c1910911"></p><h4 id="连接类型枚举"><a href="#连接类型枚举" class="headerlink" title="连接类型枚举"></a>连接类型枚举</h4><p>这是一个枚举类，用于表示某个方向上的链接类型，有以下三种类型的数值:<code>CABLE</code>,<code>BLOCK</code>,<code>NONE</code></p><ul><li><code>CABLE</code>:表示这个方向有一个电缆</li><li><code>BLOCK</code>:表示这个方向有一个有一个方块</li><li><code>NONE</code>:表示这个方向什么也没有</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ConnectorType</span> <span class="keyword">implements</span> <span class="title class_">StringRepresentable</span> &#123;</span><br><span class="line">    NONE,</span><br><span class="line">    CABLE,</span><br><span class="line">    BLOCK;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ConnectorType[] VALUES = values();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Nonnull</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSerializedName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name().toLowerCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="线缆方块"><a href="#线缆方块" class="headerlink" title="线缆方块"></a>线缆方块</h4><p>电缆也是一个方块，所以我们需要添加一个新的方块，我们叫他CableBlock，这个类中有比较多的带， 所以这里我们分为几个部分讲。</p><p>首先需要6个枚举用于指明某个方向上是由含有线缆或者方块，<code>FACEDID</code>是一个特殊的模型属性，我们使用这个属性指出我们正在模仿另一个块的面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CableBlock</span> <span class="keyword">extends</span> <span class="title class_">Block</span> <span class="keyword">implements</span> <span class="title class_">SimpleWaterloggedBlock</span>, EntityBlock &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Properties that indicate if there is the same block in a certain direction.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> EnumProperty&lt;ConnectorType&gt; NORTH = EnumProperty.&lt;ConnectorType&gt;create(<span class="string">&quot;north&quot;</span>, ConnectorType.class);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> EnumProperty&lt;ConnectorType&gt; SOUTH = EnumProperty.&lt;ConnectorType&gt;create(<span class="string">&quot;south&quot;</span>, ConnectorType.class);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> EnumProperty&lt;ConnectorType&gt; WEST = EnumProperty.&lt;ConnectorType&gt;create(<span class="string">&quot;west&quot;</span>, ConnectorType.class);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> EnumProperty&lt;ConnectorType&gt; EAST = EnumProperty.&lt;ConnectorType&gt;create(<span class="string">&quot;east&quot;</span>, ConnectorType.class);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> EnumProperty&lt;ConnectorType&gt; UP = EnumProperty.&lt;ConnectorType&gt;create(<span class="string">&quot;up&quot;</span>, ConnectorType.class);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> EnumProperty&lt;ConnectorType&gt; DOWN = EnumProperty.&lt;ConnectorType&gt;create(<span class="string">&quot;down&quot;</span>, ConnectorType.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ModelProperty&lt;BlockState&gt; FACADEID = <span class="keyword">new</span> <span class="title class_">ModelProperty</span>&lt;&gt;();</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>下一部分是我们方块的形状，我们希望方块的模型和我们实际的电缆模型一致，这也是为什么当特定方向上是线缆的时候具有六个形状，当特定方向是方块时候有两个形状，因为我们的getShape（）必须是高效的， 所以我们有一个ShapeCache，存储了所有可能的形状。</p><p> makeShapes（）负责创建缓存，他由构造函数调用。calculateShapeIndex（）函数根据六个方向上的连接类型计算缓存中的索引。makeShape（）是基于六个方向创建形状。combineShape（）函数将和特定的形状形成组合。如果电缆连接的是电缆我们只需要简单的显示电缆，如果连接的是块，则需要显示电缆和块连接的形状。</p><p>updateShape（）是当临近方块改变时候回调的方法，这种情况下，我们选哟重新计算形状。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> VoxelShape[] shapeCache = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">VoxelShape</span> <span class="variable">SHAPE_CABLE_NORTH</span> <span class="operator">=</span> Shapes.box(<span class="number">.4</span>, <span class="number">.4</span>, <span class="number">0</span>, <span class="number">.6</span>, <span class="number">.6</span>, <span class="number">.4</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">VoxelShape</span> <span class="variable">SHAPE_CABLE_SOUTH</span> <span class="operator">=</span> Shapes.box(<span class="number">.4</span>, <span class="number">.4</span>, <span class="number">.6</span>, <span class="number">.6</span>, <span class="number">.6</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">VoxelShape</span> <span class="variable">SHAPE_CABLE_WEST</span> <span class="operator">=</span> Shapes.box(<span class="number">0</span>, <span class="number">.4</span>, <span class="number">.4</span>, <span class="number">.4</span>, <span class="number">.6</span>, <span class="number">.6</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">VoxelShape</span> <span class="variable">SHAPE_CABLE_EAST</span> <span class="operator">=</span> Shapes.box(<span class="number">.6</span>, <span class="number">.4</span>, <span class="number">.4</span>, <span class="number">1</span>, <span class="number">.6</span>, <span class="number">.6</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">VoxelShape</span> <span class="variable">SHAPE_CABLE_UP</span> <span class="operator">=</span> Shapes.box(<span class="number">.4</span>, <span class="number">.6</span>, <span class="number">.4</span>, <span class="number">.6</span>, <span class="number">1</span>, <span class="number">.6</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">VoxelShape</span> <span class="variable">SHAPE_CABLE_DOWN</span> <span class="operator">=</span> Shapes.box(<span class="number">.4</span>, <span class="number">0</span>, <span class="number">.4</span>, <span class="number">.6</span>, <span class="number">.4</span>, <span class="number">.6</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">VoxelShape</span> <span class="variable">SHAPE_BLOCK_NORTH</span> <span class="operator">=</span> Shapes.box(<span class="number">.2</span>, <span class="number">.2</span>, <span class="number">0</span>, <span class="number">.8</span>, <span class="number">.8</span>, <span class="number">.1</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">VoxelShape</span> <span class="variable">SHAPE_BLOCK_SOUTH</span> <span class="operator">=</span> Shapes.box(<span class="number">.2</span>, <span class="number">.2</span>, <span class="number">.9</span>, <span class="number">.8</span>, <span class="number">.8</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">VoxelShape</span> <span class="variable">SHAPE_BLOCK_WEST</span> <span class="operator">=</span> Shapes.box(<span class="number">0</span>, <span class="number">.2</span>, <span class="number">.2</span>, <span class="number">.1</span>, <span class="number">.8</span>, <span class="number">.8</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">VoxelShape</span> <span class="variable">SHAPE_BLOCK_EAST</span> <span class="operator">=</span> Shapes.box(<span class="number">.9</span>, <span class="number">.2</span>, <span class="number">.2</span>, <span class="number">1</span>, <span class="number">.8</span>, <span class="number">.8</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">VoxelShape</span> <span class="variable">SHAPE_BLOCK_UP</span> <span class="operator">=</span> Shapes.box(<span class="number">.2</span>, <span class="number">.9</span>, <span class="number">.2</span>, <span class="number">.8</span>, <span class="number">1</span>, <span class="number">.8</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">VoxelShape</span> <span class="variable">SHAPE_BLOCK_DOWN</span> <span class="operator">=</span> Shapes.box(<span class="number">.2</span>, <span class="number">0</span>, <span class="number">.2</span>, <span class="number">.8</span>, <span class="number">.1</span>, <span class="number">.8</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">calculateShapeIndex</span><span class="params">(ConnectorType north, ConnectorType south, ConnectorType west, ConnectorType east, ConnectorType up, ConnectorType down)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> ConnectorType.values().length;</span><br><span class="line">    <span class="keyword">return</span> ((((south.ordinal() * l + north.ordinal()) * l + west.ordinal()) * l + east.ordinal()) * l + up.ordinal()) * l + down.ordinal();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">makeShapes</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (shapeCache == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> ConnectorType.values().length;</span><br><span class="line">        shapeCache = <span class="keyword">new</span> <span class="title class_">VoxelShape</span>[length * length * length * length * length * length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (ConnectorType up : ConnectorType.VALUES) &#123;</span><br><span class="line">            <span class="keyword">for</span> (ConnectorType down : ConnectorType.VALUES) &#123;</span><br><span class="line">                <span class="keyword">for</span> (ConnectorType north : ConnectorType.VALUES) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (ConnectorType south : ConnectorType.VALUES) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (ConnectorType east : ConnectorType.VALUES) &#123;</span><br><span class="line">                            <span class="keyword">for</span> (ConnectorType west : ConnectorType.VALUES) &#123;</span><br><span class="line">                                <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> calculateShapeIndex(north, south, west, east, up, down);</span><br><span class="line">                                shapeCache[idx] = makeShape(north, south, west, east, up, down);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> VoxelShape <span class="title function_">makeShape</span><span class="params">(ConnectorType north, ConnectorType south, ConnectorType west, ConnectorType east, ConnectorType up, ConnectorType down)</span> &#123;</span><br><span class="line">    <span class="type">VoxelShape</span> <span class="variable">shape</span> <span class="operator">=</span> Shapes.box(<span class="number">.4</span>, <span class="number">.4</span>, <span class="number">.4</span>, <span class="number">.6</span>, <span class="number">.6</span>, <span class="number">.6</span>);</span><br><span class="line">    shape = combineShape(shape, north, SHAPE_CABLE_NORTH, SHAPE_BLOCK_NORTH);</span><br><span class="line">    shape = combineShape(shape, south, SHAPE_CABLE_SOUTH, SHAPE_BLOCK_SOUTH);</span><br><span class="line">    shape = combineShape(shape, west, SHAPE_CABLE_WEST, SHAPE_BLOCK_WEST);</span><br><span class="line">    shape = combineShape(shape, east, SHAPE_CABLE_EAST, SHAPE_BLOCK_EAST);</span><br><span class="line">    shape = combineShape(shape, up, SHAPE_CABLE_UP, SHAPE_BLOCK_UP);</span><br><span class="line">    shape = combineShape(shape, down, SHAPE_CABLE_DOWN, SHAPE_BLOCK_DOWN);</span><br><span class="line">    <span class="keyword">return</span> shape;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">private</span> VoxelShape <span class="title function_">combineShape</span><span class="params">(VoxelShape shape, ConnectorType connectorType, VoxelShape cableShape, VoxelShape blockShape)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (connectorType == ConnectorType.CABLE) &#123;</span><br><span class="line">        <span class="keyword">return</span> Shapes.join(shape, cableShape, BooleanOp.OR);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (connectorType == ConnectorType.BLOCK) &#123;</span><br><span class="line">        <span class="keyword">return</span> Shapes.join(shape, Shapes.join(blockShape, cableShape, BooleanOp.OR), BooleanOp.OR);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> shape;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="meta">@Nonnull</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> VoxelShape <span class="title function_">getShape</span><span class="params">(<span class="meta">@Nonnull</span> BlockState state, <span class="meta">@Nonnull</span> BlockGetter world, <span class="meta">@Nonnull</span> BlockPos pos, <span class="meta">@Nonnull</span> CollisionContext context)</span> &#123;</span><br><span class="line">    <span class="type">ConnectorType</span> <span class="variable">north</span> <span class="operator">=</span> getConnectorType(world, pos, Direction.NORTH);</span><br><span class="line">    <span class="type">ConnectorType</span> <span class="variable">south</span> <span class="operator">=</span> getConnectorType(world, pos, Direction.SOUTH);</span><br><span class="line">    <span class="type">ConnectorType</span> <span class="variable">west</span> <span class="operator">=</span> getConnectorType(world, pos, Direction.WEST);</span><br><span class="line">    <span class="type">ConnectorType</span> <span class="variable">east</span> <span class="operator">=</span> getConnectorType(world, pos, Direction.EAST);</span><br><span class="line">    <span class="type">ConnectorType</span> <span class="variable">up</span> <span class="operator">=</span> getConnectorType(world, pos, Direction.UP);</span><br><span class="line">    <span class="type">ConnectorType</span> <span class="variable">down</span> <span class="operator">=</span> getConnectorType(world, pos, Direction.DOWN);</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> calculateShapeIndex(north, south, west, east, up, down);</span><br><span class="line">    <span class="keyword">return</span> shapeCache[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nonnull</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> BlockState <span class="title function_">updateShape</span><span class="params">(BlockState state, <span class="meta">@Nonnull</span> Direction direction, <span class="meta">@Nonnull</span> BlockState neighbourState, <span class="meta">@Nonnull</span> LevelAccessor world, <span class="meta">@Nonnull</span> BlockPos current, <span class="meta">@Nonnull</span> BlockPos offset)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (state.getValue(WATERLOGGED)) &#123;</span><br><span class="line">        world.getFluidTicks().schedule(<span class="keyword">new</span> <span class="title class_">ScheduledTick</span>&lt;&gt;(Fluids.WATER, current, Fluids.WATER.getTickDelay(world), <span class="number">0L</span>));   <span class="comment">// @todo 1.18 what is this last parameter exactly?</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> calculateState(world, current, state);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们有了构造方法（在这里调用makeShapes（））我们设置含水方块是false，我们还需要为block entity 和block entity tiker实现相应的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">CableBlock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(Properties.of()</span><br><span class="line">            .strength(<span class="number">1.0f</span>)</span><br><span class="line">            .sound(SoundType.METAL)</span><br><span class="line">            .noOcclusion()</span><br><span class="line">    );</span><br><span class="line">    makeShapes();</span><br><span class="line">    registerDefaultState(defaultBlockState().setValue(WATERLOGGED, <span class="literal">false</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> BlockEntity <span class="title function_">newBlockEntity</span><span class="params">(BlockPos blockPos, BlockState blockState)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CableBlockEntity</span>(blockPos, blockState);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T <span class="keyword">extends</span> <span class="title class_">BlockEntity</span>&gt; BlockEntityTicker&lt;T&gt; <span class="title function_">getTicker</span><span class="params">(Level level, BlockState state, BlockEntityType&lt;T&gt; type)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (level.isClientSide) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (lvl, pos, st, be) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (be <span class="keyword">instanceof</span> CableBlockEntity cable) &#123;</span><br><span class="line">                cable.tickServer();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>neighborChanged()和setPlacedBy用于标记实体的脏位，当某些东西改变的时候。这是为了让我们方块可以更新电缆网络（之后会介绍）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">neighborChanged</span><span class="params">(BlockState state, Level level, BlockPos pos, Block block, BlockPos fromPos, <span class="type">boolean</span> isMoving)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.neighborChanged(state, level, pos, block, fromPos, isMoving);</span><br><span class="line">    <span class="keyword">if</span> (!level.isClientSide &amp;&amp; level.getBlockEntity(pos) <span class="keyword">instanceof</span> CableBlockEntity cable) &#123;</span><br><span class="line">        cable.markDirty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPlacedBy</span><span class="params">(<span class="meta">@Nonnull</span> Level level, <span class="meta">@Nonnull</span> BlockPos pos, <span class="meta">@Nonnull</span> BlockState state, <span class="meta">@Nullable</span> LivingEntity placer, <span class="meta">@Nonnull</span> ItemStack stack)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.setPlacedBy(level, pos, state, placer, stack);</span><br><span class="line">    <span class="keyword">if</span> (!level.isClientSide &amp;&amp; level.getBlockEntity(pos) <span class="keyword">instanceof</span> CableBlockEntity cable) &#123;</span><br><span class="line">        cable.markDirty();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">BlockState</span> <span class="variable">blockState</span> <span class="operator">=</span> calculateState(level, pos, state);</span><br><span class="line">    <span class="keyword">if</span> (state != blockState) &#123;</span><br><span class="line">        level.setBlockAndUpdate(pos, blockState);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getConnectorType()和isConnectable()方法用于确定在某个方向上的连接类型。这用于计算线缆的形状。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Return the connector type for the given position and facing direction</span></span><br><span class="line"><span class="keyword">private</span> ConnectorType <span class="title function_">getConnectorType</span><span class="params">(BlockGetter world, BlockPos connectorPos, Direction facing)</span> &#123;</span><br><span class="line">    <span class="type">BlockPos</span> <span class="variable">pos</span> <span class="operator">=</span> connectorPos.relative(facing);</span><br><span class="line">    <span class="type">BlockState</span> <span class="variable">state</span> <span class="operator">=</span> world.getBlockState(pos);</span><br><span class="line">    <span class="type">Block</span> <span class="variable">block</span> <span class="operator">=</span> state.getBlock();</span><br><span class="line">    <span class="keyword">if</span> (block <span class="keyword">instanceof</span> CableBlock) &#123;</span><br><span class="line">        <span class="keyword">return</span> ConnectorType.CABLE;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isConnectable(world, connectorPos, facing)) &#123;</span><br><span class="line">        <span class="keyword">return</span> ConnectorType.BLOCK;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ConnectorType.NONE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return true if the block at the given position is connectable to a cable. This is the</span></span><br><span class="line"><span class="comment">// case if the block supports forge energy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isConnectable</span><span class="params">(BlockGetter world, BlockPos connectorPos, Direction facing)</span> &#123;</span><br><span class="line">    <span class="type">BlockPos</span> <span class="variable">pos</span> <span class="operator">=</span> connectorPos.relative(facing);</span><br><span class="line">    <span class="type">BlockState</span> <span class="variable">state</span> <span class="operator">=</span> world.getBlockState(pos);</span><br><span class="line">    <span class="keyword">if</span> (state.isAir()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">BlockEntity</span> <span class="variable">te</span> <span class="operator">=</span> world.getBlockEntity(pos);</span><br><span class="line">    <span class="keyword">if</span> (te == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> te.getCapability(ForgeCapabilities.ENERGY).isPresent();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>剩余的功能是定义和设置方块的状态，是必须要的。支持含水方块很简单，仅选哟台南佳WATERLOGGED属性，并重写getFluidState（）方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">createBlockStateDefinition</span><span class="params">(<span class="meta">@Nonnull</span> StateDefinition.Builder&lt;Block, BlockState&gt; builder)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.createBlockStateDefinition(builder);</span><br><span class="line">        builder.add(WATERLOGGED, NORTH, SOUTH, EAST, WEST, UP, DOWN);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> BlockState <span class="title function_">getStateForPlacement</span><span class="params">(BlockPlaceContext context)</span> &#123;</span><br><span class="line">        <span class="type">Level</span> <span class="variable">world</span> <span class="operator">=</span> context.getLevel();</span><br><span class="line">        <span class="type">BlockPos</span> <span class="variable">pos</span> <span class="operator">=</span> context.getClickedPos();</span><br><span class="line">        <span class="keyword">return</span> calculateState(world, pos, defaultBlockState())</span><br><span class="line">                .setValue(WATERLOGGED, world.getFluidState(pos).getType() == Fluids.WATER);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nonnull</span></span><br><span class="line">    <span class="keyword">private</span> BlockState <span class="title function_">calculateState</span><span class="params">(LevelAccessor world, BlockPos pos, BlockState state)</span> &#123;</span><br><span class="line">        <span class="type">ConnectorType</span> <span class="variable">north</span> <span class="operator">=</span> getConnectorType(world, pos, Direction.NORTH);</span><br><span class="line">        <span class="type">ConnectorType</span> <span class="variable">south</span> <span class="operator">=</span> getConnectorType(world, pos, Direction.SOUTH);</span><br><span class="line">        <span class="type">ConnectorType</span> <span class="variable">west</span> <span class="operator">=</span> getConnectorType(world, pos, Direction.WEST);</span><br><span class="line">        <span class="type">ConnectorType</span> <span class="variable">east</span> <span class="operator">=</span> getConnectorType(world, pos, Direction.EAST);</span><br><span class="line">        <span class="type">ConnectorType</span> <span class="variable">up</span> <span class="operator">=</span> getConnectorType(world, pos, Direction.UP);</span><br><span class="line">        <span class="type">ConnectorType</span> <span class="variable">down</span> <span class="operator">=</span> getConnectorType(world, pos, Direction.DOWN);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> state</span><br><span class="line">                .setValue(NORTH, north)</span><br><span class="line">                .setValue(SOUTH, south)</span><br><span class="line">                .setValue(WEST, west)</span><br><span class="line">                .setValue(EAST, east)</span><br><span class="line">                .setValue(UP, up)</span><br><span class="line">                .setValue(DOWN, down);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nonnull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> FluidState <span class="title function_">getFluidState</span><span class="params">(BlockState state)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state.getValue(WATERLOGGED) ? Fluids.WATER.getSource(<span class="literal">false</span>) : <span class="built_in">super</span>.getFluidState(state);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Cable-Block-Entity"><a href="#Cable-Block-Entity" class="headerlink" title="Cable Block Entity"></a>Cable Block Entity</h4><p>Cable Block Entity负责追踪线缆网络。还负责追踪流过线缆的电量，电缆的网络简单的由一组具有能量接收器的坐标表示。当任意一个相邻的方块改变时候都需要重新计算网络。当方块放置或者移除的时候也需要重新计算网络。</p><ul><li>WARN：这里给出的网络的实现是可行的，但是并不完美。这只是一个简单的实现，对我们的目的有效。更先进的mod（例如XNet）具有更先进的有线网络，并将其网络数据缓存在SavedData结构中。</li></ul><p>这个block entity的第一部分和之前的一样，因为线缆也是一个energy handler，所以需要这种capability。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CableBlockEntity</span> <span class="keyword">extends</span> <span class="title class_">BlockEntity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ENERGY_TAG</span> <span class="operator">=</span> <span class="string">&quot;Energy&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAXTRANSFER</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CAPACITY</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">EnergyStorage</span> <span class="variable">energy</span> <span class="operator">=</span> createEnergyStorage();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LazyOptional&lt;IEnergyStorage&gt; energyHandler = LazyOptional.of(() -&gt; <span class="keyword">new</span> <span class="title class_">AdaptedEnergyStorage</span>(energy) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">extractEnergy</span><span class="params">(<span class="type">int</span> maxExtract, <span class="type">boolean</span> simulate)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">receiveEnergy</span><span class="params">(<span class="type">int</span> maxReceive, <span class="type">boolean</span> simulate)</span> &#123;</span><br><span class="line">            setChanged();</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.receiveEnergy(maxReceive, simulate);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canExtract</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canReceive</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">CableBlockEntity</span><span class="params">(BlockEntityType&lt;?&gt; type, BlockPos pos, BlockState state)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(type, pos, state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CableBlockEntity</span><span class="params">(BlockPos pos, BlockState state)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(Registration.CABLE_BLOCK_ENTITY.get(), pos, state);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>以下的block负责缓存输出，对于连接到网络的所有能量接收者，他们所接受的能量是一个懒惰计算集。checkOutputs（）函数计算此合集。他将遍历连接到该电缆，然后检查该线缆连接的所有能量接收器。markDirty（）函数将使得当前电缆和所有连接的电缆的输出缓存无效化。当电缆网络发生变化的时候需要这样做。</p><p>traverse（）方法是一个通用的方法，他将会遍历所有连接到此电缆的电缆并调用他们的comsumer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Cached outputs</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;BlockPos&gt; outputs = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This function will cache all outputs for this cable network. It will do this</span></span><br><span class="line"><span class="comment">// by traversing all cables connected to this cable and then check for all energy</span></span><br><span class="line"><span class="comment">// receivers around those cables.</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkOutputs</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (outputs == <span class="literal">null</span>) &#123;</span><br><span class="line">        outputs = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        traverse(worldPosition, cable -&gt; &#123;</span><br><span class="line">            <span class="comment">// Check for all energy receivers around this position (ignore cables)</span></span><br><span class="line">            <span class="keyword">for</span> (Direction direction : Direction.values()) &#123;</span><br><span class="line">                <span class="type">BlockPos</span> <span class="variable">p</span> <span class="operator">=</span> cable.getBlockPos().relative(direction);</span><br><span class="line">                <span class="type">BlockEntity</span> <span class="variable">te</span> <span class="operator">=</span> level.getBlockEntity(p);</span><br><span class="line">                <span class="keyword">if</span> (te != <span class="literal">null</span> &amp;&amp; !(te <span class="keyword">instanceof</span> CableBlockEntity)) &#123;</span><br><span class="line">                    te.getCapability(ForgeCapabilities.ENERGY).ifPresent(handler -&gt; &#123;</span><br><span class="line">                        <span class="keyword">if</span> (handler.canReceive()) &#123;</span><br><span class="line">                            outputs.add(p);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">markDirty</span><span class="params">()</span> &#123;</span><br><span class="line">    traverse(worldPosition, cable -&gt; cable.outputs = <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is a generic function that will traverse all cables connected to this cable</span></span><br><span class="line"><span class="comment">// and call the given consumer for each cable.</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">traverse</span><span class="params">(BlockPos pos, Consumer&lt;CableBlockEntity&gt; consumer)</span> &#123;</span><br><span class="line">    Set&lt;BlockPos&gt; traversed = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    traversed.add(pos);</span><br><span class="line">    consumer.accept(<span class="built_in">this</span>);</span><br><span class="line">    traverse(pos, traversed, consumer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">traverse</span><span class="params">(BlockPos pos, Set&lt;BlockPos&gt; traversed, Consumer&lt;CableBlockEntity&gt; consumer)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (Direction direction : Direction.values()) &#123;</span><br><span class="line">        <span class="type">BlockPos</span> <span class="variable">p</span> <span class="operator">=</span> pos.relative(direction);</span><br><span class="line">        <span class="keyword">if</span> (!traversed.contains(p)) &#123;</span><br><span class="line">            traversed.add(p);</span><br><span class="line">            <span class="keyword">if</span> (level.getBlockEntity(p) <span class="keyword">instanceof</span> CableBlockEntity cable) &#123;</span><br><span class="line">                consumer.accept(cable);</span><br><span class="line">                cable.traverse(p, traversed, consumer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>tickServer()方法在服务器上的每个tick都会回调。他将会将能量分发给所有的outputs。首先他会检查电缆中是否存在能量，如果没有能量，那么我们什么也不需要做。如果由能量，之后我们需要检查是否存在输出，如果没有任何输出，我们什么也不需要做。如果存在输出，那么我们分发能量到每一个outputs上。我们通过将能量除于所有的outpus来实现，然后对于每一个output我们检查它是否可以接受能量，如果可以接受我们就将能量发送给这个output。我们通过获得output的energy capability调用receiveEnergy（）方法，这个方法将会返回机器所接受的能量，我们之后减去线缆中对应的能量。</p><ul><li>WARN：同样，这不是一个完美的算法，按照这样的实现方式，一些接收器接受到能量可能会比其他的少。这是因为我们将能量除以了所有的outputs，然后一个一个的将能量发送给他们，如果第一个output不能接受能量，我们需要将能量发送给第二个output。如果第二个output可以接受能量，之后它将获得所有能量。如果第二个output不能接受能量，我们需要将能量发送给第三个output，以此类推。这意味第一个output获得的能量比第二个少。这对于我们的目的并不是一个问题，但是我们仍需要了解。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tickServer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (energy.getEnergyStored() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// Only do something if we have energy</span></span><br><span class="line">            checkOutputs();</span><br><span class="line">            <span class="keyword">if</span> (!outputs.isEmpty()) &#123;</span><br><span class="line">                <span class="comment">// Distribute energy over all outputs</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">amount</span> <span class="operator">=</span> energy.getEnergyStored() / outputs.size();</span><br><span class="line">                <span class="keyword">for</span> (BlockPos p : outputs) &#123;</span><br><span class="line">                    <span class="type">BlockEntity</span> <span class="variable">te</span> <span class="operator">=</span> level.getBlockEntity(p);</span><br><span class="line">                    <span class="keyword">if</span> (te != <span class="literal">null</span>) &#123;</span><br><span class="line">                        te.getCapability(ForgeCapabilities.ENERGY).ifPresent(handler -&gt; &#123;</span><br><span class="line">                            <span class="keyword">if</span> (handler.canReceive()) &#123;</span><br><span class="line">                                <span class="type">int</span> <span class="variable">received</span> <span class="operator">=</span> handler.receiveEnergy(amount, <span class="literal">false</span>);</span><br><span class="line">                                energy.extractEnergy(received, <span class="literal">false</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">saveAdditional</span><span class="params">(CompoundTag tag)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.saveAdditional(tag);</span><br><span class="line">        tag.put(ENERGY_TAG, energy.serializeNBT());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">load</span><span class="params">(CompoundTag tag)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.load(tag);</span><br><span class="line">        <span class="keyword">if</span> (tag.contains(ENERGY_TAG)) &#123;</span><br><span class="line">            energy.deserializeNBT(tag.get(ENERGY_TAG));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nonnull</span></span><br><span class="line">    <span class="keyword">private</span> EnergyStorage <span class="title function_">createEnergyStorage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">EnergyStorage</span>(CAPACITY, MAXTRANSFER, MAXTRANSFER);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; LazyOptional&lt;T&gt; <span class="title function_">getCapability</span><span class="params">(<span class="meta">@NotNull</span> Capability&lt;T&gt; cap, <span class="meta">@Nullable</span> Direction side)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cap == ForgeCapabilities.ENERGY) &#123;</span><br><span class="line">            <span class="keyword">return</span> energyHandler.cast();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.getCapability(cap, side);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="The-Facade"><a href="#The-Facade" class="headerlink" title="The Facade"></a>The Facade</h3><p>The Facade 是一个 block，它可以用于模仿另一个方块，facade 实际上是一个特殊的电缆。这意味着FacadeBlock应该继承CableBlock，同样FacadeBlockEntity继承CableBlockEntity，让我们复习下代码：</p><h4 id="The-Facade-Block"><a href="#The-Facade-Block" class="headerlink" title="The Facade Block"></a>The Facade Block</h4><p>Facade Block和电缆方块类似，除此之外还有一些逻辑，当facade方块被破坏，应该回复到原本的线缆，此外我们还需要覆盖getShape方法，以便返回模拟块的形状。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FacadeBlock</span> <span class="keyword">extends</span> <span class="title class_">CableBlock</span> <span class="keyword">implements</span> <span class="title class_">EntityBlock</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FacadeBlock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> BlockEntity <span class="title function_">newBlockEntity</span><span class="params">(<span class="meta">@NotNull</span> BlockPos pos, <span class="meta">@NotNull</span> BlockState state)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FacadeBlockEntity</span>(pos, state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> VoxelShape <span class="title function_">getShape</span><span class="params">(<span class="meta">@NotNull</span> BlockState state, <span class="meta">@NotNull</span> BlockGetter world, <span class="meta">@NotNull</span> BlockPos pos, <span class="meta">@NotNull</span> CollisionContext context)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (world.getBlockEntity(pos) <span class="keyword">instanceof</span> FacadeBlockEntity facade) &#123;</span><br><span class="line">            <span class="type">BlockState</span> <span class="variable">mimicBlock</span> <span class="operator">=</span> facade.getMimicBlock();</span><br><span class="line">            <span class="keyword">if</span> (mimicBlock != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> mimicBlock.getShape(world, pos, context);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getShape(state, world, pos, context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This function is called when the facade block is succesfully harvested by the player</span></span><br><span class="line">    <span class="comment">// When the player destroys the facade we need to drop the facade block item with the correct mimiced block</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playerDestroy</span><span class="params">(<span class="meta">@Nonnull</span> Level level, <span class="meta">@Nonnull</span> Player player, <span class="meta">@Nonnull</span> BlockPos pos, <span class="meta">@Nonnull</span> BlockState state, <span class="meta">@Nullable</span> BlockEntity te, <span class="meta">@Nonnull</span> ItemStack stack)</span> &#123;</span><br><span class="line">        <span class="type">ItemStack</span> <span class="variable">item</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ItemStack</span>(Registration.FACADE_BLOCK.get());</span><br><span class="line">        BlockState mimicBlock;</span><br><span class="line">        <span class="keyword">if</span> (te <span class="keyword">instanceof</span> FacadeBlockEntity) &#123;</span><br><span class="line">            mimicBlock = ((FacadeBlockEntity) te).getMimicBlock();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mimicBlock = Blocks.COBBLESTONE.defaultBlockState();</span><br><span class="line">        &#125;</span><br><span class="line">        FacadeBlockItem.setMimicBlock(item, mimicBlock);</span><br><span class="line">        popResource(level, pos, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// When the player destroys the facade we need to restore the cable block</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onDestroyedByPlayer</span><span class="params">(BlockState state, Level world, BlockPos pos, Player player, <span class="type">boolean</span> willHarvest, FluidState fluid)</span> &#123;</span><br><span class="line">        <span class="type">BlockState</span> <span class="variable">defaultState</span> <span class="operator">=</span> Registration.CABLE_BLOCK.get().defaultBlockState();</span><br><span class="line">        <span class="type">BlockState</span> <span class="variable">newState</span> <span class="operator">=</span> CableBlock.calculateState(world, pos, defaultState);</span><br><span class="line">        <span class="keyword">return</span> ((LevelAccessor) world).setBlock(pos, newState, ((LevelAccessor) world).isClientSide()</span><br><span class="line">                ? Block.UPDATE_ALL + Block.UPDATE_IMMEDIATE</span><br><span class="line">                : Block.UPDATE_ALL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="The-Facade-Block-Entity"><a href="#The-Facade-Block-Entity" class="headerlink" title="The Facade Block Entity"></a>The Facade Block Entity</h4><p>Facade Block Entity类似线缆的block entity，不过Facade Block Entity 还需要追踪模仿的方块，它应该拓展于CableBlockEntity，所以它也需要被识别为传输电力的有效方块。</p><p>需要值得注意的是烘焙模型不能访问level，因为没法访问方块实体。这意味着我们不能通过方块实体获得模拟的方块，相反，我们需要通过模型数据系统传达信息。</p><p>查看代码中的注释，了解每个方法详细是做什么的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FacadeBlockEntity</span> <span class="keyword">extends</span> <span class="title class_">CableBlockEntity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MIMIC_TAG</span> <span class="operator">=</span> <span class="string">&quot;mimic&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span> <span class="keyword">private</span> <span class="type">BlockState</span> <span class="variable">mimicBlock</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FacadeBlockEntity</span><span class="params">(BlockPos pos, BlockState state)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(Registration.FACADE_BLOCK_ENTITY.get(), pos, state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The default onDataPacket() will call load() to load the data from the packet.</span></span><br><span class="line">    <span class="comment">// In addition to that we send a block update to the client</span></span><br><span class="line">    <span class="comment">// and also request a model data update (for the cable baked model)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onDataPacket</span><span class="params">(Connection net, ClientboundBlockEntityDataPacket packet)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDataPacket(net, packet);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (level.isClientSide) &#123;</span><br><span class="line">            level.sendBlockUpdated(worldPosition, getBlockState(), getBlockState(), Block.UPDATE_ALL);</span><br><span class="line">            requestModelDataUpdate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getUpdatePacket() is called on the server when a block is placed or updated.</span></span><br><span class="line">    <span class="comment">// It should return a packet containing all information needed to render this block on the client.</span></span><br><span class="line">    <span class="comment">// In our case this is the block mimic information. On the client side onDataPacket() is called</span></span><br><span class="line">    <span class="comment">// with this packet.</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ClientboundBlockEntityDataPacket <span class="title function_">getUpdatePacket</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CompoundTag</span> <span class="variable">nbtTag</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CompoundTag</span>();</span><br><span class="line">        saveMimic(nbtTag);</span><br><span class="line">        <span class="keyword">return</span> ClientboundBlockEntityDataPacket.create(<span class="built_in">this</span>, (BlockEntity entity) -&gt; &#123;<span class="keyword">return</span> nbtTag;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getUpdateTag() is called on the server on initial load of the chunk. It will cause</span></span><br><span class="line">    <span class="comment">// the packet to be sent to the client and handleUpdateTag() will be called on the client.</span></span><br><span class="line">    <span class="comment">// The default implementation of handleUpdateTag() will call load() to load the data from the packet.</span></span><br><span class="line">    <span class="comment">// In our case this is sufficient</span></span><br><span class="line">    <span class="meta">@Nonnull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CompoundTag <span class="title function_">getUpdateTag</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CompoundTag</span> <span class="variable">updateTag</span> <span class="operator">=</span> <span class="built_in">super</span>.getUpdateTag();</span><br><span class="line">        saveMimic(updateTag);</span><br><span class="line">        <span class="keyword">return</span> updateTag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@Nullable</span> BlockState <span class="title function_">getMimicBlock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mimicBlock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This is used to build the model data for the cable baked model.</span></span><br><span class="line">    <span class="meta">@Nonnull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ModelData <span class="title function_">getModelData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ModelData.builder()</span><br><span class="line">                .with(CableBlock.FACADEID, mimicBlock)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMimicBlock</span><span class="params">(BlockState mimicBlock)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mimicBlock = mimicBlock;</span><br><span class="line">        setChanged();</span><br><span class="line">        getLevel().sendBlockUpdated(getBlockPos(), getBlockState(), getBlockState(), Block.UPDATE_CLIENTS + Block.UPDATE_NEIGHBORS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">load</span><span class="params">(CompoundTag tagCompound)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.load(tagCompound);</span><br><span class="line">        loadMimic(tagCompound);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">loadMimic</span><span class="params">(CompoundTag tagCompound)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (tagCompound.contains(MIMIC_TAG)) &#123;</span><br><span class="line">            mimicBlock = NbtUtils.readBlockState(BuiltInRegistries.BLOCK.asLookup(), tagCompound.getCompound(MIMIC_TAG));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mimicBlock = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveAdditional</span><span class="params">(<span class="meta">@Nonnull</span> CompoundTag tagCompound)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.saveAdditional(tagCompound);</span><br><span class="line">        saveMimic(tagCompound);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">saveMimic</span><span class="params">(<span class="meta">@NotNull</span> CompoundTag tagCompound)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mimicBlock != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">CompoundTag</span> <span class="variable">tag</span> <span class="operator">=</span> NbtUtils.writeBlockState(mimicBlock);</span><br><span class="line">            tagCompound.put(MIMIC_TAG, tag);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="The-Facade-Block-Item"><a href="#The-Facade-Block-Item" class="headerlink" title="The Facade Block Item"></a>The Facade Block Item</h4><p>由于当facade Block放置的时候我们需要一些特殊的处理，我们需要为他创建一个自定义的block item，FacadeBlockItme，负责放置Facade时候设置模拟方块。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FacadeBlockItem</span> <span class="keyword">extends</span> <span class="title class_">BlockItem</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FACADE_IS_MIMICING</span> <span class="operator">=</span> <span class="string">&quot;tutorial.facade.is_mimicing&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getMimickingString</span><span class="params">(ItemStack stack)</span> &#123;</span><br><span class="line">        <span class="type">CompoundTag</span> <span class="variable">tag</span> <span class="operator">=</span> stack.getTag();</span><br><span class="line">        <span class="keyword">if</span> (tag != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">CompoundTag</span> <span class="variable">mimic</span> <span class="operator">=</span> tag.getCompound(<span class="string">&quot;mimic&quot;</span>);</span><br><span class="line">            <span class="type">Block</span> <span class="variable">value</span> <span class="operator">=</span> ForgeRegistries.BLOCKS.getValue(<span class="keyword">new</span> <span class="title class_">ResourceLocation</span>(mimic.getString(<span class="string">&quot;Name&quot;</span>)));</span><br><span class="line">            <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">ItemStack</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ItemStack</span>(value, <span class="number">1</span>);</span><br><span class="line">                s.getItem();</span><br><span class="line">                <span class="keyword">return</span> s.getHoverName().getString();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;unset&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FacadeBlockItem</span><span class="params">(FacadeBlock block, Item.Properties properties)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(block, properties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">userSetMimicBlock</span><span class="params">(<span class="meta">@Nonnull</span> ItemStack item, BlockState mimicBlock, UseOnContext context)</span> &#123;</span><br><span class="line">        <span class="type">Level</span> <span class="variable">world</span> <span class="operator">=</span> context.getLevel();</span><br><span class="line">        <span class="type">Player</span> <span class="variable">player</span> <span class="operator">=</span> context.getPlayer();</span><br><span class="line">        setMimicBlock(item, mimicBlock);</span><br><span class="line">        <span class="keyword">if</span> (world.isClientSide) &#123;</span><br><span class="line">            player.displayClientMessage(Component.translatable(FACADE_IS_MIMICING, mimicBlock.getBlock().getDescriptionId()), <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setMimicBlock</span><span class="params">(<span class="meta">@Nonnull</span> ItemStack item, BlockState mimicBlock)</span> &#123;</span><br><span class="line">        <span class="type">CompoundTag</span> <span class="variable">tagCompound</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CompoundTag</span>();</span><br><span class="line">        <span class="type">CompoundTag</span> <span class="variable">nbt</span> <span class="operator">=</span> NbtUtils.writeBlockState(mimicBlock);</span><br><span class="line">        tagCompound.put(<span class="string">&quot;mimic&quot;</span>, nbt);</span><br><span class="line">        item.setTag(tagCompound);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BlockState <span class="title function_">getMimicBlock</span><span class="params">(Level level, <span class="meta">@Nonnull</span> ItemStack stack)</span> &#123;</span><br><span class="line">        <span class="type">CompoundTag</span> <span class="variable">tagCompound</span> <span class="operator">=</span> stack.getTag();</span><br><span class="line">        <span class="keyword">if</span> (tagCompound == <span class="literal">null</span> || !tagCompound.contains(<span class="string">&quot;mimic&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Blocks.COBBLESTONE.defaultBlockState();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> NbtUtils.readBlockState(BuiltInRegistries.BLOCK.asLookup(), tagCompound.getCompound(<span class="string">&quot;mimic&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">canPlace</span><span class="params">(<span class="meta">@Nonnull</span> BlockPlaceContext context, <span class="meta">@Nonnull</span> BlockState state)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This function is called when our block item is right clicked on something. When this happens</span></span><br><span class="line">    <span class="comment">// we want to either set the minic block or place the facade block</span></span><br><span class="line">    <span class="meta">@Nonnull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> InteractionResult <span class="title function_">useOn</span><span class="params">(UseOnContext context)</span> &#123;</span><br><span class="line">        <span class="type">Level</span> <span class="variable">world</span> <span class="operator">=</span> context.getLevel();</span><br><span class="line">        <span class="type">BlockPos</span> <span class="variable">pos</span> <span class="operator">=</span> context.getClickedPos();</span><br><span class="line">        <span class="type">Player</span> <span class="variable">player</span> <span class="operator">=</span> context.getPlayer();</span><br><span class="line">        <span class="type">BlockState</span> <span class="variable">state</span> <span class="operator">=</span> world.getBlockState(pos);</span><br><span class="line">        <span class="type">Block</span> <span class="variable">block</span> <span class="operator">=</span> state.getBlock();</span><br><span class="line"></span><br><span class="line">        <span class="type">ItemStack</span> <span class="variable">itemstack</span> <span class="operator">=</span> context.getItemInHand();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!itemstack.isEmpty()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (block == Registration.CABLE_BLOCK.get()) &#123;</span><br><span class="line">                <span class="comment">// We are hitting a cable block. We want to replace it with a facade block</span></span><br><span class="line">                <span class="type">FacadeBlock</span> <span class="variable">facadeBlock</span> <span class="operator">=</span> (FacadeBlock) <span class="built_in">this</span>.getBlock();</span><br><span class="line">                <span class="type">BlockPlaceContext</span> <span class="variable">blockContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReplaceBlockItemUseContext</span>(context);</span><br><span class="line">                <span class="type">BlockState</span> <span class="variable">placementState</span> <span class="operator">=</span> facadeBlock.getStateForPlacement(blockContext)</span><br><span class="line">                        .setValue(NORTH, state.getValue(NORTH))</span><br><span class="line">                        .setValue(SOUTH, state.getValue(SOUTH))</span><br><span class="line">                        .setValue(WEST, state.getValue(WEST))</span><br><span class="line">                        .setValue(EAST, state.getValue(EAST))</span><br><span class="line">                        .setValue(UP, state.getValue(UP))</span><br><span class="line">                        .setValue(DOWN, state.getValue(DOWN))</span><br><span class="line">                        ;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (placeBlock(blockContext, placementState)) &#123;</span><br><span class="line">                    <span class="type">SoundType</span> <span class="variable">soundtype</span> <span class="operator">=</span> world.getBlockState(pos).getBlock().getSoundType(world.getBlockState(pos), world, pos, player);</span><br><span class="line">                    world.playSound(player, pos, soundtype.getPlaceSound(), SoundSource.BLOCKS, (soundtype.getVolume() + <span class="number">1.0F</span>) / <span class="number">2.0F</span>, soundtype.getPitch() * <span class="number">0.8F</span>);</span><br><span class="line">                    <span class="type">BlockEntity</span> <span class="variable">te</span> <span class="operator">=</span> world.getBlockEntity(pos);</span><br><span class="line">                    <span class="keyword">if</span> (te <span class="keyword">instanceof</span> FacadeBlockEntity) &#123;</span><br><span class="line">                        ((FacadeBlockEntity) te).setMimicBlock(getMimicBlock(world, itemstack));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">amount</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">                    itemstack.grow(amount);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (block == Registration.FACADE_BLOCK.get()) &#123;</span><br><span class="line">                <span class="comment">// We are hitting a facade block. We want to copy the block it is mimicing</span></span><br><span class="line">                <span class="type">BlockEntity</span> <span class="variable">te</span> <span class="operator">=</span> world.getBlockEntity(pos);</span><br><span class="line">                <span class="keyword">if</span> (!(te <span class="keyword">instanceof</span> FacadeBlockEntity facade)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> InteractionResult.FAIL;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (facade.getMimicBlock() == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> InteractionResult.FAIL;</span><br><span class="line">                &#125;</span><br><span class="line">                userSetMimicBlock(itemstack, facade.getMimicBlock(), context);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// We are hitting something else. We want to set that block as what we are going to mimic</span></span><br><span class="line">                userSetMimicBlock(itemstack, state, context);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> InteractionResult.SUCCESS;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> InteractionResult.FAIL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">appendHoverText</span><span class="params">(<span class="meta">@Nonnull</span> ItemStack stack, <span class="meta">@Nullable</span> Level level, <span class="meta">@Nonnull</span> List&lt;Component&gt; tooltip, <span class="meta">@Nonnull</span> TooltipFlag flag)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.appendHoverText(stack, level, tooltip, flag);</span><br><span class="line">        <span class="keyword">if</span> (stack.hasTag()) &#123;</span><br><span class="line">            tooltip.add(Component.translatable(FACADE_IS_MIMICING, getMimickingString(stack)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们需要一个类帮助我们进行右键的处理，ReplaceBlockItemUseContext，BlockPlaceContext会将replaceClicked设置为True，这将保证我们的facade放置的时候会替换cable。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReplaceBlockItemUseContext</span> <span class="keyword">extends</span> <span class="title class_">BlockPlaceContext</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ReplaceBlockItemUseContext</span><span class="params">(UseOnContext context)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context);</span><br><span class="line">        replaceClicked = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注册Registration"><a href="#注册Registration" class="headerlink" title="注册Registration"></a>注册Registration</h3><p>在这里注册我们的cable  和 facade方块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Registration</span> &#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistryObject&lt;CableBlock&gt; CABLE_BLOCK = BLOCKS.register(<span class="string">&quot;cable&quot;</span>, CableBlock::<span class="keyword">new</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistryObject&lt;Item&gt; CABLE_BLOCK_ITEM = ITEMS.register(<span class="string">&quot;cable&quot;</span>, () -&gt; <span class="keyword">new</span> <span class="title class_">BlockItem</span>(CABLE_BLOCK.get(), <span class="keyword">new</span> <span class="title class_">Item</span>.Properties()));</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistryObject&lt;BlockEntityType&lt;CableBlockEntity&gt;&gt; CABLE_BLOCK_ENTITY = BLOCK_ENTITIES.register(<span class="string">&quot;cable&quot;</span>,</span><br><span class="line">            () -&gt; BlockEntityType.Builder.of(CableBlockEntity::<span class="keyword">new</span>, CABLE_BLOCK.get()).build(<span class="literal">null</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistryObject&lt;FacadeBlock&gt; FACADE_BLOCK = BLOCKS.register(<span class="string">&quot;facade&quot;</span>, FacadeBlock::<span class="keyword">new</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistryObject&lt;Item&gt; FACADE_BLOCK_ITEM = ITEMS.register(<span class="string">&quot;facade&quot;</span>, () -&gt; <span class="keyword">new</span> <span class="title class_">FacadeBlockItem</span>(FACADE_BLOCK.get(), <span class="keyword">new</span> <span class="title class_">Item</span>.Properties()));</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RegistryObject&lt;BlockEntityType&lt;FacadeBlockEntity&gt;&gt; FACADE_BLOCK_ENTITY = BLOCK_ENTITIES.register(<span class="string">&quot;facade&quot;</span>,</span><br><span class="line">            () -&gt; BlockEntityType.Builder.of(FacadeBlockEntity::<span class="keyword">new</span>, FACADE_BLOCK.get()).build(<span class="literal">null</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RegistryObject&lt;CreativeModeTab&gt; TAB = TABS.register(<span class="string">&quot;tutpower&quot;</span>, () -&gt; CreativeModeTab.builder()</span><br><span class="line">            .title(Component.translatable(<span class="string">&quot;tab.tutpower&quot;</span>))</span><br><span class="line">            .icon(() -&gt; <span class="keyword">new</span> <span class="title class_">ItemStack</span>(GENERATOR_BLOCK.get()))</span><br><span class="line">            .withTabsBefore(CreativeModeTabs.SPAWN_EGGS)</span><br><span class="line">            .displayItems((featureFlags, output) -&gt; &#123;</span><br><span class="line">                output.accept(GENERATOR_BLOCK.get());</span><br><span class="line">                output.accept(CHARGER_BLOCK.get());</span><br><span class="line">                output.accept(CABLE_BLOCK.get());</span><br><span class="line">                output.accept(FACADE_BLOCK.get());</span><br><span class="line">            &#125;)</span><br><span class="line">            .build());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="烘焙模型Baked-Model"><a href="#烘焙模型Baked-Model" class="headerlink" title="烘焙模型Baked Model"></a>烘焙模型Baked Model</h3><p>烘焙模型负责生成电缆的实际的模型，通过查看六个方向和六个方向上的类型然后生成适当的立体方块实现此目的，电缆方块和facade方块都使用相同的烘焙模型</p><h4 id="烘焙模型加载器The-Baked-Model-Loader"><a href="#烘焙模型加载器The-Baked-Model-Loader" class="headerlink" title="烘焙模型加载器The Baked Model Loader"></a>烘焙模型加载器The Baked Model Loader</h4><p>要实现烘焙模型，你首先需要实现模型加载器。该加载器负责从json中加载模型，在我们的例子中，我们有一个json文件，用于电缆方块和facade方块，因此我们需要区分两者，我们在接送文件中添加facade属性。对于facade方块，该属性为true，对于电缆方块，该属性为fasle，加载器读取此属性，然后创建适当的CableBakeModel</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CableModelLoader</span> <span class="keyword">implements</span> <span class="title class_">IGeometryLoader</span>&lt;CableModelLoader.CableModelGeometry&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ResourceLocation</span> <span class="variable">GENERATOR_LOADER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceLocation</span>(TutorialPower.MODID, <span class="string">&quot;cableloader&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(ModelEvent.RegisterGeometryLoaders event)</span> &#123;</span><br><span class="line">        event.register(<span class="string">&quot;cableloader&quot;</span>, <span class="keyword">new</span> <span class="title class_">CableModelLoader</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CableModelGeometry <span class="title function_">read</span><span class="params">(JsonObject jsonObject, JsonDeserializationContext deserializationContext)</span> <span class="keyword">throws</span> JsonParseException &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">facade</span> <span class="operator">=</span> jsonObject.has(<span class="string">&quot;facade&quot;</span>) &amp;&amp; jsonObject.get(<span class="string">&quot;facade&quot;</span>).getAsBoolean();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CableModelGeometry</span>(facade);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">CableModelGeometry</span> <span class="keyword">implements</span> <span class="title class_">IUnbakedGeometry</span>&lt;CableModelGeometry&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">boolean</span> facade;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">CableModelGeometry</span><span class="params">(<span class="type">boolean</span> facade)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.facade = facade;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> BakedModel <span class="title function_">bake</span><span class="params">(IGeometryBakingContext context, ModelBaker baker, Function&lt;Material, TextureAtlasSprite&gt; spriteGetter, ModelState modelState, ItemOverrides overrides, ResourceLocation modelLocation)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CableBakedModel</span>(context, facade);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>register()</code>方法需要在<code>ModelEvent.RegisterGeometryLoaders</code>事件中调用，我们在<code>ClientSetup</code>中做到这一点，我们还需要注册方块颜色处理器，之后会介绍，这个颜色处理器确保我们在模仿类似草方块时候可以正确的从生物群系中获得颜色。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mod</span>.EventBusSubscriber(modid = MODID, bus = Mod.EventBusSubscriber.Bus.MOD, value = Dist.CLIENT)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientSetup</span> &#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SubscribeEvent</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">modelInit</span><span class="params">(ModelEvent.RegisterGeometryLoaders event)</span> &#123;</span><br><span class="line">        CableModelLoader.register(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SubscribeEvent</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">registerBlockColor</span><span class="params">(RegisterColorHandlersEvent.Block event)</span> &#123;</span><br><span class="line">        event.register(<span class="keyword">new</span> <span class="title class_">FacadeBlockColor</span>(), Registration.FACADE_BLOCK.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方块颜色处理器The-block-color-handler"><a href="#方块颜色处理器The-block-color-handler" class="headerlink" title="方块颜色处理器The block color handler"></a>方块颜色处理器The block color handler</h4><p>当我们模仿另一个方块的时候需要确保方块的颜色是正确的，例如，我们模仿草方块，需要确保草方块颜色和当前的生物群系颜色是一致的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FacadeBlockColor</span> <span class="keyword">implements</span> <span class="title class_">BlockColor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getColor</span><span class="params">(<span class="meta">@Nonnull</span> BlockState blockState, <span class="meta">@Nullable</span> BlockAndTintGetter world, <span class="meta">@Nullable</span> BlockPos pos, <span class="type">int</span> tint)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (world != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">BlockEntity</span> <span class="variable">te</span> <span class="operator">=</span> world.getBlockEntity(pos);</span><br><span class="line">            <span class="keyword">if</span> (te <span class="keyword">instanceof</span> FacadeBlockEntity facade) &#123;</span><br><span class="line">                <span class="type">BlockState</span> <span class="variable">mimic</span> <span class="operator">=</span> facade.getMimicBlock();</span><br><span class="line">                <span class="keyword">if</span> (mimic != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> Minecraft.getInstance().getBlockColors().getColor(mimic, world, pos, tint);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="烘焙模型The-Baked-Model"><a href="#烘焙模型The-Baked-Model" class="headerlink" title="烘焙模型The Baked Model"></a>烘焙模型The Baked Model</h4><p>烘焙模型负责生成电缆的实际模型。它通过六个方向和六个方向行上的线缆类型来生成对应的四边形，电缆方块和facade方块使用相同的烘焙模型。</p><p>代码使用CablePatterns辅助类生成四边形，该类知道如何将特定的连接器转为正确的四边形。</p><p>这个类最总要的就是线程就是getQuads（）线程，该线程被渲染器调用获得线缆的四边形。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CableBakedModel</span> <span class="keyword">implements</span> <span class="title class_">IDynamicBakedModel</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IGeometryBakingContext context;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">boolean</span> facade;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextureAtlasSprite spriteConnector;</span><br><span class="line">    <span class="keyword">private</span> TextureAtlasSprite spriteNoneCable;</span><br><span class="line">    <span class="keyword">private</span> TextureAtlasSprite spriteNormalCable;</span><br><span class="line">    <span class="keyword">private</span> TextureAtlasSprite spriteEndCable;</span><br><span class="line">    <span class="keyword">private</span> TextureAtlasSprite spriteCornerCable;</span><br><span class="line">    <span class="keyword">private</span> TextureAtlasSprite spriteThreeCable;</span><br><span class="line">    <span class="keyword">private</span> TextureAtlasSprite spriteCrossCable;</span><br><span class="line">    <span class="keyword">private</span> TextureAtlasSprite spriteSide;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// For all possible patterns we define the sprite to use and the rotation. Note that each</span></span><br><span class="line">        <span class="comment">// pattern looks at the existance of a cable section for each of the four directions</span></span><br><span class="line">        <span class="comment">// excluding the one we are looking at.</span></span><br><span class="line">        CablePatterns.PATTERNS.put(Pattern.of(<span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>), QuadSetting.of(SPRITE_NONE, <span class="number">0</span>));</span><br><span class="line">        CablePatterns.PATTERNS.put(Pattern.of(<span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>), QuadSetting.of(SPRITE_END, <span class="number">3</span>));</span><br><span class="line">        CablePatterns.PATTERNS.put(Pattern.of(<span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>), QuadSetting.of(SPRITE_END, <span class="number">0</span>));</span><br><span class="line">        CablePatterns.PATTERNS.put(Pattern.of(<span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>), QuadSetting.of(SPRITE_END, <span class="number">1</span>));</span><br><span class="line">        CablePatterns.PATTERNS.put(Pattern.of(<span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">true</span>), QuadSetting.of(SPRITE_END, <span class="number">2</span>));</span><br><span class="line">        CablePatterns.PATTERNS.put(Pattern.of(<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>), QuadSetting.of(SPRITE_CORNER, <span class="number">0</span>));</span><br><span class="line">        CablePatterns.PATTERNS.put(Pattern.of(<span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>), QuadSetting.of(SPRITE_CORNER, <span class="number">1</span>));</span><br><span class="line">        CablePatterns.PATTERNS.put(Pattern.of(<span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">true</span>), QuadSetting.of(SPRITE_CORNER, <span class="number">2</span>));</span><br><span class="line">        CablePatterns.PATTERNS.put(Pattern.of(<span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">true</span>), QuadSetting.of(SPRITE_CORNER, <span class="number">3</span>));</span><br><span class="line">        CablePatterns.PATTERNS.put(Pattern.of(<span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>), QuadSetting.of(SPRITE_STRAIGHT, <span class="number">0</span>));</span><br><span class="line">        CablePatterns.PATTERNS.put(Pattern.of(<span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>), QuadSetting.of(SPRITE_STRAIGHT, <span class="number">1</span>));</span><br><span class="line">        CablePatterns.PATTERNS.put(Pattern.of(<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>), QuadSetting.of(SPRITE_THREE, <span class="number">0</span>));</span><br><span class="line">        CablePatterns.PATTERNS.put(Pattern.of(<span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>), QuadSetting.of(SPRITE_THREE, <span class="number">1</span>));</span><br><span class="line">        CablePatterns.PATTERNS.put(Pattern.of(<span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">true</span>), QuadSetting.of(SPRITE_THREE, <span class="number">2</span>));</span><br><span class="line">        CablePatterns.PATTERNS.put(Pattern.of(<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>), QuadSetting.of(SPRITE_THREE, <span class="number">3</span>));</span><br><span class="line">        CablePatterns.PATTERNS.put(Pattern.of(<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>), QuadSetting.of(SPRITE_CROSS, <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CableBakedModel</span><span class="params">(IGeometryBakingContext context, <span class="type">boolean</span> facade)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.context = context;</span><br><span class="line">        <span class="built_in">this</span>.facade = facade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initTextures</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (spriteConnector == <span class="literal">null</span>) &#123;</span><br><span class="line">            spriteConnector = getTexture(<span class="string">&quot;block/cable/connector&quot;</span>);</span><br><span class="line">            spriteNormalCable = getTexture(<span class="string">&quot;block/cable/normal&quot;</span>);</span><br><span class="line">            spriteNoneCable = getTexture(<span class="string">&quot;block/cable/none&quot;</span>);</span><br><span class="line">            spriteEndCable = getTexture(<span class="string">&quot;block/cable/end&quot;</span>);</span><br><span class="line">            spriteCornerCable = getTexture(<span class="string">&quot;block/cable/corner&quot;</span>);</span><br><span class="line">            spriteThreeCable = getTexture(<span class="string">&quot;block/cable/three&quot;</span>);</span><br><span class="line">            spriteCrossCable = getTexture(<span class="string">&quot;block/cable/cross&quot;</span>);</span><br><span class="line">            spriteSide = getTexture(<span class="string">&quot;block/cable/side&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// All textures are baked on a big texture atlas. This function gets the texture from that atlas</span></span><br><span class="line">    <span class="keyword">private</span> TextureAtlasSprite <span class="title function_">getTexture</span><span class="params">(String path)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Minecraft.getInstance().getTextureAtlas(InventoryMenu.BLOCK_ATLAS).apply(<span class="keyword">new</span> <span class="title class_">ResourceLocation</span>(TutorialPower.MODID, path));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextureAtlasSprite <span class="title function_">getSpriteNormal</span><span class="params">(CablePatterns.SpriteIdx idx)</span> &#123;</span><br><span class="line">        initTextures();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">switch</span> (idx) &#123;</span><br><span class="line">            <span class="keyword">case</span> SPRITE_NONE -&gt; spriteNoneCable;</span><br><span class="line">            <span class="keyword">case</span> SPRITE_END -&gt; spriteEndCable;</span><br><span class="line">            <span class="keyword">case</span> SPRITE_STRAIGHT -&gt; spriteNormalCable;</span><br><span class="line">            <span class="keyword">case</span> SPRITE_CORNER -&gt; spriteCornerCable;</span><br><span class="line">            <span class="keyword">case</span> SPRITE_THREE -&gt; spriteThreeCable;</span><br><span class="line">            <span class="keyword">case</span> SPRITE_CROSS -&gt; spriteCrossCable;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">usesBlockLight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;BakedQuad&gt; <span class="title function_">getQuads</span><span class="params">(<span class="meta">@Nullable</span> BlockState state, <span class="meta">@Nullable</span> Direction side, <span class="meta">@NotNull</span> RandomSource rand, <span class="meta">@NotNull</span> ModelData extraData, <span class="meta">@Nullable</span> RenderType layer)</span> &#123;</span><br><span class="line">        initTextures();</span><br><span class="line">        List&lt;BakedQuad&gt; quads = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (side == <span class="literal">null</span> &amp;&amp; (layer == <span class="literal">null</span> || layer.equals(RenderType.solid()))) &#123;</span><br><span class="line">            <span class="comment">// Called with the blockstate from our block. Here we get the values of the six properties and pass that to</span></span><br><span class="line">            <span class="comment">// our baked model implementation. If state == null we are called from the inventory and we use the default</span></span><br><span class="line">            <span class="comment">// values for the properties</span></span><br><span class="line">            ConnectorType north, south, west, east, up, down;</span><br><span class="line">            <span class="keyword">if</span> (state != <span class="literal">null</span>) &#123;</span><br><span class="line">                north = state.getValue(CableBlock.NORTH);</span><br><span class="line">                south = state.getValue(CableBlock.SOUTH);</span><br><span class="line">                west = state.getValue(CableBlock.WEST);</span><br><span class="line">                east = state.getValue(CableBlock.EAST);</span><br><span class="line">                up = state.getValue(CableBlock.UP);</span><br><span class="line">                down = state.getValue(CableBlock.DOWN);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// If we are a facade and we are an item then we render as the &#x27;side&#x27; texture as a full block</span></span><br><span class="line">                <span class="keyword">if</span> (facade) &#123;</span><br><span class="line">                    quads.add(quad(v(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>), v(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>), v(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>), v(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>), spriteSide));</span><br><span class="line">                    quads.add(quad(v(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), v(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>), v(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>), v(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>), spriteSide));</span><br><span class="line">                    quads.add(quad(v(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>), v(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>), v(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>), v(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>), spriteSide));</span><br><span class="line">                    quads.add(quad(v(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>), v(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>), v(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>), v(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), spriteSide));</span><br><span class="line">                    quads.add(quad(v(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>), v(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>), v(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>), v(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), spriteSide));</span><br><span class="line">                    quads.add(quad(v(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>), v(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>), v(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>), v(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>), spriteSide));</span><br><span class="line">                    <span class="keyword">return</span> quads;</span><br><span class="line">                &#125;</span><br><span class="line">                north = south = west = east = up = down = NONE;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">TextureAtlasSprite</span> <span class="variable">spriteCable</span> <span class="operator">=</span> spriteNormalCable;</span><br><span class="line">            Function&lt;CablePatterns.SpriteIdx, TextureAtlasSprite&gt; spriteGetter = <span class="built_in">this</span>::getSpriteNormal;</span><br><span class="line"></span><br><span class="line">            <span class="type">double</span> <span class="variable">o</span> <span class="operator">=</span> <span class="number">.4</span>;      <span class="comment">// Thickness of the cable. .0 would be full block, .5 is infinitely thin.</span></span><br><span class="line">            <span class="type">double</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">.1</span>;      <span class="comment">// Thickness of the connector as it is put on the connecting block</span></span><br><span class="line">            <span class="type">double</span> <span class="variable">q</span> <span class="operator">=</span> <span class="number">.2</span>;      <span class="comment">// The wideness of the connector</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// For each side we either cap it off if there is no similar block adjacent on that side</span></span><br><span class="line">            <span class="comment">// or else we extend so that we touch the adjacent block:</span></span><br><span class="line">            <span class="keyword">if</span> (up == CABLE) &#123;</span><br><span class="line">                quads.add(quad(v(<span class="number">1</span> - o, <span class="number">1</span>, o), v(<span class="number">1</span> - o, <span class="number">1</span>, <span class="number">1</span> - o), v(<span class="number">1</span> - o, <span class="number">1</span> - o, <span class="number">1</span> - o), v(<span class="number">1</span> - o, <span class="number">1</span> - o, o), spriteCable));</span><br><span class="line">                quads.add(quad(v(o, <span class="number">1</span>, <span class="number">1</span> - o), v(o, <span class="number">1</span>, o), v(o, <span class="number">1</span> - o, o), v(o, <span class="number">1</span> - o, <span class="number">1</span> - o), spriteCable));</span><br><span class="line">                quads.add(quad(v(o, <span class="number">1</span>, o), v(<span class="number">1</span> - o, <span class="number">1</span>, o), v(<span class="number">1</span> - o, <span class="number">1</span> - o, o), v(o, <span class="number">1</span> - o, o), spriteCable));</span><br><span class="line">                quads.add(quad(v(o, <span class="number">1</span> - o, <span class="number">1</span> - o), v(<span class="number">1</span> - o, <span class="number">1</span> - o, <span class="number">1</span> - o), v(<span class="number">1</span> - o, <span class="number">1</span>, <span class="number">1</span> - o), v(o, <span class="number">1</span>, <span class="number">1</span> - o), spriteCable));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (up == BLOCK) &#123;</span><br><span class="line">                quads.add(quad(v(<span class="number">1</span> - o, <span class="number">1</span> - p, o), v(<span class="number">1</span> - o, <span class="number">1</span> - p, <span class="number">1</span> - o), v(<span class="number">1</span> - o, <span class="number">1</span> - o, <span class="number">1</span> - o), v(<span class="number">1</span> - o, <span class="number">1</span> - o, o), spriteCable));</span><br><span class="line">                quads.add(quad(v(o, <span class="number">1</span> - p, <span class="number">1</span> - o), v(o, <span class="number">1</span> - p, o), v(o, <span class="number">1</span> - o, o), v(o, <span class="number">1</span> - o, <span class="number">1</span> - o), spriteCable));</span><br><span class="line">                quads.add(quad(v(o, <span class="number">1</span> - p, o), v(<span class="number">1</span> - o, <span class="number">1</span> - p, o), v(<span class="number">1</span> - o, <span class="number">1</span> - o, o), v(o, <span class="number">1</span> - o, o), spriteCable));</span><br><span class="line">                quads.add(quad(v(o, <span class="number">1</span> - o, <span class="number">1</span> - o), v(<span class="number">1</span> - o, <span class="number">1</span> - o, <span class="number">1</span> - o), v(<span class="number">1</span> - o, <span class="number">1</span> - p, <span class="number">1</span> - o), v(o, <span class="number">1</span> - p, <span class="number">1</span> - o), spriteCable));</span><br><span class="line"></span><br><span class="line">                quads.add(quad(v(<span class="number">1</span> - q, <span class="number">1</span> - p, q), v(<span class="number">1</span> - q, <span class="number">1</span>, q), v(<span class="number">1</span> - q, <span class="number">1</span>, <span class="number">1</span> - q), v(<span class="number">1</span> - q, <span class="number">1</span> - p, <span class="number">1</span> - q), spriteSide));</span><br><span class="line">                quads.add(quad(v(q, <span class="number">1</span> - p, <span class="number">1</span> - q), v(q, <span class="number">1</span>, <span class="number">1</span> - q), v(q, <span class="number">1</span>, q), v(q, <span class="number">1</span> - p, q), spriteSide));</span><br><span class="line">                quads.add(quad(v(q, <span class="number">1</span>, q), v(<span class="number">1</span> - q, <span class="number">1</span>, q), v(<span class="number">1</span> - q, <span class="number">1</span> - p, q), v(q, <span class="number">1</span> - p, q), spriteSide));</span><br><span class="line">                quads.add(quad(v(q, <span class="number">1</span> - p, <span class="number">1</span> - q), v(<span class="number">1</span> - q, <span class="number">1</span> - p, <span class="number">1</span> - q), v(<span class="number">1</span> - q, <span class="number">1</span>, <span class="number">1</span> - q), v(q, <span class="number">1</span>, <span class="number">1</span> - q), spriteSide));</span><br><span class="line"></span><br><span class="line">                quads.add(quad(v(q, <span class="number">1</span> - p, q), v(<span class="number">1</span> - q, <span class="number">1</span> - p, q), v(<span class="number">1</span> - q, <span class="number">1</span> - p, <span class="number">1</span> - q), v(q, <span class="number">1</span> - p, <span class="number">1</span> - q), spriteConnector));</span><br><span class="line">                quads.add(quad(v(q, <span class="number">1</span>, q), v(q, <span class="number">1</span>, <span class="number">1</span> - q), v(<span class="number">1</span> - q, <span class="number">1</span>, <span class="number">1</span> - q), v(<span class="number">1</span> - q, <span class="number">1</span>, q), spriteSide));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">QuadSetting</span> <span class="variable">pattern</span> <span class="operator">=</span> CablePatterns.findPattern(west, south, east, north);</span><br><span class="line">                quads.add(quad(v(o, <span class="number">1</span> - o, <span class="number">1</span> - o), v(<span class="number">1</span> - o, <span class="number">1</span> - o, <span class="number">1</span> - o), v(<span class="number">1</span> - o, <span class="number">1</span> - o, o), v(o, <span class="number">1</span> - o, o), spriteGetter.apply(pattern.sprite()), pattern.rotation()));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (down == CABLE) &#123;</span><br><span class="line">                quads.add(quad(v(<span class="number">1</span> - o, o, o), v(<span class="number">1</span> - o, o, <span class="number">1</span> - o), v(<span class="number">1</span> - o, <span class="number">0</span>, <span class="number">1</span> - o), v(<span class="number">1</span> - o, <span class="number">0</span>, o), spriteCable));</span><br><span class="line">                quads.add(quad(v(o, o, <span class="number">1</span> - o), v(o, o, o), v(o, <span class="number">0</span>, o), v(o, <span class="number">0</span>, <span class="number">1</span> - o), spriteCable));</span><br><span class="line">                quads.add(quad(v(o, o, o), v(<span class="number">1</span> - o, o, o), v(<span class="number">1</span> - o, <span class="number">0</span>, o), v(o, <span class="number">0</span>, o), spriteCable));</span><br><span class="line">                quads.add(quad(v(o, <span class="number">0</span>, <span class="number">1</span> - o), v(<span class="number">1</span> - o, <span class="number">0</span>, <span class="number">1</span> - o), v(<span class="number">1</span> - o, o, <span class="number">1</span> - o), v(o, o, <span class="number">1</span> - o), spriteCable));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (down == BLOCK) &#123;</span><br><span class="line">                quads.add(quad(v(<span class="number">1</span> - o, o, o), v(<span class="number">1</span> - o, o, <span class="number">1</span> - o), v(<span class="number">1</span> - o, p, <span class="number">1</span> - o), v(<span class="number">1</span> - o, p, o), spriteCable));</span><br><span class="line">                quads.add(quad(v(o, o, <span class="number">1</span> - o), v(o, o, o), v(o, p, o), v(o, p, <span class="number">1</span> - o), spriteCable));</span><br><span class="line">                quads.add(quad(v(o, o, o), v(<span class="number">1</span> - o, o, o), v(<span class="number">1</span> - o, p, o), v(o, p, o), spriteCable));</span><br><span class="line">                quads.add(quad(v(o, p, <span class="number">1</span> - o), v(<span class="number">1</span> - o, p, <span class="number">1</span> - o), v(<span class="number">1</span> - o, o, <span class="number">1</span> - o), v(o, o, <span class="number">1</span> - o), spriteCable));</span><br><span class="line"></span><br><span class="line">                quads.add(quad(v(<span class="number">1</span> - q, <span class="number">0</span>, q), v(<span class="number">1</span> - q, p, q), v(<span class="number">1</span> - q, p, <span class="number">1</span> - q), v(<span class="number">1</span> - q, <span class="number">0</span>, <span class="number">1</span> - q), spriteSide));</span><br><span class="line">                quads.add(quad(v(q, <span class="number">0</span>, <span class="number">1</span> - q), v(q, p, <span class="number">1</span> - q), v(q, p, q), v(q, <span class="number">0</span>, q), spriteSide));</span><br><span class="line">                quads.add(quad(v(q, p, q), v(<span class="number">1</span> - q, p, q), v(<span class="number">1</span> - q, <span class="number">0</span>, q), v(q, <span class="number">0</span>, q), spriteSide));</span><br><span class="line">                quads.add(quad(v(q, <span class="number">0</span>, <span class="number">1</span> - q), v(<span class="number">1</span> - q, <span class="number">0</span>, <span class="number">1</span> - q), v(<span class="number">1</span> - q, p, <span class="number">1</span> - q), v(q, p, <span class="number">1</span> - q), spriteSide));</span><br><span class="line"></span><br><span class="line">                quads.add(quad(v(q, p, <span class="number">1</span> - q), v(<span class="number">1</span> - q, p, <span class="number">1</span> - q), v(<span class="number">1</span> - q, p, q), v(q, p, q), spriteConnector));</span><br><span class="line">                quads.add(quad(v(q, <span class="number">0</span>, <span class="number">1</span> - q), v(q, <span class="number">0</span>, q), v(<span class="number">1</span> - q, <span class="number">0</span>, q), v(<span class="number">1</span> - q, <span class="number">0</span>, <span class="number">1</span> - q), spriteSide));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">QuadSetting</span> <span class="variable">pattern</span> <span class="operator">=</span> CablePatterns.findPattern(west, north, east, south);</span><br><span class="line">                quads.add(quad(v(o, o, o), v(<span class="number">1</span> - o, o, o), v(<span class="number">1</span> - o, o, <span class="number">1</span> - o), v(o, o, <span class="number">1</span> - o), spriteGetter.apply(pattern.sprite()), pattern.rotation()));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (east == CABLE) &#123;</span><br><span class="line">                quads.add(quad(v(<span class="number">1</span>, <span class="number">1</span> - o, <span class="number">1</span> - o), v(<span class="number">1</span>, <span class="number">1</span> - o, o), v(<span class="number">1</span> - o, <span class="number">1</span> - o, o), v(<span class="number">1</span> - o, <span class="number">1</span> - o, <span class="number">1</span> - o), spriteCable));</span><br><span class="line">                quads.add(quad(v(<span class="number">1</span>, o, o), v(<span class="number">1</span>, o, <span class="number">1</span> - o), v(<span class="number">1</span> - o, o, <span class="number">1</span> - o), v(<span class="number">1</span> - o, o, o), spriteCable));</span><br><span class="line">                quads.add(quad(v(<span class="number">1</span>, <span class="number">1</span> - o, o), v(<span class="number">1</span>, o, o), v(<span class="number">1</span> - o, o, o), v(<span class="number">1</span> - o, <span class="number">1</span> - o, o), spriteCable));</span><br><span class="line">                quads.add(quad(v(<span class="number">1</span>, o, <span class="number">1</span> - o), v(<span class="number">1</span>, <span class="number">1</span> - o, <span class="number">1</span> - o), v(<span class="number">1</span> - o, <span class="number">1</span> - o, <span class="number">1</span> - o), v(<span class="number">1</span> - o, o, <span class="number">1</span> - o), spriteCable));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (east == BLOCK) &#123;</span><br><span class="line">                quads.add(quad(v(<span class="number">1</span> - p, <span class="number">1</span> - o, <span class="number">1</span> - o), v(<span class="number">1</span> - p, <span class="number">1</span> - o, o), v(<span class="number">1</span> - o, <span class="number">1</span> - o, o), v(<span class="number">1</span> - o, <span class="number">1</span> - o, <span class="number">1</span> - o), spriteCable));</span><br><span class="line">                quads.add(quad(v(<span class="number">1</span> - p, o, o), v(<span class="number">1</span> - p, o, <span class="number">1</span> - o), v(<span class="number">1</span> - o, o, <span class="number">1</span> - o), v(<span class="number">1</span> - o, o, o), spriteCable));</span><br><span class="line">                quads.add(quad(v(<span class="number">1</span> - p, <span class="number">1</span> - o, o), v(<span class="number">1</span> - p, o, o), v(<span class="number">1</span> - o, o, o), v(<span class="number">1</span> - o, <span class="number">1</span> - o, o), spriteCable));</span><br><span class="line">                quads.add(quad(v(<span class="number">1</span> - p, o, <span class="number">1</span> - o), v(<span class="number">1</span> - p, <span class="number">1</span> - o, <span class="number">1</span> - o), v(<span class="number">1</span> - o, <span class="number">1</span> - o, <span class="number">1</span> - o), v(<span class="number">1</span> - o, o, <span class="number">1</span> - o), spriteCable));</span><br><span class="line"></span><br><span class="line">                quads.add(quad(v(<span class="number">1</span> - p, <span class="number">1</span> - q, <span class="number">1</span> - q), v(<span class="number">1</span>, <span class="number">1</span> - q, <span class="number">1</span> - q), v(<span class="number">1</span>, <span class="number">1</span> - q, q), v(<span class="number">1</span> - p, <span class="number">1</span> - q, q), spriteSide));</span><br><span class="line">                quads.add(quad(v(<span class="number">1</span> - p, q, q), v(<span class="number">1</span>, q, q), v(<span class="number">1</span>, q, <span class="number">1</span> - q), v(<span class="number">1</span> - p, q, <span class="number">1</span> - q), spriteSide));</span><br><span class="line">                quads.add(quad(v(<span class="number">1</span> - p, <span class="number">1</span> - q, q), v(<span class="number">1</span>, <span class="number">1</span> - q, q), v(<span class="number">1</span>, q, q), v(<span class="number">1</span> - p, q, q), spriteSide));</span><br><span class="line">                quads.add(quad(v(<span class="number">1</span> - p, q, <span class="number">1</span> - q), v(<span class="number">1</span>, q, <span class="number">1</span> - q), v(<span class="number">1</span>, <span class="number">1</span> - q, <span class="number">1</span> - q), v(<span class="number">1</span> - p, <span class="number">1</span> - q, <span class="number">1</span> - q), spriteSide));</span><br><span class="line"></span><br><span class="line">                quads.add(quad(v(<span class="number">1</span> - p, q, <span class="number">1</span> - q), v(<span class="number">1</span> - p, <span class="number">1</span> - q, <span class="number">1</span> - q), v(<span class="number">1</span> - p, <span class="number">1</span> - q, q), v(<span class="number">1</span> - p, q, q), spriteConnector));</span><br><span class="line">                quads.add(quad(v(<span class="number">1</span>, q, <span class="number">1</span> - q), v(<span class="number">1</span>, q, q), v(<span class="number">1</span>, <span class="number">1</span> - q, q), v(<span class="number">1</span>, <span class="number">1</span> - q, <span class="number">1</span> - q), spriteSide));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">QuadSetting</span> <span class="variable">pattern</span> <span class="operator">=</span> CablePatterns.findPattern(down, north, up, south);</span><br><span class="line">                quads.add(quad(v(<span class="number">1</span> - o, o, o), v(<span class="number">1</span> - o, <span class="number">1</span> - o, o), v(<span class="number">1</span> - o, <span class="number">1</span> - o, <span class="number">1</span> - o), v(<span class="number">1</span> - o, o, <span class="number">1</span> - o), spriteGetter.apply(pattern.sprite()), pattern.rotation()));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (west == CABLE) &#123;</span><br><span class="line">                quads.add(quad(v(o, <span class="number">1</span> - o, <span class="number">1</span> - o), v(o, <span class="number">1</span> - o, o), v(<span class="number">0</span>, <span class="number">1</span> - o, o), v(<span class="number">0</span>, <span class="number">1</span> - o, <span class="number">1</span> - o), spriteCable));</span><br><span class="line">                quads.add(quad(v(o, o, o), v(o, o, <span class="number">1</span> - o), v(<span class="number">0</span>, o, <span class="number">1</span> - o), v(<span class="number">0</span>, o, o), spriteCable));</span><br><span class="line">                quads.add(quad(v(o, <span class="number">1</span> - o, o), v(o, o, o), v(<span class="number">0</span>, o, o), v(<span class="number">0</span>, <span class="number">1</span> - o, o), spriteCable));</span><br><span class="line">                quads.add(quad(v(o, o, <span class="number">1</span> - o), v(o, <span class="number">1</span> - o, <span class="number">1</span> - o), v(<span class="number">0</span>, <span class="number">1</span> - o, <span class="number">1</span> - o), v(<span class="number">0</span>, o, <span class="number">1</span> - o), spriteCable));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (west == BLOCK) &#123;</span><br><span class="line">                quads.add(quad(v(o, <span class="number">1</span> - o, <span class="number">1</span> - o), v(o, <span class="number">1</span> - o, o), v(p, <span class="number">1</span> - o, o), v(p, <span class="number">1</span> - o, <span class="number">1</span> - o), spriteCable));</span><br><span class="line">                quads.add(quad(v(o, o, o), v(o, o, <span class="number">1</span> - o), v(p, o, <span class="number">1</span> - o), v(p, o, o), spriteCable));</span><br><span class="line">                quads.add(quad(v(o, <span class="number">1</span> - o, o), v(o, o, o), v(p, o, o), v(p, <span class="number">1</span> - o, o), spriteCable));</span><br><span class="line">                quads.add(quad(v(o, o, <span class="number">1</span> - o), v(o, <span class="number">1</span> - o, <span class="number">1</span> - o), v(p, <span class="number">1</span> - o, <span class="number">1</span> - o), v(p, o, <span class="number">1</span> - o), spriteCable));</span><br><span class="line"></span><br><span class="line">                quads.add(quad(v(<span class="number">0</span>, <span class="number">1</span> - q, <span class="number">1</span> - q), v(p, <span class="number">1</span> - q, <span class="number">1</span> - q), v(p, <span class="number">1</span> - q, q), v(<span class="number">0</span>, <span class="number">1</span> - q, q), spriteSide));</span><br><span class="line">                quads.add(quad(v(<span class="number">0</span>, q, q), v(p, q, q), v(p, q, <span class="number">1</span> - q), v(<span class="number">0</span>, q, <span class="number">1</span> - q), spriteSide));</span><br><span class="line">                quads.add(quad(v(<span class="number">0</span>, <span class="number">1</span> - q, q), v(p, <span class="number">1</span> - q, q), v(p, q, q), v(<span class="number">0</span>, q, q), spriteSide));</span><br><span class="line">                quads.add(quad(v(<span class="number">0</span>, q, <span class="number">1</span> - q), v(p, q, <span class="number">1</span> - q), v(p, <span class="number">1</span> - q, <span class="number">1</span> - q), v(<span class="number">0</span>, <span class="number">1</span> - q, <span class="number">1</span> - q), spriteSide));</span><br><span class="line"></span><br><span class="line">                quads.add(quad(v(p, q, q), v(p, <span class="number">1</span> - q, q), v(p, <span class="number">1</span> - q, <span class="number">1</span> - q), v(p, q, <span class="number">1</span> - q), spriteConnector));</span><br><span class="line">                quads.add(quad(v(<span class="number">0</span>, q, q), v(<span class="number">0</span>, q, <span class="number">1</span> - q), v(<span class="number">0</span>, <span class="number">1</span> - q, <span class="number">1</span> - q), v(<span class="number">0</span>, <span class="number">1</span> - q, q), spriteSide));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">QuadSetting</span> <span class="variable">pattern</span> <span class="operator">=</span> CablePatterns.findPattern(down, south, up, north);</span><br><span class="line">                quads.add(quad(v(o, o, <span class="number">1</span> - o), v(o, <span class="number">1</span> - o, <span class="number">1</span> - o), v(o, <span class="number">1</span> - o, o), v(o, o, o), spriteGetter.apply(pattern.sprite()), pattern.rotation()));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (north == CABLE) &#123;</span><br><span class="line">                quads.add(quad(v(o, <span class="number">1</span> - o, o), v(<span class="number">1</span> - o, <span class="number">1</span> - o, o), v(<span class="number">1</span> - o, <span class="number">1</span> - o, <span class="number">0</span>), v(o, <span class="number">1</span> - o, <span class="number">0</span>), spriteCable));</span><br><span class="line">                quads.add(quad(v(o, o, <span class="number">0</span>), v(<span class="number">1</span> - o, o, <span class="number">0</span>), v(<span class="number">1</span> - o, o, o), v(o, o, o), spriteCable));</span><br><span class="line">                quads.add(quad(v(<span class="number">1</span> - o, o, <span class="number">0</span>), v(<span class="number">1</span> - o, <span class="number">1</span> - o, <span class="number">0</span>), v(<span class="number">1</span> - o, <span class="number">1</span> - o, o), v(<span class="number">1</span> - o, o, o), spriteCable));</span><br><span class="line">                quads.add(quad(v(o, o, o), v(o, <span class="number">1</span> - o, o), v(o, <span class="number">1</span> - o, <span class="number">0</span>), v(o, o, <span class="number">0</span>), spriteCable));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (north == BLOCK) &#123;</span><br><span class="line">                quads.add(quad(v(o, <span class="number">1</span> - o, o), v(<span class="number">1</span> - o, <span class="number">1</span> - o, o), v(<span class="number">1</span> - o, <span class="number">1</span> - o, p), v(o, <span class="number">1</span> - o, p), spriteCable));</span><br><span class="line">                quads.add(quad(v(o, o, p), v(<span class="number">1</span> - o, o, p), v(<span class="number">1</span> - o, o, o), v(o, o, o), spriteCable));</span><br><span class="line">                quads.add(quad(v(<span class="number">1</span> - o, o, p), v(<span class="number">1</span> - o, <span class="number">1</span> - o, p), v(<span class="number">1</span> - o, <span class="number">1</span> - o, o), v(<span class="number">1</span> - o, o, o), spriteCable));</span><br><span class="line">                quads.add(quad(v(o, o, o), v(o, <span class="number">1</span> - o, o), v(o, <span class="number">1</span> - o, p), v(o, o, p), spriteCable));</span><br><span class="line"></span><br><span class="line">                quads.add(quad(v(q, <span class="number">1</span> - q, p), v(<span class="number">1</span> - q, <span class="number">1</span> - q, p), v(<span class="number">1</span> - q, <span class="number">1</span> - q, <span class="number">0</span>), v(q, <span class="number">1</span> - q, <span class="number">0</span>), spriteSide));</span><br><span class="line">                quads.add(quad(v(q, q, <span class="number">0</span>), v(<span class="number">1</span> - q, q, <span class="number">0</span>), v(<span class="number">1</span> - q, q, p), v(q, q, p), spriteSide));</span><br><span class="line">                quads.add(quad(v(<span class="number">1</span> - q, q, <span class="number">0</span>), v(<span class="number">1</span> - q, <span class="number">1</span> - q, <span class="number">0</span>), v(<span class="number">1</span> - q, <span class="number">1</span> - q, p), v(<span class="number">1</span> - q, q, p), spriteSide));</span><br><span class="line">                quads.add(quad(v(q, q, p), v(q, <span class="number">1</span> - q, p), v(q, <span class="number">1</span> - q, <span class="number">0</span>), v(q, q, <span class="number">0</span>), spriteSide));</span><br><span class="line"></span><br><span class="line">                quads.add(quad(v(q, q, p), v(<span class="number">1</span> - q, q, p), v(<span class="number">1</span> - q, <span class="number">1</span> - q, p), v(q, <span class="number">1</span> - q, p), spriteConnector));</span><br><span class="line">                quads.add(quad(v(q, q, <span class="number">0</span>), v(q, <span class="number">1</span> - q, <span class="number">0</span>), v(<span class="number">1</span> - q, <span class="number">1</span> - q, <span class="number">0</span>), v(<span class="number">1</span> - q, q, <span class="number">0</span>), spriteSide));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">QuadSetting</span> <span class="variable">pattern</span> <span class="operator">=</span> CablePatterns.findPattern(west, up, east, down);</span><br><span class="line">                quads.add(quad(v(o, <span class="number">1</span> - o, o), v(<span class="number">1</span> - o, <span class="number">1</span> - o, o), v(<span class="number">1</span> - o, o, o), v(o, o, o), spriteGetter.apply(pattern.sprite()), pattern.rotation()));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (south == CABLE) &#123;</span><br><span class="line">                quads.add(quad(v(o, <span class="number">1</span> - o, <span class="number">1</span>), v(<span class="number">1</span> - o, <span class="number">1</span> - o, <span class="number">1</span>), v(<span class="number">1</span> - o, <span class="number">1</span> - o, <span class="number">1</span> - o), v(o, <span class="number">1</span> - o, <span class="number">1</span> - o), spriteCable));</span><br><span class="line">                quads.add(quad(v(o, o, <span class="number">1</span> - o), v(<span class="number">1</span> - o, o, <span class="number">1</span> - o), v(<span class="number">1</span> - o, o, <span class="number">1</span>), v(o, o, <span class="number">1</span>), spriteCable));</span><br><span class="line">                quads.add(quad(v(<span class="number">1</span> - o, o, <span class="number">1</span> - o), v(<span class="number">1</span> - o, <span class="number">1</span> - o, <span class="number">1</span> - o), v(<span class="number">1</span> - o, <span class="number">1</span> - o, <span class="number">1</span>), v(<span class="number">1</span> - o, o, <span class="number">1</span>), spriteCable));</span><br><span class="line">                quads.add(quad(v(o, o, <span class="number">1</span>), v(o, <span class="number">1</span> - o, <span class="number">1</span>), v(o, <span class="number">1</span> - o, <span class="number">1</span> - o), v(o, o, <span class="number">1</span> - o), spriteCable));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (south == BLOCK) &#123;</span><br><span class="line">                quads.add(quad(v(o, <span class="number">1</span> - o, <span class="number">1</span> - p), v(<span class="number">1</span> - o, <span class="number">1</span> - o, <span class="number">1</span> - p), v(<span class="number">1</span> - o, <span class="number">1</span> - o, <span class="number">1</span> - o), v(o, <span class="number">1</span> - o, <span class="number">1</span> - o), spriteCable));</span><br><span class="line">                quads.add(quad(v(o, o, <span class="number">1</span> - o), v(<span class="number">1</span> - o, o, <span class="number">1</span> - o), v(<span class="number">1</span> - o, o, <span class="number">1</span> - p), v(o, o, <span class="number">1</span> - p), spriteCable));</span><br><span class="line">                quads.add(quad(v(<span class="number">1</span> - o, o, <span class="number">1</span> - o), v(<span class="number">1</span> - o, <span class="number">1</span> - o, <span class="number">1</span> - o), v(<span class="number">1</span> - o, <span class="number">1</span> - o, <span class="number">1</span> - p), v(<span class="number">1</span> - o, o, <span class="number">1</span> - p), spriteCable));</span><br><span class="line">                quads.add(quad(v(o, o, <span class="number">1</span> - p), v(o, <span class="number">1</span> - o, <span class="number">1</span> - p), v(o, <span class="number">1</span> - o, <span class="number">1</span> - o), v(o, o, <span class="number">1</span> - o), spriteCable));</span><br><span class="line"></span><br><span class="line">                quads.add(quad(v(q, <span class="number">1</span> - q, <span class="number">1</span>), v(<span class="number">1</span> - q, <span class="number">1</span> - q, <span class="number">1</span>), v(<span class="number">1</span> - q, <span class="number">1</span> - q, <span class="number">1</span> - p), v(q, <span class="number">1</span> - q, <span class="number">1</span> - p), spriteSide));</span><br><span class="line">                quads.add(quad(v(q, q, <span class="number">1</span> - p), v(<span class="number">1</span> - q, q, <span class="number">1</span> - p), v(<span class="number">1</span> - q, q, <span class="number">1</span>), v(q, q, <span class="number">1</span>), spriteSide));</span><br><span class="line">                quads.add(quad(v(<span class="number">1</span> - q, q, <span class="number">1</span> - p), v(<span class="number">1</span> - q, <span class="number">1</span> - q, <span class="number">1</span> - p), v(<span class="number">1</span> - q, <span class="number">1</span> - q, <span class="number">1</span>), v(<span class="number">1</span> - q, q, <span class="number">1</span>), spriteSide));</span><br><span class="line">                quads.add(quad(v(q, q, <span class="number">1</span>), v(q, <span class="number">1</span> - q, <span class="number">1</span>), v(q, <span class="number">1</span> - q, <span class="number">1</span> - p), v(q, q, <span class="number">1</span> - p), spriteSide));</span><br><span class="line"></span><br><span class="line">                quads.add(quad(v(q, <span class="number">1</span> - q, <span class="number">1</span> - p), v(<span class="number">1</span> - q, <span class="number">1</span> - q, <span class="number">1</span> - p), v(<span class="number">1</span> - q, q, <span class="number">1</span> - p), v(q, q, <span class="number">1</span> - p), spriteConnector));</span><br><span class="line">                quads.add(quad(v(q, <span class="number">1</span> - q, <span class="number">1</span>), v(q, q, <span class="number">1</span>), v(<span class="number">1</span> - q, q, <span class="number">1</span>), v(<span class="number">1</span> - q, <span class="number">1</span> - q, <span class="number">1</span>), spriteSide));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">QuadSetting</span> <span class="variable">pattern</span> <span class="operator">=</span> CablePatterns.findPattern(west, down, east, up);</span><br><span class="line">                quads.add(quad(v(o, o, <span class="number">1</span> - o), v(<span class="number">1</span> - o, o, <span class="number">1</span> - o), v(<span class="number">1</span> - o, <span class="number">1</span> - o, <span class="number">1</span> - o), v(o, <span class="number">1</span> - o, <span class="number">1</span> - o), spriteGetter.apply(pattern.sprite()), pattern.rotation()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Render the facade if we have one in addition to the cable above. Note that the facade comes from the model data property</span></span><br><span class="line">        <span class="comment">// (FACADEID)</span></span><br><span class="line">        <span class="type">BlockState</span> <span class="variable">facadeId</span> <span class="operator">=</span> extraData.get(CableBlock.FACADEID);</span><br><span class="line">        <span class="keyword">if</span> (facadeId != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">BakedModel</span> <span class="variable">model</span> <span class="operator">=</span> Minecraft.getInstance().getBlockRenderer().getBlockModelShaper().getBlockModel(facadeId);</span><br><span class="line">            <span class="type">ChunkRenderTypeSet</span> <span class="variable">renderTypes</span> <span class="operator">=</span> model.getRenderTypes(facadeId, rand, extraData);</span><br><span class="line">            <span class="keyword">if</span> (layer == <span class="literal">null</span> || renderTypes.contains(layer)) &#123; <span class="comment">// always render in the null layer or the block-breaking textures don&#x27;t show up</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    quads.addAll(model.getQuads(state, side, rand, ModelData.EMPTY, layer));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> quads;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">useAmbientOcclusion</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isGui3d</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCustomRenderer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Because we can potentially mimic other blocks we need to render on all render types</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Nonnull</span></span><br><span class="line">    <span class="keyword">public</span> ChunkRenderTypeSet <span class="title function_">getRenderTypes</span><span class="params">(<span class="meta">@NotNull</span> BlockState state, <span class="meta">@NotNull</span> RandomSource rand, <span class="meta">@NotNull</span> ModelData data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ChunkRenderTypeSet.all();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nonnull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> TextureAtlasSprite <span class="title function_">getParticleIcon</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> spriteNormalCable == <span class="literal">null</span></span><br><span class="line">                ? Minecraft.getInstance().getTextureAtlas(InventoryMenu.BLOCK_ATLAS).apply((<span class="keyword">new</span> <span class="title class_">ResourceLocation</span>(<span class="string">&quot;minecraft&quot;</span>, <span class="string">&quot;missingno&quot;</span>)))</span><br><span class="line">                : spriteNormalCable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// To let our cable/facade render correctly as an item (both in inventory and on the ground) we</span></span><br><span class="line">    <span class="comment">// get the correct transforms from the context</span></span><br><span class="line">    <span class="meta">@Nonnull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ItemTransforms <span class="title function_">getTransforms</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> context.getTransforms();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nonnull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ItemOverrides <span class="title function_">getOverrides</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ItemOverrides.EMPTY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="The-CablePatterns-helper"><a href="#The-CablePatterns-helper" class="headerlink" title="The CablePatterns helper"></a>The CablePatterns helper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CablePatterns</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This map takes a pattern of four directions (excluding the one we are looking at) and returns the sprite index</span></span><br><span class="line">    <span class="comment">// and rotation for the quad that we are looking at.</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Pattern, QuadSetting&gt; PATTERNS = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Given a pattern of four directions (excluding the one we are looking at) we return the sprite index and rotation</span></span><br><span class="line">    <span class="comment">// for the quad that we are looking at.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> QuadSetting <span class="title function_">findPattern</span><span class="params">(ConnectorType s1, ConnectorType s2, ConnectorType s3, ConnectorType s4)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> PATTERNS.get(<span class="keyword">new</span> <span class="title class_">Pattern</span>(s1 != NONE, s2 != NONE, s3 != NONE, s4 != NONE));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This enum represents the type of sprite (texture)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">SpriteIdx</span> &#123;</span><br><span class="line">        SPRITE_NONE,</span><br><span class="line">        SPRITE_END,</span><br><span class="line">        SPRITE_STRAIGHT,</span><br><span class="line">        SPRITE_CORNER,</span><br><span class="line">        SPRITE_THREE,</span><br><span class="line">        SPRITE_CROSS</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This enum represents the type of sprite (texture) as well as the rotation for that sprite</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">QuadSetting</span><span class="params">(SpriteIdx sprite, <span class="type">int</span> rotation)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> QuadSetting <span class="title function_">of</span><span class="params">(SpriteIdx sprite, <span class="type">int</span> rotation)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">QuadSetting</span>(sprite, rotation);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// A pattern represents a configuration (cable or no cable) for the four directions excluding the one we are looking at</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">Pattern</span><span class="params">(<span class="type">boolean</span> s1, <span class="type">boolean</span> s2, <span class="type">boolean</span> s3, <span class="type">boolean</span> s4)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Pattern <span class="title function_">of</span><span class="params">(<span class="type">boolean</span> s1, <span class="type">boolean</span> s2, <span class="type">boolean</span> s3, <span class="type">boolean</span> s4)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pattern</span>(s1, s2, s3, s4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="The-BakedModelHelper"><a href="#The-BakedModelHelper" class="headerlink" title="The BakedModelHelper"></a>The BakedModelHelper</h4><p>BakedModelHelper是一个辅助类，有一些创建四边形的辅助方法，我们使用这个类来创建线缆的四边形模型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BakedModelHelper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BakedQuad <span class="title function_">quad</span><span class="params">(Vec3 v1, Vec3 v2, Vec3 v3, Vec3 v4, TextureAtlasSprite sprite, <span class="type">int</span> rotation)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">switch</span> (rotation) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span> -&gt; quad(v1, v2, v3, v4, sprite);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span> -&gt; quad(v2, v3, v4, v1, sprite);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span> -&gt; quad(v3, v4, v1, v2, sprite);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span> -&gt; quad(v4, v1, v2, v3, sprite);</span><br><span class="line">            <span class="keyword">default</span> -&gt; quad(v1, v2, v3, v4, sprite);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BakedQuad <span class="title function_">quad</span><span class="params">(Vec3 v1, Vec3 v2, Vec3 v3, Vec3 v4, TextureAtlasSprite sprite)</span> &#123;</span><br><span class="line">        <span class="type">Vec3</span> <span class="variable">normal</span> <span class="operator">=</span> v3.subtract(v2).cross(v1.subtract(v2)).normalize();</span><br><span class="line"></span><br><span class="line">        BakedQuad[] quad = <span class="keyword">new</span> <span class="title class_">BakedQuad</span>[<span class="number">1</span>];</span><br><span class="line">        <span class="type">QuadBakingVertexConsumer</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QuadBakingVertexConsumer</span>(q -&gt; quad[<span class="number">0</span>] = q);</span><br><span class="line">        builder.setSprite(sprite);</span><br><span class="line">        builder.setDirection(Direction.getNearest(normal.x, normal.y, normal.z));</span><br><span class="line">        putVertex(builder, normal, v1.x, v1.y, v1.z, <span class="number">0</span>, <span class="number">0</span>, sprite);</span><br><span class="line">        putVertex(builder, normal, v2.x, v2.y, v2.z, <span class="number">0</span>, <span class="number">16</span>, sprite);</span><br><span class="line">        putVertex(builder, normal, v3.x, v3.y, v3.z, <span class="number">16</span>, <span class="number">16</span>, sprite);</span><br><span class="line">        putVertex(builder, normal, v4.x, v4.y, v4.z, <span class="number">16</span>, <span class="number">0</span>, sprite);</span><br><span class="line">        <span class="keyword">return</span> quad[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">putVertex</span><span class="params">(VertexConsumer builder, Position normal,</span></span><br><span class="line"><span class="params">                                 <span class="type">double</span> x, <span class="type">double</span> y, <span class="type">double</span> z, <span class="type">float</span> u, <span class="type">float</span> v,</span></span><br><span class="line"><span class="params">                                 TextureAtlasSprite sprite)</span> &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">iu</span> <span class="operator">=</span> sprite.getU(u);</span><br><span class="line">        <span class="type">float</span> <span class="variable">iv</span> <span class="operator">=</span> sprite.getV(v);</span><br><span class="line">        builder.vertex(x, y, z)</span><br><span class="line">                .uv(iu, iv)</span><br><span class="line">                .uv2(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">                .color(<span class="number">1.0f</span>, <span class="number">1.0f</span>, <span class="number">1.0f</span>, <span class="number">1.0f</span>)</span><br><span class="line">                .normal((<span class="type">float</span>) normal.x(), (<span class="type">float</span>) normal.y(), (<span class="type">float</span>) normal.z())</span><br><span class="line">                .endVertex();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Vec3 <span class="title function_">v</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y, <span class="type">double</span> z)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Vec3</span>(x, y, z);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据生成Data-Generation"><a href="#数据生成Data-Generation" class="headerlink" title="数据生成Data Generation"></a>数据生成Data Generation</h3><p>最后一件我们需要解释的事情是Data Generation。我们不会在这里进行详细的介绍，因为你应该知道它是如何工作的。你可以在github查看详细的代码。然而，然而我想解释一下关于我们使用的烘焙模型系统的模型如何进行数据生成。</p><p>为了生成电缆和facade方块的json，我们可以在<code>TutBlockStates</code>中使用以下的代码，因为我们需要一个为我们模型自定义的builder，所以创建了一个builder的类，这个类叫做CableLoaderBuilder继承自CustomLoaderBuilder，CableLoaderBuilder使用ResourceLocation 作为加载id，BlockModelBuilder是其父类，ExistingFileHelper和一个布尔值指出我们是否生成一个facade方块，CableLoaderBuilder需要重写toJson的方法增加facade的属性，facade属性用于CableModelLoader中决定我们是否生成一个电缆或者facade方块。</p><p>在registerCable（）和registerFacade（）中，我们创建了一个BlockModelBuilder，父类为cube。然后，我们将自定义加载器设置为我们的CableLoaderBuilder，并设置facade属性，最后我们在BlockModelBuilder和block中调用simpleBlock 。</p><p>因为我们使用了原版的cube作为父模型，所以我们将会继承该项目的正确转化，这意味着电缆方块和facade方块将会在背包和地面上得到正确的渲染（也是因为我们在烘焙模型中使用content来获取变换）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TutBlockStates</span> <span class="keyword">extends</span> <span class="title class_">BlockStateProvider</span> &#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">registerStatesAndModels</span><span class="params">()</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        registerCable();</span><br><span class="line">        registerFacade();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">registerCable</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">BlockModelBuilder</span> <span class="variable">model</span> <span class="operator">=</span> models().getBuilder(<span class="string">&quot;cable&quot;</span>)</span><br><span class="line">                .parent(models().getExistingFile(mcLoc(<span class="string">&quot;cube&quot;</span>)))</span><br><span class="line">                .customLoader((builder, helper) -&gt; <span class="keyword">new</span> <span class="title class_">CableLoaderBuilder</span>(CableModelLoader.GENERATOR_LOADER, builder, helper, <span class="literal">false</span>))</span><br><span class="line">                .end();</span><br><span class="line">        simpleBlock(Registration.CABLE_BLOCK.get(), model);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">registerFacade</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">BlockModelBuilder</span> <span class="variable">model</span> <span class="operator">=</span> models().getBuilder(<span class="string">&quot;facade&quot;</span>)</span><br><span class="line">                .parent(models().getExistingFile(mcLoc(<span class="string">&quot;cube&quot;</span>)))</span><br><span class="line">                .customLoader((builder, helper) -&gt; <span class="keyword">new</span> <span class="title class_">CableLoaderBuilder</span>(CableModelLoader.GENERATOR_LOADER, builder, helper, <span class="literal">true</span>))</span><br><span class="line">                .end();</span><br><span class="line">        simpleBlock(Registration.FACADE_BLOCK.get(), model);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">CableLoaderBuilder</span> <span class="keyword">extends</span> <span class="title class_">CustomLoaderBuilder</span>&lt;BlockModelBuilder&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">boolean</span> facade;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">CableLoaderBuilder</span><span class="params">(ResourceLocation loader, BlockModelBuilder parent, ExistingFileHelper existingFileHelper,</span></span><br><span class="line"><span class="params">                                  <span class="type">boolean</span> facade)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(loader, parent, existingFileHelper);</span><br><span class="line">            <span class="built_in">this</span>.facade = facade;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> JsonObject <span class="title function_">toJson</span><span class="params">(JsonObject json)</span> &#123;</span><br><span class="line">            <span class="type">JsonObject</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="built_in">super</span>.toJson(json);</span><br><span class="line">            obj.addProperty(<span class="string">&quot;facade&quot;</span>, facade);</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 我的世界 </tag>
            
            <tag> 模组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello world</title>
      <link href="/2023/10/24/hello-world/"/>
      <url>/2023/10/24/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Architectury-00-环境搭建</title>
      <link href="/2023/10/24/Architectury-00-%E5%89%8D%E8%A8%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/10/24/Architectury-00-%E5%89%8D%E8%A8%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="Architectury是什么东西"><a href="#Architectury是什么东西" class="headerlink" title="Architectury是什么东西"></a>Architectury是什么东西</h1><p>Architectury是一个工具链。<br>目的是：为了简化开发多平台mod<br>什么用：可以让你开发一次，发布forge和fabric平台。</p><h1 id="怎么开始"><a href="#怎么开始" class="headerlink" title="怎么开始"></a>怎么开始</h1><h2 id="如何开始使用"><a href="#如何开始使用" class="headerlink" title="如何开始使用"></a>如何开始使用</h2><ol><li>下载<a href="https://github.com/architectury/architectury-templates/releases/">架构模板</a>并将其导入为Gradle项目</li><li>使用模板生成器生成更新模板。</li></ol><p>这里采用第一种方法</p><h2 id="使用Architectury模板构建自己项目"><a href="#使用Architectury模板构建自己项目" class="headerlink" title="使用Architectury模板构建自己项目"></a>使用Architectury模板构建自己项目</h2><h3 id="如何选择模板"><a href="#如何选择模板" class="headerlink" title="如何选择模板"></a>如何选择模板</h3><p>要选择模板需要搞清楚几个概念</p><h4 id="简介mixin"><a href="#简介mixin" class="headerlink" title="简介mixin"></a>简介mixin</h4><p>Mixins是一个在Forge和Fabric上都可以使用的修改系统。由于Forge一般提供了对游戏的修改方法，所以可能不需要知道Mixins，但是对于Fabric是必须的。</p><h4 id="怎么了解Mixins"><a href="#怎么了解Mixins" class="headerlink" title="怎么了解Mixins"></a>怎么了解Mixins</h4><p><a href="https://fabricmc.net/wiki/tutorial:mixin_introduction">Fabric Wiki</a>是一个很好的资源。如果你只是添加一些简单方块物品，那么不需要用到Mixins，Fabric提供了这样的功能，但是如果你添加负责的功能，这是必要的。</p><h4 id="搞清楚我是否需要Quilt"><a href="#搞清楚我是否需要Quilt" class="headerlink" title="搞清楚我是否需要Quilt"></a>搞清楚我是否需要Quilt</h4><h4 id="当前由那些模板变体"><a href="#当前由那些模板变体" class="headerlink" title="当前由那些模板变体"></a>当前由那些模板变体</h4><ul><li>Forge：Forge子项目用于调用特定的Forge代码，处理ForgeInit，此子项目可以执行Forge</li><li>Fabric-Like Intermedinary：调用Fabric API绑定类Fabric项目，可用于调用不特定的Fabric和Quilt代码，例如Fabric和Quilt都支持的钩子，此子项目不可执行。</li><li>Fabric：Fabric子项目用于调用特定的Fabric代码，处理Fabirc Init。此子项目可执行Fabric代码</li><li>Quilt：同上</li></ul><p>支持的子项目</p><p><img src="https://s2.loli.net/2023/10/28/PUbjzWpSDyFr8ns.png" alt="1698156270904"></p><p>根据你需求选择不同的模板，我这里选择Forge-Fabric 需要mixin</p><p><img src="https://s2.loli.net/2023/10/28/xpuNgvHWCFs5GP1.png" alt="1698156452676"></p><h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><p>下载解压后用idea打开文件夹即可。<br>它会自动构建项目，等待successful即可。</p><p><img src="https://s2.loli.net/2023/10/28/pA7oEWru4QBOq5e.png" alt="1698156741346"></p><p>构建完成后</p><p><img src="https://s2.loli.net/2023/10/28/3seGOlJqFmZjSVX.png" alt="1698158356631"></p><h3 id="有哪些内容是我需要配置的"><a href="#有哪些内容是我需要配置的" class="headerlink" title="有哪些内容是我需要配置的"></a>有哪些内容是我需要配置的</h3><p>你需要配置的文件具有如下（如果存在的话）：</p><ul><li>gradle.properties</li><li>fabric.mod.json</li><li>META-INF&#x2F;mods.toml</li><li>quilt.mod.json</li><li>architectury.common.json</li><li>examplemod.accesswidener</li><li>examplemod-common.mixins.json</li></ul><p>并且需要配置类的定位，还需要更改common&#x2F;build.gradle中的访问加宽器。</p><p><img src="https://s2.loli.net/2023/10/28/RW4TLxKpVlyCeUS.png" alt="image-20231028183829928"></p><p><img src="https://s2.loli.net/2023/10/28/FqJOWrSav9sHLA1.png" alt="image-20231028183838837"></p><p><img src="https://s2.loli.net/2023/10/28/uOdJmYSHgPtcwfp.png" alt="image-20231028183848321"></p><p><img src="https://s2.loli.net/2023/10/28/kXyzLxlgbKh6vNS.png" alt="image-20231028194831201"></p><p>修改之后重新reload下项目，启动游戏查看是否正常显示为你的mod了。</p><h2 id="如果我不想使用Architectury-API"><a href="#如果我不想使用Architectury-API" class="headerlink" title="如果我不想使用Architectury API"></a>如果我不想使用Architectury API</h2><h2 id="你可以更换什么api"><a href="#你可以更换什么api" class="headerlink" title="你可以更换什么api"></a>你可以更换什么api</h2><ul><li>yarn</li><li>ParchmentMC</li></ul><h3 id="我应该怎么操作"><a href="#我应该怎么操作" class="headerlink" title="我应该怎么操作"></a>我应该怎么操作</h3><p>请见[官网](<a href="https://docs.architectury.dev/plugin:get_started">plugin:get_started | Architectury Documentation</a>)，我直接用了原本的api</p><h2 id="如何将先有个的项目转化为Architectury项目"><a href="#如何将先有个的项目转化为Architectury项目" class="headerlink" title="如何将先有个的项目转化为Architectury项目"></a>如何将先有个的项目转化为Architectury项目</h2><p>官网教程显示已过期，没找到其他的教程，待补充</p><h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>接下来我们看如何添加物品方块等游戏内容</p>]]></content>
      
      
      
        <tags>
            
            <tag> 我的世界 </tag>
            
            <tag> 模组 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
